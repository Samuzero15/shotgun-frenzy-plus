
Actor FPMToken_NoCount : Boolean {} // This enemy is too easy to be paid (grant experience only.)
Actor FPMToken_Gibbed : Boolean {} // The enemy became bits.
Actor FPMToken_Frozen : Boolean {} // The enemy got frozen. (Same as gibbed)รง
Actor FPMToken_Hard : Boolean {} // This enemy is hard to kill.
Actor FPMToken_Boss : Boolean {} // This enemy is a boss (granting a lot of experience and credits.)

/*
	Quick Monster Addition guide:
	0) By default depending on the health, the monster will belong to the respective class (the tankier it is the higher class it belongs, and that means more profit)
	   So if for any reason you need a weak in power, but slightly tanky monster, add the "stamina" actor property and change it to any class you need. (0-6)
	1) Inherit FPlus_Monster class.
	2) Replace Death, xdeath and Raise states to monDeath, monXDeath, and MonRaise.
	3) In the last frame from the Death and XDeath States, do NOT use the -1 tic, change it to 1 tic if you do. 
	   That will keep the monster forever, and it won't be auto-removed.
	4) Instead of stop, after the last state from death and xdeath states, replace it with:
		"goto FadeOut" if this monster contains a raise state.
		"goto FadeOut.NoRaise" if this monster does not need a raise state.
*/

Actor FPlus_Monster {
	health 10
	species "DemonSide"
	DamageFactor "DemonFire", 0.0
	stamina -1 // Defines the monster class manually, -1 means "assign class by health", -2 means minimal profit.
	accuracy 0 // Tells if this monster can be championized. -1 = no, 0 = yes (default), 1 = always.
	MONSTER
	+MTHRUSPECIES
	+USEDAMAGEEVENTSCRIPT
	+USESPAWNEVENTSCRIPT
	
	states{
		
		Spawn:
			TNT1 a 1 A_Log("WARNING: Monster logic issue in Spawn State")
		Loop
		
		See:
			TNT1 a 1 a_Log("WARNING: Monster logic issue in See State")
		Loop
		
		BeBoss:
			"####" "#" 0 A_ChangeFlag("NOPAIN", true)
			"####" "#" 0 A_ChangeFlag("MISSILEMORE", true)
			"####" "#" 0 A_ChangeFlag("MISSILEEVENMORE", true)
			"####" "#" 0 A_ChangeFlag("QUICKTORETALIATE", true)
			"####" "#" 0 A_ChangeFlag("NORADIUSDMG", TRUE)
			"####" "#" 50 A_Jump(256, "Spawn") 
		goto Spawn
		
		BeHard:
			"####" "#" 0 A_ChangeFlag("NOPAIN", true)
			"####" "#" 0 A_ChangeFlag("MISSILEMORE", true)
			"####" "#" 0 A_ChangeFlag("QUICKTORETALIATE", true)
			"####" "#" 0 ACS_NamedExecuteAlways("Monster_HPBar", 0, height)
			"####" "#" 50 A_Jump(256, "Spawn") 
		goto Spawn
		
		MonXDeath: // Overridable, if does not have it, go to it's death.
			"####" "#" 0 
			"####" "#" 0 A_TakeInventory("FPMToken_Gibbed",1)
			"####" "#" 50 A_Jump(256, "MonDeath") // Called for all of the inherited classes.
		goto MonDeath
		
		MonDeath:
			"####" "#" 0 A_TakeInventory("FPMToken_Gibbed",1) // Flag Token.
			"####" "#" 50 a_Log("WARNING: Monster logic issue in Death State")
		goto FadeOut+1
		
		MonRaise:
			"####" "#" 0 a_Log("WARNING: Monster logic issue in Raise State")
		goto FadeOut+1
		
		FadeOut:
			"####" "#" 650 CanRaise
			"####" "#" 2 A_FadeOut(0.1)
			"####" "#" 2 A_Fadein(0.05)
		goto FadeOut+1
		
		FadeOut.NoRaise:
			"####" "#" 650
			"####" "#" 2 A_FadeOut(0.1)
			"####" "#" 2 A_Fadein(0.05)
		goto FadeOut+1
		
		Death.Ice:
			"####" "#" 0 A_GiveInventory("FPMToken_Frozen",1) // Flag Token.
		goto GenericFreezeDeath
		
		Death:
			"####" "#" 0 
			"####" "#" 50 A_Jump(256, "MonDeath") // Called for all of the inherited classes.
		stop
		
		Death.NoCount:
			"####" "#" 0 
			"####" "#" 0 A_GiveInventory("FPMToken_NoCount", 1)
			"####" "#" 50 A_Jump(256, "MonDeath") // Called for all of the inherited classes.
		stop
		
		XDeath:
			"####" "#" 0 
			"####" "#" 0 A_SpawnItem ("splatEmitter_Lite" , 0, 0, 0, 0)
			"####" "#" 0 A_GiveInventory("FPMToken_Gibbed",1) 
			"####" "#" 50 A_Jump(256, "MonXDeath") // Called for all of the inherited classes.
		stop
		
		Raise:
			"####" "#" 0 A_TakeInventory("FPMToken_Gibbed",1)
			"####" "#" 0 A_TakeInventory("FPMToken_Frozen",1)
			"####" "#" 0 A_TakeInventory("FPMToken_NoCount", 1)
			"####" "#" 0 A_TakeInventory("MarkToken_IAmDead", 1)
			"####" "#" 50 A_Jump(256, "MonRaise") // Called for all of the inherited classes.
		goto MonRaise
	
	}
}

// monsters
#include "Actors/monsters/Defines/fp_defines.dec"
#include "Actors/monsters/fp_aidspawn.dec"
#include "Actors/monsters/fp_modifiers.dec"
#include "Actors/monsters/fp_altstates.dec"
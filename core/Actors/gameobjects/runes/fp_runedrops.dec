// Numbers are sorted in the same order of the SFRUNDEF from top to down.
const int RUNE_RAMPAGE = 0;
const int RUNE_RAGE = 1;
const int RUNE_STRENGTH = 2;
const int RUNE_SPREAD = 3;
const int RUNE_RESISTANCE = 4;
const int RUNE_DRAIN = 5;
const int RUNE_REFLECTION = 6;
const int RUNE_DEFENSE = 7;
const int RUNE_RESURRECTION = 8;
const int RUNE_SOUL = 9;
const int RUNE_PROSPERITY = 10;
const int RUNE_BLAST = 11;
const int RUNE_AMMUNITION = 12;
const int RUNE_FORTUNE = 13;
const int RUNE_TEMPERANCE = 14;
const int RUNE_HEALTH = 15;
const int RUNE_REGENERATION = 16;
const int RUNE_HIGHJUMP = 17;
const int RUNE_HASTE = 18;

Actor RuneDrop : CustomInventory { // yes, the fading pickup code, i know, but with a small difference.
	// A fading pickup that must be took between the time limit before it disappears.
	Inventory.PickupSound "g/RunePickup"
	States{
		Spawn:
			TNT1 A 0 NODELAY ACS_NamedExecuteAlways("Pickup_Fade", 0, 45)
			TNT1 A 50 A_Jump(256, "Spawn.Loop")
			goto Spawn.Loop

		Pickup:
			TNT1 A 0
			TNT1 A 0 A_JumpIf(CheckClass("MechPlayer"), "Null") // Do not allow pickup by mech users.
			TNT1 A 0 A_JumpIf(CallACS("Runes_PlayerIsHoldingRune", args[0]), "Pickup.AlreadyGotIt")
			TNT1 A 0 A_JumpIfInventory("Input_Use", 1, "Pickup.Give")
			TNT1 A 0 ACS_NamedExecuteAlways("Runes_PickMessage", 0, args[0])
		fail

		Pickup.Give:
			TNT1 A 0
		Stop

		Pickup.AlreadyGotIt:
			TNT1 A 0 ACS_NamedExecuteAlways("Runes_OwnedMessage", 0, args[0])
		FailPickup:
			TNT1 A 0
		fail
	}
}

Actor RageRune_Drop : RuneDrop { 
    +NOGRAVITY
	Inventory.PickupMessage "$PICKUP_RAGE"
    Inventory.PickupAnnouncerEntry "rage"
 States {
		Spawn.Loop:
			RAGR ABCDEFGH 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_RAGE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("RageRune", 1)
		stop
}}

Actor StrengthRune_Drop : RuneDrop { 
    +NOGRAVITY
	Inventory.PickupMessage "$PICKUP_STRENGTH"
    Inventory.PickupAnnouncerEntry "strength"
 States {
		Spawn.Loop:
			STRR ABCD 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_STRENGTH)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("StrengthRune", 1)
		stop
}}

ACTOR DrainRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "$PICKUP_DRAIN"
	Inventory.PickupAnnouncerEntry "drain"
	States
	{
        Spawn.Loop:
			DRAR ABCD 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_DRAIN)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("DrainRune", 1)
		stop
	}
}

ACTOR SpreadRune_Drop : RuneDrop
{
	+NOGRAVITY
	+FLOATBOB
	Inventory.PickupMessage "$PICKUP_SPREAD"
	Inventory.PickupAnnouncerEntry "spread"
	States
	{
        Spawn.Loop:
			SPRR ABCD 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_SPREAD)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("SpreadRune_Pickup", 1)
		stop
	}
}

ACTOR ResistanceRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "$PICKUP_RESISTANCE"
	Inventory.PickupAnnouncerEntry "resistance"
	States
	{
        Spawn.Loop:
			RESR ABCDEFGH 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_RESISTANCE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("ResistanceRune", 1)
		stop
	}
}

ACTOR RegenerationRune_Drop : RuneDrop
{
	+NOGRAVITY
	+FLOATBOB
	Inventory.PickupMessage "$PICKUP_REGENERATION"
	Inventory.PickupAnnouncerEntry "regeneration"
	States
	{
        Spawn.Loop:
			REGR AB 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_REGENERATION)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("RegenerationRune", 1)
		stop
	}
}

ACTOR ProsperityRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "$PICKUP_PROSPERITY"
	Inventory.PickupAnnouncerEntry "prosperity"
	States
	{
        Spawn.Loop:
			PRSR ABCD 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_PROSPERITY)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("ProsperityRune", 1)
		stop
	}
}

ACTOR ReflectionRune_Drop : RuneDrop
{
	+NOGRAVITY
	+FLOATBOB
	Inventory.PickupMessage "$PICKUP_REFLECTION"
	Inventory.PickupAnnouncerEntry "reflection"
	States
	{

        Spawn.Loop:
			REFR AB 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_REFLECTION)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("ReflectionRune", 1)
		stop
	}
}

ACTOR HighJumpRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "$PICKUP_HIGHJUMP"
	Inventory.PickupAnnouncerEntry "highjump"
	States
	{
        Spawn.Loop:
			HIJR ABCD 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_HIGHJUMP)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("HighJumpRune", 1)
		stop
	}
}

ACTOR HasteRune_Drop : RuneDrop
{
	+NOGRAVITY
	+FLOATBOB
	Inventory.PickupMessage "$PICKUP_HASTE"
	Inventory.PickupAnnouncerEntry "haste"
	States
	{
        Spawn.Loop:
			HASR ABCD 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_HASTE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("HasteRune", 1)
		stop
	}
}

ACTOR AmmunitionRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "Ammunition!"
	Inventory.PickupAnnouncerEntry "ammunition"
	scale 0.5
	States
	{
        Spawn.Loop:
			RAMO ABCDE 5
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_AMMUNITION)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("AmmunitionRune_Pickup", 1)
		stop
	}
}

ACTOR BlastRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "Blast!"
	Inventory.PickupAnnouncerEntry "blast"
	States
	{
        Spawn.Loop:
			RBST ABCB 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_BLAST)
		goto Super::Pickup

		Pickup.Give:
			TNT1 A 0 A_GiveInventory("BlastRune", 1)
		stop
	}
}

ACTOR DefenseRune_Drop : RuneDrop
{
	+NOGRAVITY
	Inventory.PickupMessage "Defense!"
	Inventory.PickupAnnouncerEntry "defense"
	scale 0.5
	States
	{
        Spawn.Loop: 
			RDEF A 6
			RDEF A 6 BRIGHT
		loop

		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_DEFENSE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("DefenseRune", 1)
		stop
	}
}

ACTOR FortuneRune_Drop : RuneDrop 
{
	+NOGRAVITY
	Inventory.PickupMessage "Fortune!"
	Inventory.PickupAnnouncerEntry "fortune"
	States
	{
        Spawn.Loop:
			RFOR T 8 A_SpawnItemEx("Blood", random(-2,2), random(-2,2), 8)
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_FORTUNE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("FortuneRune", 1)
		stop
    }
}

ACTOR TemperanceRune_Drop : RuneDrop {
	+NOGRAVITY
	Inventory.PickupMessage "Temperance!"
	Inventory.PickupAnnouncerEntry "temperance"
	States
	{
        Spawn.Loop:
			RTMP ABCDEFGH 4
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_TEMPERANCE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("TemperanceRune", 1)
		stop
	}
}

ACTOR SoulRune_Drop : RuneDrop {
	+NOGRAVITY
    scale 0.75
	Inventory.PickupMessage "Soul!"
    Inventory.PickupAnnouncerEntry "soul"
	States
	{
		Spawn.Loop:
			RSOU ABCDCB 6
		Loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_SOUL)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("SoulRune_Pickup", 1)
		stop
	}
}

ACTOR RampageRune_Drop : RuneDrop {
	+NOGRAVITY
	Inventory.PickupMessage "Rampage!"
	Inventory.PickupAnnouncerEntry "rampage"
	scale 0.5
	States
	{
        Spawn:
            RRMP ABCB 6
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_RAMPAGE)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("RampageRune", 1)
		stop
	}
}

ACTOR HealthRune_Drop : RuneDrop {
	+NOGRAVITY
	Inventory.PickupMessage "Health!"
	Inventory.PickupAnnouncerEntry "health"
	scale 0.5
	States
	{
        Spawn.Loop:
			RHLT ABCD 4
		loop
		Pickup:
			TNT1 A 0 A_SetArg(0, RUNE_HEALTH)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("HealthRune_Pickup", 1)
		stop
	}
}

ACTOR ResurrectionRune_Drop : RuneDrop {
	+NOGRAVITY
	Inventory.PickupMessage "Resurrection!"
	Inventory.PickupAnnouncerEntry "resurrection"
	scale 0.9
	FloatSpeed 2
	States
	{
		
        Spawn.Loop:
        	RRES A 3 Bright A_SpawnItem("ResurrectionRune_GFX")
			RRES A 3 Bright A_fadein(0.5)
			RRES A 6 A_fadeout(0.5)
		loop

		Pickup:
			TNT1 A 0 A_SetArg(0, 8)
		goto Super::Pickup
		Pickup.Give:
			TNT1 A 0 A_GiveInventory("ResurrectionRune", 1)
		stop
	}
}
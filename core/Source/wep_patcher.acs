
#libdefine PATCHER_HID_HEALTH 2700
#libdefine PATCHER_HID_COST	  2701
#libdefine PATCHER_HID_MSG 	  2702
#libdefine PATCHER_FIXINMULT 0.10
#libdefine PATCHER_PRICEMULT 0.07
#libdefine PATCHER_BUFFMULT 0.20
#libdefine PATCHER_USERVAR_FIX "user_fixcost"
#libdefine PATCHER_USERVAR_UPG "user_upgcost"
#libdefine PATCHER_USERVAR_RANGE "user_rangestart"
#libdefine PATCHER_USERVAR_RANGEUP "user_rangeup"
#libdefine BUILDING_MAXLVL 5

function void Patcher_Display(int playnum){
	int hp = GetActorProperty(0, APROP_HEALTH);
	int maxhp = GetActorProperty(0, APROP_SPAWNHEALTH);
	int fix_price = GetUserVariable(0, PATCHER_USERVAR_FIX);
	int buff_price = GetUserVariable(0, PATCHER_USERVAR_UPG);
	int lvl = GetActorProperty(0, APROP_STAMINA);

	int fix = (maxhp * PATCHER_FIXINMULT) >> 16;
	int color = CR_WHITE;
	int msg = -1;
	
	SetActivator(990+playnum);

	if(CheckWeapon("Patcher_Advanced")){
		fix_price = fix_price/2;
		buff_price = buff_price/2;
	} 
	
	if (CheckInventory("Patcher_HudHeal")){
		//color = CR_GREEN;
		msg = 1;
		NamedExecuteClientScript("Patcher_ShowMsg", playnum, msg, lvl, fix);	
	} else if(CheckInventory("Patcher_HudMaxHp")){
		//color = CR_CYAN;
		msg = 2;
		NamedExecuteClientScript("Patcher_ShowMsg", playnum, msg, lvl, fix);	
	} else if(CheckInventory("Patcher_HudNoMoney")){
		//color = CR_ORANGE;
		msg = 3;
		NamedExecuteClientScript("Patcher_ShowMsg", playnum, msg, lvl, fix);	
	} else if (CheckInventory("Patcher_HudBuff")){
		//color = CR_GOLD;
		msg = 4;
		NamedExecuteClientScript("Patcher_ShowMsg", playnum, msg, lvl, fix);	
	} else if (CheckInventory("Patcher_HudBuffed")){
		msg = 5;
		NamedExecuteClientScript("Patcher_ShowMsg", playnum, msg, lvl, fix);	
	}else {
		NamedExecuteClientScript("Patcher_ShowMsg", playnum, msg, lvl, fix);	
	}

	NamedExecuteClientScript("Patcher_ShowHealth", playnum, hp, maxhp);	    
	NamedExecuteClientScript("Patcher_ShowCosts", playnum, fix_price, buff_price, fix, lvl);	  
}

script "Patcher_ShowHealth" (int hp, int maxhp) CLIENTSIDE
{
	SetHudSize(320, 240, 0);
	Setfont("confont");
	HudMessage(d:hp, s:"/", d:maxhp; HUDMSG_FADEOUT, PATCHER_HID_HEALTH, CR_WHITE, 320*0.5, 240*0.65, 0.2, 1.0);
	SetHudSize(0, 0, 0);
}

script "Patcher_ShowMsg" (int msg_num, int lvl, int fix) CLIENTSIDE 
{
	str msg;
	switch(msg_num){
		case 1:
			msg = strparam(s:"Repaired \cd", d:fix,s:"\c- HP!" );
		break;
		case 2:
			msg = "\cgFull HP";
		break;
		case 3:
			msg = "\cgNot enough credits!";
		break;
		case 4:
			msg = strparam(s:"Upgraded to \cfLevel ", d:lvl, s:"!");
		break;
		case 5:
			msg = "\cvFully repaired!";
		break;
	}
	
	f_CenterTipPatcher(msg);
}

script "Patcher_ShowCosts" (int price, int buff_price, int fix, int lvl) CLIENTSIDE {
	SetHudSize(640, 480, 0);
	Setfont("confont");
	str stars = "[";
	for (int i = 0; i < 5; i++){
		if(i < lvl)  stars = strparam(s:stars, s:"\cf*");
		else         stars = strparam(s:stars, s:"\c- ");
	}
	stars = strparam(s:stars, s:"\c-]");;
	HudMessage(s:"(\cd+",d:fix, s:" HP\c-): \cf", d:price, s:" $ \n\c-(\cv+1 Lvl\c-): \cf", d:buff_price, s:" $\c-\nLevel: ", s:stars;
						 HUDMSG_FADEOUT, PATCHER_HID_COST, CR_WHITE, 640*0.5, 480*0.70, 0.2, 1.0);
	SetHudSize(0, 0, 0);
}

function void PatcherHud_TakeThis(int which){
	switch(which){
		case 1: TakeInventory("Patcher_HudHeal", 1); break;
		case 2: TakeInventory("Patcher_HudMaxHp", 1); break;
		case 3: TakeInventory("Patcher_HudNoMoney", 1); break;
		case 4: TakeInventory("Patcher_HudBuff", 1); break;
		case 5: TakeInventory("Patcher_HudBuffed", 1); break;
		default: break;
	}
}

script "Patcher_TurretScouter" (void){
	if(CheckInventory("Patcher_Script")) terminate;
	else GiveInventory("Patcher_Script", 1);

	int framecount = 0;
	int countnow = 0;
	int flag1 = CheckInventory("Patcher_HudHeal");
	int flag2 = CheckInventory("Patcher_HudMaxHp");
	int flag3 = CheckInventory("Patcher_HudNoMoney");
	int flag4 = CheckInventory("Patcher_HudBuff");
	int flag5 = CheckInventory("Patcher_HudBuffed");
	int lastflag = 0;
	While(CheckWeapon("Patcher") || CheckWeapon("Patcher_Advanced")){
		if(CheckWeapon("Patcher"))					GiveInventory("Patcher_Libra", 1);
		else if(CheckWeapon("Patcher_Advanced"))	GiveInventory("Patcher_LibraAdvanced", 1);

		if(flag1 != CheckInventory("Patcher_HudHeal")){
			PatcherHud_TakeThis(lastflag);
			lastflag = 1;
			countnow = true;
		}
		if(flag2 != CheckInventory("Patcher_HudMaxHp")){
			PatcherHud_TakeThis(lastflag);
			lastflag = 2;
			countnow = true;
		}
		if(flag3 != CheckInventory("Patcher_HudNoMoney")){
			PatcherHud_TakeThis(lastflag);
			lastflag = 3;
			countnow = true;
		}
		if(flag4 != CheckInventory("Patcher_HudBuff")){
			PatcherHud_TakeThis(lastflag);
			lastflag = 4;
			countnow = true;
		}
		if(flag5 != CheckInventory("Patcher_HudBuffed")){
			PatcherHud_TakeThis(lastflag);
			lastflag = 5;
			countnow = true;
		}

		if(CheckInventory("Patcher_FrameRefresh")){
			framecount = 0;
			TakeInventory("Patcher_FrameRefresh", 1);
		}

		if(countnow == True){
			if(framecount >= 35){
				TakeInventory("Patcher_HudHeal", 1);
				TakeInventory("Patcher_HudMaxHp", 1);
				TakeInventory("Patcher_HudNoMoney", 1);
				TakeInventory("Patcher_HudBuff", 1);
				TakeInventory("Patcher_HudBuffed", 1);
				framecount = 0;
				countnow = false;
				lastflag = 0;
			}
			else framecount++;
		}
		

		flag1 = CheckInventory("Patcher_HudHeal");
		flag2 = CheckInventory("Patcher_HudMaxHp");
		flag3 = CheckInventory("Patcher_HudNoMoney");
		flag4 = CheckInventory("Patcher_HudBuff");
		flag5 = CheckInventory("Patcher_HudBuffed");
		//log(s:"(Patcher_Hud) frameCount: ", d:framecount, s:" lastflag: ", d:lastflag, s:" counting? ", d:countnow);
		delay(1);
	}
	TakeInventory("Patcher_HudHeal", 1);
	TakeInventory("Patcher_HudMaxHp", 1);
	TakeInventory("Patcher_HudNoMoney", 1);
	TakeInventory("Patcher_HudBuff", 1);
	TakeInventory("Patcher_HudBuffed", 1);
	TakeInventory("Patcher_Script", 1);
}
script "Patcher_HandleHit" (int type, int arg1, int arg2) Event {
	//log(s:"arg2: ", s:arg2);
    if(type != GAMEEVENT_ACTOR_DAMAGED || !(
		strcmp(arg2, "PriPatcherDmg") == 0 ||
		strcmp(arg2, "AltPatcherDmg") == 0 ||
		strcmp(arg2, "IdlePatcherDmg") == 0 
	)) terminate;

	if(!IsATurret(ActivatorTID())){
		SetResultValue(0);
		terminate;
	}
		
	int atid, playnum;
	SetActivator(0, AAPTR_Damage_Source);
		playnum = PlayerNumber();
	if(playnum == -1) terminate;
	
	
	if(strcmp(arg2, "PriPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		If(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)){
			int price = GetUserVariable(0, PATCHER_USERVAR_FIX);
			int fix = (GetActorProperty(0, APROP_SPAWNHEALTH)*PATCHER_FIXINMULT) >> 16;
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			if(CheckWeapon("Patcher_Advanced")) price = price/2;
			SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

			if(p_Credits[playnum] < price){
				SetActivator(990+playnum);
				GiveInventory("Patcher_HudNoMoney", 1);
				GiveInventory("Patcher_FrameRefresh", 1);
			}else{
				p_Credits[playnum] -= price;
				GiveInventory("Health", fix);
				GiveInventory("PatcherEffect_Fixed", 1);
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				GiveInventory("Patcher_HudHeal", 1);
				GiveInventory("Patcher_FrameRefresh", 1);
				Rank_GrantEXP(playnum, 1);
			}
		} else {
			GiveInventory("PatcherEffect_Failed", 1);
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			GiveInventory("Patcher_HudMaxHP", 1);
			GiveInventory("Patcher_FrameRefresh", 1);
		}
		
	} else if(strcmp(arg2, "AltPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		int lvl = GetActorProperty(0, APROP_STAMINA);
		int price_upg = GetUserVariable(0, PATCHER_USERVAR_UPG);
		int rng = GetUserVariable(0, PATCHER_USERVAR_RANGE);
		int rng_up = GetUserVariable(0, PATCHER_USERVAR_RANGEUP);

		SetActivator(0, AAPTR_Damage_Source); // Back to the player
		if(CheckWeapon("Patcher_Advanced")) price_upg = price_upg/2;
		SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

		if(p_Credits[playnum] < price_upg){
				GiveInventory("PatcherEffect_Failed", 1);
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				GiveInventory("Patcher_HudNoMoney", 1);
				GiveInventory("Patcher_FrameRefresh", 1);
		}else{
			if(lvl < BUILDING_MAXLVL){
				p_Credits[playnum] -= price_upg;
				SetActorProperty(0, APROP_STAMINA, lvl + 1);
				lvl = GetActorProperty(0, APROP_STAMINA);

				SetUserVariable(0, "user_range", rng + rng_up*(lvl));

				GiveInventory("Patcher_Upgrade_RESET", 1);
				GiveInventory(strparam(s:"Patcher_Upgrade_LV", d:lvl), 1);
				GiveInventory("PatcherEffect_Upgraded", 1);
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				Rank_GrantEXP(playnum, 5);
				//log(s:"Upgraded to level: \ci", d:lvl);
				GiveInventory("Patcher_HudBuff", 1);
				GiveInventory("Patcher_FrameRefresh", 1);
			}else{ 
				// If fully upgraded, you can fully fix the turret by paying it's full price.
				// Expensive, yes. But, free experience!
				If(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)){
					p_Credits[playnum] -= price_upg;
					GiveInventory("Health", GetActorProperty(0, APROP_SPAWNHEALTH));
					GiveInventory("PatcherEffect_Failed", 1);
					SetActivator(0, AAPTR_Damage_Source); // Back to the player
					Rank_GrantEXP(playnum, 3); 
					GiveInventory("Patcher_HudBuffed", 1);
					GiveInventory("Patcher_FrameRefresh", 1);
				}else{
					GiveInventory("PatcherEffect_Failed", 1);
					SetActivator(0, AAPTR_Damage_Source); // Back to the player
					GiveInventory("Patcher_HudMaxHP", 1);
					GiveInventory("Patcher_FrameRefresh", 1);
				}
				
			}
		}
		//log(s:"Turret Level: ", d:lvl);
	} else if(strcmp(arg2, "IdlePatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		Patcher_Display(playnum);
	}
	SetResultValue(0);
}

#libdefine PATCHER_HID_HEALTH 2700
#libdefine PATCHER_HID_COST	  2701
#libdefine PATCHER_HID_MSG 	  2702
#libdefine PATCHER_FIXINMULT 0.20
#libdefine PATCHER_USERVAR_FIX "user_fixcost"
#libdefine PATCHER_USERVAR_UPG "user_upgcost"
#libdefine PATCHER_USERVAR_RANGE "user_rangestart"
#libdefine PATCHER_USERVAR_RANGEUP "user_rangeup"
#libdefine BUILDING_MAXLVL 5

#libdefine PATCHER_MSG_FIX 1
#libdefine PATCHER_MSG_MAXHP 2
#libdefine PATCHER_MSG_NOMONEY 3
#libdefine PATCHER_MSG_UPGRADED 4
#libdefine PATCHER_MSG_MAXUPGRADED 5
#libdefine PATCHER_MSG_MODE_MOVE 6
#libdefine PATCHER_MSG_MODE_UPGRADE 7

function void Patcher_Display(int playnum){
	SetActivator(0, AAPTR_Damage_Target);

	int hp = GetActorProperty(0, APROP_HEALTH);
	int maxhp = GetActorProperty(0, APROP_SPAWNHEALTH);
	int fix_price = GetUserVariable(0, PATCHER_USERVAR_FIX);
	int buff_price = GetUserVariable(0, PATCHER_USERVAR_UPG);
	int lvl = GetActorProperty(0, APROP_STAMINA);

	int fix = (maxhp * PATCHER_FIXINMULT) >> 16;
	int color = CR_WHITE;
	int msg = -1;
	
	SetActivator(990+playnum);
	if(CheckWeapon("Patcher_Advanced")){
		fix_price = fix_price/2;
		buff_price = buff_price/2;
	} 
	NamedExecuteClientScript("Patcher_ShowHealth", playnum, hp, maxhp);	    
	NamedExecuteClientScript("Patcher_ShowCosts", playnum, fix_price, buff_price, fix, lvl); 
}

function void Patcher_ShowMsg(int msgid, int play, int value){
	SetActivator(990+play);
	NamedExecuteClientScript("Patcher_ShowMsg", play, msgid, value);	
}

script "Patcher_ShowHealth" (int hp, int maxhp) CLIENTSIDE
{
	SetHudSize(320, 240, 0);
	Setfont("SMALLFNT");
	HudMessage(d:hp, s:"/", d:maxhp; HUDMSG_FADEOUT, PATCHER_HID_HEALTH, CR_WHITE, 320*0.5, 240*0.65, 0.2, 1.0);
	SetHudSize(0, 0, 0);
}

script "Patcher_ShowMsg" (int msg_num, int value) CLIENTSIDE 
{
	str msg;
	switch(msg_num){
		case PATCHER_MSG_FIX:
			msg = strparam(s:"Repaired \cd", d:value,s:"\c- HP!" );
		break;
		case PATCHER_MSG_MAXHP:
			msg = "\cgFull HP";
		break;
		case PATCHER_MSG_NOMONEY:
			msg = "\cgNot enough credits!";
		break;
		case PATCHER_MSG_UPGRADED:
			msg = strparam(s:"Upgraded to \cfLevel ", d:value, s:"!");
		break;
		case PATCHER_MSG_MAXUPGRADED:
			msg = "\cvFully repaired!";
		break;
		case PATCHER_MSG_MODE_MOVE:
			msg = "Switched to \ciMove \c-mode";
		break;
		case PATCHER_MSG_MODE_UPGRADE:
			msg = "Switched to \ciUpgrade \c-mode";
		break;
	}
	
	f_CenterTipPatcher(msg);
}

script "Patcher_ShowCosts" (int price, int buff_price, int fix, int lvl) CLIENTSIDE {
	SetHudSize(640, 480, 0);
	Setfont("SMALLFNT");
	str stars = "[";
	for (int i = 0; i < 5; i++){
		if(i < lvl)  stars = strparam(s:stars, s:"\cf*");
		else         stars = strparam(s:stars, s:"\c- ");
	}
	stars = strparam(s:stars, s:"\c-]");;
	HudMessage(s:"(\cd+",d:fix, s:" HP\c-): \cf", d:price, s:" $ \n\c-(\cv+1 Lvl\c-): \cf", d:buff_price, s:" $\c-\nLevel: ", s:stars;
						 HUDMSG_FADEOUT, PATCHER_HID_COST, CR_WHITE, 640*0.5, 480*0.70, 0.2, 1.0);
	SetHudSize(0, 0, 0);
}


script "Patcher_TurretScouter" (void){
	int use;
	If(CheckInventory("Patcher_script")) Terminate;
	else GiveInventory("Patcher_Script", 1);
	While(CheckWeapon("Patcher") || CheckWeapon("Patcher_Advanced")){
		if(CheckWeapon("Patcher"))					GiveInventory("Patcher_Libra", 1);
		else if(CheckWeapon("Patcher_Advanced"))	GiveInventory("Patcher_LibraAdvanced", 1);
		/*if(CheckInventory("Input_Use") && use != CheckInventory("Input_Use")){
			use = 1;
			SetInventory("Patcher_Mode", !CheckInventory("Patcher_Mode"));
			if(CheckInventory("Patcher_Mode"))
				Patcher_ShowMsg(PATCHER_MSG_MODE_MOVE, PlayerNumber(), 0);
			else
				Patcher_ShowMsg(PATCHER_MSG_MODE_UPGRADE, PlayerNumber(), 0);
			
		}
		use = CheckInventory("Input_Use");
		*/
		delay(5);
	}
	TakeInventory("Patcher_Script", 1);
}
script "Patcher_HandleHit" (int type, int arg1, int arg2) Event {
    if(type != GAMEEVENT_ACTOR_DAMAGED || !(
		strcmp(arg2, "PriPatcherDmg") == 0 ||
		strcmp(arg2, "AltPatcherDmg") == 0 ||
		strcmp(arg2, "IdlePatcherDmg") == 0 
	)) terminate;

	if(!IsATurret(ActivatorTID()) || (CheckActorClass(ActivatorTID(), "BatteryCore") || CheckActorClass(ActivatorTID(), "Battery"))){
		SetResultValue(0);
		terminate;
	}
		
	int atid, playnum;
	SetActivator(0, AAPTR_Damage_Source);
		playnum = PlayerNumber();
	if(playnum == -1) terminate;
	
	
	if(strcmp(arg2, "PriPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		If(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)){
			int price = GetUserVariable(0, PATCHER_USERVAR_FIX);
			int fix = (GetActorProperty(0, APROP_SPAWNHEALTH)*PATCHER_FIXINMULT) >> 16;
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			if(CheckWeapon("Patcher_Advanced")) price = price/2;
			SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

			if(p_Credits[playnum] < price){
				Patcher_ShowMsg(PATCHER_MSG_NOMONEY, playnum, 0);
				SetActivator(990+playnum);
				
				//GiveInventory("Patcher_HudNoMoney", 1);
				//GiveInventory("Patcher_FrameRefresh", 1);
			}else{
				p_Credits[playnum] -= price;
				GiveInventory("Health", fix);
				GiveInventory("PatcherEffect_Fixed", 1);
				SpawnForced("SparksEmitter_Building", GetActorX(0), GetActorY(0), GetActorZ(0));
				Patcher_ShowMsg(PATCHER_MSG_FIX, playnum, fix);
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				//GiveInventory("Patcher_HudHeal", 1);
				//GiveInventory("Patcher_FrameRefresh", 1);
				Rank_GrantEXP(playnum, 1);
			}
		} else {
			GiveInventory("PatcherEffect_Fail", 1);
			Patcher_ShowMsg(PATCHER_MSG_MAXHP, playnum, 0);
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			//GiveInventory("Patcher_HudMaxHP", 1);
			//GiveInventory("Patcher_FrameRefresh", 1);
		}
		
	} else if(strcmp(arg2, "AltPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		int lvl = GetActorProperty(0, APROP_STAMINA);
		int price_upg = GetUserVariable(0, PATCHER_USERVAR_UPG);
		int rng = GetUserVariable(0, PATCHER_USERVAR_RANGE);
		int rng_up = GetUserVariable(0, PATCHER_USERVAR_RANGEUP);

		SetActivator(0, AAPTR_Damage_Source); // Back to the player
		if(CheckWeapon("Patcher_Advanced")) price_upg = price_upg/2;
		SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

		if(p_Credits[playnum] < price_upg){
				GiveInventory("PatcherEffect_Fail", 1);
				Patcher_ShowMsg(PATCHER_MSG_NOMONEY, playnum, 0);
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				//GiveInventory("Patcher_HudNoMoney", 1);
				//GiveInventory("Patcher_FrameRefresh", 1);
		}else{
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			if(CheckInventory("Patcher_Mode")){
				SetActivator(0, AAPTR_Damage_Target); // Back to the turret
				ACS_NamedExecuteAlways("Building_MoveTo", 0);
			}else{
				SetActivator(0, AAPTR_Damage_Target); // Back to the turret
				if(lvl < BUILDING_MAXLVL){
					p_Credits[playnum] -= price_upg;
					SetActorProperty(0, APROP_STAMINA, lvl + 1);
					lvl = GetActorProperty(0, APROP_STAMINA);
					ACS_NamedExecuteAlways("Building_UpgradeStats", 0);
					SetUserVariable(0, "user_range", rng + rng_up*(lvl));
					SpawnForced("SparksEmitter_Deploy", GetActorX(0), GetActorY(0), GetActorZ(0));
					
					Patcher_ShowMsg(PATCHER_MSG_UPGRADED, playnum, lvl);
					SetActivator(0, AAPTR_Damage_Source); // Back to the player
					Rank_GrantEXP(playnum, 5);
					//log(s:"Upgraded to level: \ci", d:lvl);
					//GiveInventory("Patcher_HudBuff", 1);
					//GiveInventory("Patcher_FrameRefresh", 1);
				}else{ 
					// If fully upgraded, you can fully fix the turret by paying it's full price.
					// Expensive, yes. But, free experience!
					If(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)){
						p_Credits[playnum] -= price_upg;
						GiveInventory("Health", GetActorProperty(0, APROP_SPAWNHEALTH));
						GiveInventory("PatcherEffect_Fail", 1);
						Patcher_ShowMsg(PATCHER_MSG_MAXUPGRADED, playnum, 0);
						SetActivator(0, AAPTR_Damage_Source); // Back to the player
						Rank_GrantEXP(playnum, 3); 
						//GiveInventory("Patcher_HudBuffed", 1);
						//GiveInventory("Patcher_FrameRefresh", 1);
					}else{
						GiveInventory("PatcherEffect_Fail", 1);
						Patcher_ShowMsg(PATCHER_MSG_MAXHP, playnum, 0);
						SetActivator(0, AAPTR_Damage_Source); // Back to the player
						//GiveInventory("Patcher_HudMaxHP", 1);
						//GiveInventory("Patcher_FrameRefresh", 1);
					}
					
				}
			}
		}
		//log(s:"Turret Level: ", d:lvl);
	} else if(strcmp(arg2, "IdlePatcherDmg") == 0){
		Patcher_Display(playnum);
	}
	SetResultValue(0);
}

Script "Building_MoveTo" (void){
	if(!CheckInventory("Patcher_MoveMe")){
		GiveInventory("Patcher_MoveMe", 1);
	}else terminate;

	int movespotid = 7990, x, y, z;
	while(GetActorProperty(0, APROP_Health) >= 1){
		If(ThingCount(0, movespotid)){
			//log(s:"Building: Oh i see, ok im teleporting.");
			x = GetActorX(movespotid);
			y = GetActorY(movespotid);
			z = GetActorZ(movespotid);
			Thing_Remove(7990);
			delay(1);
			SetActorPosition(0, x,  y,  z, 1);
			TakeInventory("Patcher_MoveMe", 1);
			break;
		}else{
			//log(s:"Building: Ok, where i should move?");
		}
		delay(35);
	}
}


Script "Building_UpgradeStats" (void){
	if(!CheckInventory("Patcher_ScriptActive")){
		GiveInventory("Patcher_ScriptActive", 1);
	}else terminate;

	int current_level = 0;
	int health = GetActorProperty(0, APROP_HEALTH);
	int heal_factor = 0;
	int max_health = GetActorProperty(0, APROP_SpawnHealth);
	while(health >= 1){
		health = GetActorProperty(0, APROP_HEALTH);
		if(current_level != GetActorProperty(0, APROP_STAMINA)){ // Upgrade damage and damage factor.
			SetActorProperty(0, APROP_DamageFactor, 1.0-(0.1)*current_level); // Armor up
			SetActorProperty(0, APROP_DamageMultiplier, 1.0+(0.2)*current_level); // Damage up
			current_level = GetActorProperty(0, APROP_STAMINA);
			SetActorProperty(0, APROP_Health, max_health);// Fully heal it
		}else {
			max_health = GetActorProperty(0, APROP_SpawnHealth);
			if(health < max_health && health >= 1 && current_level > 0){ // regen script
				heal_factor = FixedMul(0.015*current_level, max_health*1.0) >> 16;
				if((health + heal_factor) >= max_health){
					SetActorProperty(0, APROP_Health, max_health);
				}else{
					SetActorProperty(0, APROP_Health, health + heal_factor);
				}
			}
		}
		delay(35);
	}
}
#library "samuterm"

// Includes:
#include "zcommon.acs"

#define ACSUTILS_RECTLIB_USERVARS 40 // Max amount of properties.

//////SF Stuff////////
#import "f_IntDB.acs"
#import "fl_Price.acs"
#import "fl_WDir.acs" // HEHEh, BOI.
#import "fl_IDir.acs" // HEHEh, BOI.
#import "fl_MUpDir.acs" // HEHEh, BOI.
#import "fl_PUpDir.acs" // HEHEh, BOI.
#import "fl_StUpDir.acs" // HEHEh, BOI.
#import "fp_comcmd.acs"
#import "fl_techs.acs"
#import "fc_AStr.acs"

#include "acsutils.acs"
#include "samu_tools.acs"
#include "acsrect.acs"
//////SF Stuff////////

#include "samut_vars.acs"
#include "samut_layouts.acs"
#include "samut_comps.acs"
#include "samut_pages.acs"
#include "samut_exes.acs"
#include "samut_input.acs"
#include "samut_update.acs"
#include "samut_disp.acs"

function bool Samuterm_InUse(void){return CheckInventory("SamuTInv_UsingTerminal");}
function void Samuterm_LockPlayer(int player){SetPlayerProperty(0,true,PROP_TOTALLYFROZEN);SetActorVelocity(player+1000,0,0,0,false,false);}
function void Samuterm_UnlockPlayer(int player){SetPlayerProperty(0,false,PROP_TOTALLYFROZEN);}
function void SamuTerm_SetBack(str what){imgbg = what;}
function void SamuTerm_ResetBack(void){imgbg = STSET_BACK;}

script "Samuterm_PlayerDiesSomehow" Death {if(Samuterm_InUse()) SamuTerm_Execute(STEXE_SYSOFF, 0, 0, 0);}  
script "SamuTerminal_IntDB" OPEN ClientSide {if(GameType() != GAME_SINGLE_PLAYER) IntDB_LoadStuff();}

Script "SamuTerminal" (int homeTag, int hidestatusbar){
	if(Samuterm_InUse() || g_Initialized == False) Terminate;
	
	SamuTerm_Execute(STEXE_OPEN, homeTag, 0, 0);
	SetInventory("SamuTInv_ActionKey", 0);
	SetInventory("SamuTInv_Action2Key", 0);
	SetInventory("SamuTInv_HideSBar", hidestatusbar);
	//print(s:"Statusbar hidden?: ", d:hidestatusbar);
	while(Samuterm_InUse()){delay(5);}
	ACS_NamedExecuteAlways("SFPlus_UpdateSaves", 0);
}

script "SamuTerminal_Loop" (int alphatag) CLIENTSIDE {
	//Here is where the magic begins!
	int play = playerNumber();
	if(IsClient() && consolePlayerNumber() == play && PlayerInGame(PlayerNumber())){
	
	pagetags[STTAGS_ALPHA] = alphatag;
	//log(s:"Terminal #:", d:pagetags[STTAGS_ALPHA]);
	switch(pagetags[STTAGS_ALPHA]){
		case 20:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_HEALTERM_HI", 3));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_HEALTERM_BYE", 3));
			SamuTerm_SetBack("BGR");
		break;

		case 30:
			if(CheckInventory("Mech_State") == 99){
				Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_MECHTERM_REPAIR_HI", 3));
				Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_MECHTERM_REPAIR_BYE", 3));
			}else if(!CheckInventory("Mech_State")){
				Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_MECHTERM_NOMECH_HI", 0));
				Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_MECHTERM_NOMECH_BYE", 0));
			} else {
				Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_MECHTERM_HI", 3));
				Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_MECHTERM_BYE", 3));
			}
		break;
	
		case 10:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_COMMTERM_HI", 0));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_COMMTERM_BYE", 0));
			SamuTerm_SetBack("");
			//Toast_SetPosition(320.0, 380.0);
		break;

		case 0:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_AMMOTERM_HI", 3));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_AMMOTERM_BYE", 3));
		break;
		default:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_DEFAULT_HI", 0));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_DEFAULT_BYE", 0));
	}
	int chasecam_state = GetPlayerChasecam(play);
	
	SamuTerm_InitComps();
	//delay(5); // Since the background generation takes a big chunk of function calls, enough to runaway error. Give it a extra tic and...
	Component_PrintCount();
	//Samuterm_HelloPrompt();
	Input_ClearBinds();
	Input_BindDirections();
	SamuTerm_Say(msgs[STMSGS_LOGIN]);
	LocalAmbientSound("SamuTerm/LogIn", 127);
	PlaySound(1000+playernumber(),"SamuTerm/Idle", CHAN_BODY,1.0,true);

	// Split the big bad bois. THIS should mitigate that gae ass Runaway script.
	ACS_NamedExecuteAlways("SamuTerm_UpdateLoop", 0);
	ACS_NamedExecuteAlways("SamuTerm_InputLoop", 0);
	ACS_NamedExecuteAlways("SamuTerm_DisplayLoop", 0);
		while(Samuterm_InUse())
		{// Loopy.
			if(GetPlayerChasecam(play) == true) SetPlayerChasecam(play, 0);// I must keep you from abusing the chasecam.
			if(CheckInventory("SamuTInv_ForcedExit"))
				STExecute_Shutdown();
			debug();
			Delay(1);
		}
	SetPlayerChasecam(play, chasecam_state);
	CenterCursor();
	SamuTerm_ResetBack();
	if(exitResult != -1){
		SamuTerm_Say(msgs[STMSGS_LOGOUT]);
		LocalAmbientSound("SamuTerm/Back", 127);
	}
	StopSound(0,CHAN_BODY); 
	Delay(5);
	NamedRequestScriptPuke("SamuTerm_FreePlayer", ConsolePlayerNumber());
	}
}

Script "SamuTerm_UpdateLoop" (void) Clientside {
	while(Samuterm_InUse())
		{
			SamuTerm_Update();
			if(CheckInventory("SamuTInv_ForcedExit"))
				STExecute_Shutdown();
			//debug();
			Delay(1);
		}
}

Script "SamuTerm_InputLoop" (void) Clientside {
	int play = playerNumber();
	while(Samuterm_InUse()){
			SamuTerm_Input(play);
			if(CheckInventory("SamuTInv_ForcedExit"))
				STExecute_Shutdown();
			//debug();
			Delay(1);
	}
}

Script "SamuTerm_DisplayLoop" (void) Clientside {
	while(Samuterm_InUse())
		{
			SamuTerm_Display();
			if(CheckInventory("SamuTInv_ForcedExit"))
				STExecute_Shutdown();
			//debug();
			Delay(1);
		}
}

Script "SamuTerm_VariableSync" ENTER{
	while(PlayerInGame(PlayerNumber())){
		if(Samuterm_InUse()){ // Sync only if using the terminal.
			SetInventory("p_Money", 		p_credits[playernumber()]);
			SetInventory("p_UpPoint", 		p_Exp_points[playernumber()]);
			SetInventory("p_team_credits", 	c_credits);
			SetInventory("f_allownuke", 	f_AllowNuke);
			SetInventory("c_nukelaunched", 	c_NukeLaunched);
			SetInventory("c_allow_moneybag", 	c_allow_moneybag);
			SetInventory("c_allow_turret", 		allow_turret_C());
			SetInventory("c_timer_turret", 		c_allow_turret);
			SetInventory("c_timer", 		Timer());
			SetInventory("f_gametype", 		f_Gametype);
			SetInventory("pr_cmd_airstrike", AirStrike_GetPrice());
			SetInventory("mech_BUY", f_Price[52]);
			SetInventory("mech_state", p_TankSlot[PlayerNumber()]);
		}
		
		delay(1);
	}
}



function void debug(void){
	HudPushState();
    HudResetState();
		HudSetTimes();
		HudSetPoint(320.0, 460.0);
		str msg = strParam(s:"x: ", f:CursorX(), s:",y: ",f:CursorY());
		HUDDrawText(40,msg);
    HudPopState();
}

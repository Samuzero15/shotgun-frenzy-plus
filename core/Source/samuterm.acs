#library "samuterm"

// Includes:
#include "zcommon.acs"

#define ACSUTILS_RECTLIB_USERVARS 10 // user defined

//////SF Stuff////////
#import "f_IntDB.acs"
#import "fl_Price.acs"
#import "fl_WDir.acs" // HEHEh, BOI.
#import "fl_IDir.acs" // HEHEh, BOI.
#import "fl_MUpDir.acs" // HEHEh, BOI.
#import "fl_PUpDir.acs" // HEHEh, BOI.
#import "fl_StUpDir.acs" // HEHEh, BOI.
#import "fl_RuneDir.acs"
#import "fp_comcmd.acs"
#import "fl_techs.acs"
#import "fc_AStr.acs"

#include "acsutils.acs"
#include "samu_tools.acs"
#include "acsrect.acs"
//////SF Stuff////////

#include "samut_vars.acs"
#include "samut_utils.acs"

#include "samut_cards.acs"
#include "samut_grids.acs"
#include "samut_parse.acs"
#include "samut_comps.acs"
#include "samut_pages.acs"
#include "samut_exes.acs"
#include "samut_input.acs"
#include "samut_update.acs"
#include "samut_disp.acs"

Script "SamuTerminal" (int homeTag, int hidestatusbar){
	if(TerminalInUse()) Terminate;
	SamuTerm_Execute(STEXE_OPEN, homeTag, 0, 0);
	SetInventory("SamuTInv_ActionKey", 0);
	SetInventory("SamuTInv_HideSBar", hidestatusbar);
	//print(s:"Statusbar hidden?: ", d:hidestatusbar);
}	

script "TerminalLoop" (int alphatag) CLIENTSIDE {
	//Here is where the magic begins!
	int play = playerNumber();
	if(IsClient() && consolePlayerNumber() == play && PlayerInGame(PlayerNumber())){
	
	//Sync it with client.
	// To Sync the prices.
	ACS_NamedExecuteAlways("SFPlus_DefinePrices", 0);
	//ACS_NamedExecuteAlways("SFPlus_DefineWeapons", 0);
	SFPlus_DefineWeapons();
	SFPLUS_DefineItems();
	SFPlus_DefineCMDButtons();
	SFPlus_DefinePlayUps();
	SFPlus_DefineMechUps();
	SFPlus_DefineStimUps();
	SFPlus_DefineRunes();
		
	
	
	pagetags[STTAGS_ALPHA] = alphatag;
	//log(s:"Terminal #:", d:pagetags[STTAGS_ALPHA]);
	switch(pagetags[STTAGS_ALPHA]){
		case 20:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_HEALTERM_HI", 3));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_HEALTERM_BYE", 3));
			SamuTerm_SetBack("BGR");
		break;

		case 30:
			if(CheckInventory("Mech_State") == 99){
				Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_MECHTERM_REPAIR_HI", 3));
				Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_MECHTERM_REPAIR_BYE", 3));
			}else if(!CheckInventory("Mech_State")){
				Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_MECHTERM_NOMECH_HI", 0));
				Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_MECHTERM_NOMECH_BYE", 0));
			} else {
				Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_MECHTERM_HI", 3));
				Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_MECHTERM_BYE", 3));
			}
		break;
	
		case 10:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_COMMTERM_HI", 0));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_COMMTERM_BYE", 0));
			SamuTerm_SetBack("");
			//Toast_SetPosition(320.0, 380.0);
		break;

		case 0:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_AMMOTERM_HI", 3));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_AMMOTERM_BYE", 3));
		break;
		default:
			Vars_SetMessage(STMSGS_LOGIN, langstring("SAMUT_DEFAULT_HI", 0));
			Vars_SetMessage(STMSGS_LOGOUT, langstring("SAMUT_DEFAULT_BYE", 0));
	}
	int chasecam_state = GetPlayerChasecam(play);
	
	SamuTerm_InitComps();
	//Component_PrintCount();
	SamuTerm_Say(msgs[STMSGS_LOGIN]);
	LocalAmbientSound("SamuTerm/LogIn", 127);
	PlaySound(1000+playernumber(),"SamuTerm/Idle", CHAN_BODY,1.0,true);
		while(TerminalInUse())
		{
			if(GetPlayerChasecam(play) == true) SetPlayerChasecam(play, 0);// I must keep you from abusing the chasecam.
			SamuTerm_Update();
			SamuTerm_Input(play);
			SamuTerm_Display();
			if(CheckInventory("SamuTInv_ForcedExit"))
				STExecute_Shutdown();
			//debug();
			Delay(1);
		}
	SetPlayerChasecam(play, chasecam_state);
	CenterCursor();
	SamuTerm_ResetBack();
	if(exitResult != -1){
		SamuTerm_Say(msgs[STMSGS_LOGOUT]);
		LocalAmbientSound("SamuTerm/Back", 127);
	}
	StopSound(0,CHAN_BODY); 
	Delay(5);
	NamedRequestScriptPuke("SamuTerm_FreePlayer", ConsolePlayerNumber());
	}
}

Script "SamuTerm_VariableSync" ENTER{
	while(PlayerInGame(PlayerNumber())){
		if(TerminalInUse()){ // Sync only if using the terminal.
			Samuterm_SetInv("p_Money", 		p_credits[playernumber()]);
			Samuterm_SetInv("p_UpPoint", 		p_Exp_points[playernumber()]);
			Samuterm_SetInv("p_team_credits", 	c_credits);
			Samuterm_SetInv("f_allownuke", 	f_AllowNuke);
			Samuterm_SetInv("c_nukelaunched", 	c_NukeLaunched);
			Samuterm_SetInv("f_allownuke", 	f_AllowNuke);
			Samuterm_SetInv("c_nukelaunched", 	c_NukeLaunched);
			Samuterm_SetInv("c_allow_moneybag", 	c_allow_moneybag);
			Samuterm_SetInv("c_allow_turret", 		allow_turret_C());
			Samuterm_SetInv("c_timer_turret", 		c_allow_turret);
			Samuterm_SetInv("c_timer", 		Timer());
			Samuterm_SetInv("f_gametype", 		f_Gametype);
			Samuterm_SetInv("pr_cmd_airstrike", AirStrike_GetPrice());
			Samuterm_SetInv("mech_BUY", f_Price[52]);
			Samuterm_SetInv("mech_state", p_TankSlot[PlayerNumber()]);
		}
		
		delay(1);
	}
}

function void Samuterm_SetInv(str item, int value){
	if(CheckInventory(item) != value)
		SetInventory(item, value);
}

function void debug(void){
	HudPushState();
    HudResetState();
		HudSetTimes();
		HudSetPoint(320.0, 460.0);
		str msg = strParam(s:"x: ", f:CursorX(), s:",y: ",f:CursorY());
		HUDDrawText(40,msg);
    HudPopState();
	
}

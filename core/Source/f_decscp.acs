///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// f_decscp.acs
// Scripts for the decorate tricks

// Put all your Decorate-Only scripts here, this script should be loaded in any level.


#library "f_decscp"


#include "zcommon.acs"
#include "acsutils.acs"
#import "f_intdb.acs"
#import "f_Rank.acs"
#import "f_tip.acs"

// ye, it's a shameless copy of dual wielding script from brutal doom.

// I have no shaem.
script "SecFireTrigger" ENTER
{
 int buttons;

 while (TRUE)
 {
   buttons = GetPlayerInput(-1, INPUT_BUTTONS);
   
	if (buttons & BT_ALTATTACK)	GiveInventory("Akimbo_Fire2", 1);
	else 						TakeInventory("Akimbo_Fire2", 1);
   delay(1);
 }
}


script "PriFireTrigger" ENTER
{
 int buttons;

 while (TRUE)
 {
   buttons = GetPlayerInput(-1, INPUT_BUTTONS);
   
	if (buttons & BT_ATTACK)	GiveInventory("Akimbo_Fire1", 1);
	else						TakeInventory("Akimbo_Fire1", 1);
   delay(1);
 }
}

function void AddAmmoCapacity (str ammo, int amount){
	SetAmmoCapacity(ammo, getAmmoCapacity(ammo) + amount);
}

script "PersonalBP_Expand" (void) {
	if(	getAmmoCapacity("Ammo_2BackpacksToken") == 3 ||
	 	getAmmoCapacity("Ammo_PersonalBPToken") == 2 ||
	  	!CheckInventory("P_Backpack")){
			// Dont expand if already expanded (having the backpack or not) or if we don't have the item.
			terminate; 
		}
	
	AddAmmoCapacity("Clip", 			100);
	AddAmmoCapacity("ClipPistol",		50);
	AddAmmoCapacity("Shell", 			30);
	AddAmmoCapacity("RocketAmmo", 		25);
	AddAmmoCapacity("HeavyBullets", 	100);
	AddAmmoCapacity("Dualshot_Ammo", 	50);
	AddAmmoCapacity("Cell", 			200);
	AddAmmoCapacity("GLauncher_Ammo", 	25);
	AddAmmoCapacity("Flinger_Ammo", 	50);
	AddAmmoCapacity("Gasoline",			50);

	AddAmmoCapacity("Ammo_PersonalBPToken", 1); // Set token.

	if(GetAmmoCapacity("Ammo_BackpackToken") == 2){
		AddAmmoCapacity("Ammo_2BackpacksToken", 1); // Set token.
	}
}

script "PersonalBP_Reset" (void) {
	SetAmmoCapacity("Ammo_PersonalBPToken", 1); // Reset token.
	SetAmmoCapacity("Ammo_2BackpacksToken", 1); // Reset token.

	SetAmmoCapacity("Clip", 			200);
	SetAmmoCapacity("ClipPistol",		50);
	SetAmmoCapacity("Shell", 			60);
	SetAmmoCapacity("RocketAmmo", 		50);
	SetAmmoCapacity("HeavyBullets", 	300);
	SetAmmoCapacity("Dualshot_Ammo",	200);
	SetAmmoCapacity("Cell", 			300);
	SetAmmoCapacity("GLauncher_Ammo", 	15);
	SetAmmoCapacity("Flinger_Ammo", 	50);
	SetAmmoCapacity("Gasoline", 		200);
}

Script "Player_GetRank" (void){
	SetResultValue(p_Rank[playernumber()] + 1);
}

Script "Player_IsDed" (void) {
	setResultValue(GetActorProperty(0, APROP_HEALTH) < 1);
}

Script "Armor_ArmorShardsOnly" (void){
	SetResultValue(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "ArmorShard") == 0);
}

Script "Armor_ReplaceShardsWithArmor" (int armortype){
	// When picked a lot of armor shards, and pick any type of armor. 
	// Replace the shards with the armor you picked up.
	// The leftovers will be also added to your armor.
	if(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "ArmorShard") == 0){
		int armor_points = CheckInventory("BasicArmor");
		TakeInventory("BasicArmor", 9999999);
		GiveInventory("SteelPlatingArmor", 1);
		int armor_points_now = CheckInventory("BasicArmor");
		if(armor_points > armor_points_now){
			int diff = armor_points - armor_points_now;
			GiveInventory("ArmorShard_One", diff);
		}
	}
}

Script "Supplier_GrantExp" (void)
{
	// 30 % of gaining 1 exp point after each drop.
	// Because I know they will exploit this.
	if(Random(0,10) < 3) Rank_GrantEXP(PlayerNumber(), 1);
}

Script "AltState_Particle_Stop" (void) {
	SetActivatorToTarget(0);
	SetResultValue(GetActorProperty(0, APROP_HEALTH) < 1);
}

Script "Particle_Get" (int which) {
	SetActivatorToTarget(0);
	int res;
	switch(which){
		case 1: res = GetActorProperty(0, APROP_RADIUS)>>16; break;
		case 2: res = GetActorProperty(0, APROP_HEIGHT)>>16; break;
		default: res = 0;
	}
	setResultValue(res);
}

Script "AltState_Particle_Activate" (void) {
	Thing_Activate(0);
}

script "AltState_Burn" (void)
{
	If(CheckInventory("AltState_Burning") || 
		CheckFlag(0, "Friendly") ||
	 	CheckFlag(0, "DORMANT")){terminate;}

	GiveInventory("AltState_Burning", 1);
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorZ(0) + 16.0;
	int r = 32.0;
	while(GetActorProperty(0, APROP_HEALTH) >= 1 && CheckInventory("AltState_BurnTimer")){
		//SetActorState (0, "Pain");
		// Spawn a fire to harm itself.
		x = GetActorX(0);
	 	y = GetActorY(0);
	 	z = GetActorZ(0) + 16.0;
		Spawn("FlamerRemains", x, y, z, 0, 0);
		delay(17);
	}

	if(GetActorProperty(0, APROP_HEALTH) <= 0){
		// Spread fire to burn adjacent monsters.
		x = GetActorX(0);
	 	y = GetActorY(0);
	 	z = GetActorZ(0) + 16.0;
		Spawn("FlamerRemainsSpawner", x, y, z, 0, 0);
	}
	delay(35);
	TakeInventory("AltState_Burning", 1);
}

script "AltState_Stun" (void)
{
	If(CheckInventory("AltState_Stunned") || CheckFlag(0, "Friendly") || CheckFlag(0, "DORMANT")){terminate;}
	GiveInventory("AltState_Stunned", 1);
	int ori_speed = GetActorProperty(0, APROP_SPEED);
	SetActorProperty(0, APROP_SPEED, 0);
	while(GetActorProperty(0, APROP_HEALTH) >= 1 && CheckInventory("AltState_StunTimer")){
		SetActorState (0, "Pain");
		log(s:"I can't move! bzzzt!");
		delay(6);
	}
	SetActorProperty(0, APROP_SPEED, ori_speed);
	delay(35);
	TakeInventory("AltState_Stunned", 1);
}

#libdefine REPEATER_HEATAIM 0
#libdefine REPEATER_BONUSDMG  1
#libdefine REPEATER_FIRECHANCE 2

script "Repeater_HeatProp" (int prop, int base){
	int heat = CheckInventory("Rep_Heat");
	switch(prop){
		case REPEATER_HEATAIM:
			setResultValue(heat/25 + base);
		break;
		case REPEATER_BONUSDMG:
			if (base <= 5) base = 5; 
			setResultValue((heat/20)*2 + base);
		break;
		case REPEATER_FIRECHANCE:
			setResultValue(heat/40 + base);
		break;
	}
}

script "PlayerId" (void){
	SetActivatorToTarget(0);
	SetResultValue(ActivatorTID());
}

function bool IsATurret(int tid){
	str turrets[9] ={
		"TurretBullet_HEAD",
		"TurretShotgun_Head",
		"TurretChaingun_Head",
		"TurretRocket_Head",
		"TurretPlasma_Head",
		"TurretBase_Head",
		"TurretBFG_Head",
		"HealthDispenser_Base",
		"AmmoDispenser_Base"
	};

		//log(s:GetActorClass(tid));
	for(int i = 0; i < 9; i ++){
		if(CheckActorClass(tid, turrets[i])){
			 return true;
		}
	}
		
	return false;
}

script "IAmATurret" (void){
	SetResultValue(IsATurret(ActivatorTID()));
}

#libdefine PATCHER_HID_HEALTH 2700
#libdefine PATCHER_HID_COST	  2701
#libdefine PATCHER_HID_MSG 	  2702
#libdefine PATCHER_FIXINMULT 0.10
#libdefine PATCHER_PRICEMULT 0.07
#libdefine PATCHER_BUFFMULT 0.20
#libdefine PATCHER_USERVAR_FIX "user_fixcost"
#libdefine PATCHER_USERVAR_UPG "user_upgcost"
#libdefine PATCHER_USERVAR_RANGE "user_rangestart"
#libdefine PATCHER_USERVAR_RANGEUP "user_rangeup"
#libdefine BUILDING_MAXLVL 5

function void Patcher_Display(int playnum){
	int hp = GetActorProperty(0, APROP_HEALTH);
	int maxhp = GetActorProperty(0, APROP_SPAWNHEALTH);
	int price = GetUserVariable(0, PATCHER_USERVAR_FIX);
	int buff_price = GetUserVariable(0, PATCHER_USERVAR_UPG);

	int fix = (maxhp * PATCHER_FIXINMULT) >> 16;
	int color = CR_WHITE;
	str msg = 0;
	
	int lvl = GetActorProperty(0, APROP_STAMINA);
	if(CheckInventory("PowerPatcher_DMGUpLv1") ||
		 CheckInventory("PowerPatcher_DMGUpLv2") ||
		 CheckInventory("PowerPatcher_DMGUpLv3") ||
		 CheckInventory("PowerPatcher_DMGUpLv4") ||
		 CheckInventory("PowerPatcher_DMGUpLv5") ) {
		color = CR_GOLD;
		msg = strparam(s:"Level ",d:lvl,s:"");
	}
	SetActivator(990+playnum);
	if(CheckWeapon("Patcher_Advanced")){
		price = price/2;
		buff_price = buff_price/2;
	} 
	int cost = strparam(s:"Repair Cost: ", d:price, s:" credits\nUpgrade Cost: ", d:buff_price, s:" credits");
	msg = -1;
	if(CheckInventory("Patcher_HudHeal")){
		
		//color = CR_GREEN;
		msg = strparam(s:"Repaired \cd", d:fix,s:"\c- HP!" );
	} else if(CheckInventory("Patcher_HudMaxHp")){
		//color = CR_CYAN;
		msg = strparam(s:"\cvFully Repaired");
	} else if(CheckInventory("Patcher_HudNoMoney")){
		//color = CR_ORANGE;
		msg = strparam(s:"\cgNot enough credits!");
	} else if (CheckInventory("Patcher_HudBuff")){
		//color = CR_GOLD;
		msg = strparam(s:"Upgraded to \cfLevel ", d:lvl, s:"!");
	} else if (CheckInventory("Patcher_HudBuffed")){
		//color = CR_GOLD;
		msg = strparam(s:"Max Level!");
	}
	if(msg != -1) f_CenterTipPatcher(msg);
	 										  
	SetHudSize(320, 240, 0);
	Setfont("confont");
	HudMessage(d:hp, s:"/", d:maxhp; HUDMSG_FADEOUT, PATCHER_HID_HEALTH, color, 320*0.5, 240*0.65, 0.2, 1.0);
	SetHudSize(0, 0, 0);
	SetHudSize(640, 480, 0);
	Setfont("confont");
	HudMessage(s:cost; HUDMSG_FADEOUT, PATCHER_HID_COST, CR_WHITE, 640*0.5, 480*0.70, 0.2, 1.0);
	SetHudSize(0, 0, 0);
}

script "Patcher_TurretScouter" (void){
	if(CheckInventory("Patcher_Script")) terminate;
	else GiveInventory("Patcher_Script", 1);

	int framecount = 0;
	While(CheckWeapon("Patcher") || CheckWeapon("Patcher_Advanced")){
		GiveInventory("Patcher_Libra", 1);
		if(framecount >= 7){
			TakeInventory("Patcher_HudHeal", 1);
			TakeInventory("Patcher_HudMaxHp", 1);
			TakeInventory("Patcher_HudNoMoney", 1);
			TakeInventory("Patcher_HudBuff", 1);
			TakeInventory("Patcher_HudBuffed", 1);
			framecount = 0;
		}
		delay(5);
		framecount++;
	}
	TakeInventory("Patcher_HudHeal", 1);
	TakeInventory("Patcher_HudMaxHp", 1);
	TakeInventory("Patcher_HudNoMoney", 1);
	TakeInventory("Patcher_HudBuff", 1);
	TakeInventory("Patcher_HudBuffed", 1);
	TakeInventory("Patcher_Script", 1);
}
script "Patcher_HandleHit" (int type, int arg1, int arg2) Event {
	//log(s:"arg2: ", s:arg2);
    if(type != GAMEEVENT_ACTOR_DAMAGED || !(
		strcmp(arg2, "PriPatcherDmg") == 0 ||
		strcmp(arg2, "AltPatcherDmg") == 0 ||
		strcmp(arg2, "IdlePatcherDmg") == 0 
	)) terminate;

	if(!IsATurret(ActivatorTID())){
		SetResultValue(0);
		terminate;
	}
		
	int atid, playnum;
	SetActivator(0, AAPTR_Damage_Source);
		playnum = PlayerNumber();
	if(playnum == -1) terminate;
	
	
	if(strcmp(arg2, "PriPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		If(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)){
			int price = GetUserVariable(0, PATCHER_USERVAR_FIX);
			int fix = (GetActorProperty(0, APROP_SPAWNHEALTH)*PATCHER_FIXINMULT) >> 16;
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			if(CheckWeapon("Patcher_Advanced")) price = price/2;
			SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

			if(p_Credits[playnum] < price){
				SetActivator(990+playnum);
				GiveInventory("Patcher_HudNoMoney", 1);
			}else{
				p_Credits[playnum] -= price;
				GiveInventory("Health", fix);
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				GiveInventory("Patcher_HudHeal", 1);
				Rank_GrantEXP(playnum, 1);
			}
		} else {
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			GiveInventory("Patcher_HudMaxHP", 1);
		}
		
	} else if(strcmp(arg2, "AltPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		int lvl = GetActorProperty(0, APROP_STAMINA);
		int price_upg = GetUserVariable(0, PATCHER_USERVAR_UPG);
		int rng = GetUserVariable(0, PATCHER_USERVAR_RANGE);
		int rng_up = GetUserVariable(0, PATCHER_USERVAR_RANGEUP);

		SetActivator(0, AAPTR_Damage_Source); // Back to the player
		if(CheckWeapon("Patcher_Advanced")) price_upg = price_upg/2;
		SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

		if(p_Credits[playnum] < price_upg){
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				GiveInventory("Patcher_HudNoMoney", 1);
		}else{
			if(lvl < BUILDING_MAXLVL){
				p_Credits[playnum] -= price_upg;
				
				SetActorProperty(0, APROP_STAMINA, lvl + 1);
				lvl = GetActorProperty(0, APROP_STAMINA);

				SetUserVariable(0, "user_range", rng + rng_up*(lvl));

				GiveInventory("Patcher_Upgrade_RESET", 1);
				GiveInventory(strparam(s:"Patcher_Upgrade_LV", d:lvl), 1);
				
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				Rank_GrantEXP(playnum, 5);
				log(s:"Upgraded to level: \ci", d:lvl);
				GiveInventory("Patcher_HudBuff", 1);
			}else{
				SetActivator(0, AAPTR_Damage_Source); // Back to the player
				GiveInventory("Patcher_HudBuffed", 1);
				log(s:"Level Maxed");
			}
		}
		log(s:"Turret Level: ", d:lvl);
	} else if(strcmp(arg2, "IdlePatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		Patcher_Display(playnum);
	}
	SetResultValue(0);
}

function str cond_str (int c){
	if(c) return strparam(s:"yes");
	return strparam(s:"no");
}

script "MinesGoBoom" (int tid) {
	SpawnProjectile(tid, "Grenade_Mine_GoBoom", 0,0,0,0,0);
	Thing_remove(tid);
}

script "SF_SpawnADrone" (void){
	int player = ActivatorTID();
	if(playerNumber() == -1){ 
		giveinventory("Inventory_SawDrone", 1);
		terminate;
	}
	int drone = UniqueTID(10000 + 100*playernumber());
	print(d:player, s:" ", d:drone);
	Spawn("sf_SawDrone", GetActorX(player), GetActorY(player), 50.0, drone, 0);
	SetActivator(drone);
	SetActorProperty(drone, APROP_MasterTID, player);
	//SetActorProperty(player, APROP_TracerTID, drone);
	//debugTidPointers(player);
	debugTidPointers(drone);
	//debugTidPointersStrings(player);
	debugTidPointersStrings(drone);
	
}

script "InfAmmoCheck" (void)
{
	setResultValue(GetCvar("sv_infiniteammo"));
}


script "SF_Checc" (void){
	debugTidPointers(ActivatorTID());
	debugTidPointersStrings(ActivatorTID());
	
}

function void debugTidPointers (int debug1){
log(d:debug1, s:") TAR:", d:GetActorProperty(debug1, APROP_TargetTID), s:" MAS:", d:GetActorProperty(debug1, APROP_MasterTID), s: " TRA:", d:GetActorProperty(debug1, APROP_TracerTID) );
}
function void debugTidPointersStrings (int debug2){
log(s:GetActorClass(debug2),
 s:") TAR:", s:GetActorClass(GetActorProperty(debug2, APROP_TargetTID)),
 s:" MAS:", s:GetActorClass(GetActorProperty(debug2, APROP_MasterTID)),
 s: " TRA:", s:GetActorClass(GetActorProperty(debug2, APROP_TracerTID)) );
}

Script "WhatClassIAM" (void){
 log(s:"I am: ", s:GetActorClass(0));
}

Script "DebugTID" (int arg, int value){
	printbold(s:GetActorClass(ActivatorTID()), s:"\c-, ARG: \cd", d:arg, s:"\c-, VALUE: \cd", d:value);
}

Script "GetUniqueTID" (void){
	SetResultValue(UniqueTID());
}

Script "Turret_LinkBase" (int basetid){
	int oldtid = ActivatorTID();
	int tmptid = UniqueTID();
	Thing_ChangeTID(0,tmptid);
	SetActivator(basetid);
	SetPointer(AAPTR_Target, tmptid);
	Thing_ChangeTID(basetid, 0);
	Thing_ChangeTID(tmptid, oldtid);
}

Script "Deploy_TID" (int tid, int type) { 
	// Assuming the players are the only ones spawning turrets.
	int play = tid - 990;
	int dtid;
	if(play >= 0 && play < 32){
		switch(type){
			case 0: dtid = 11000+play; break;
			case 1: dtid = 15000+play; break;
			case 2: dtid = 10000+play; break;
		}
		//log(s:"Owner: ", d:play, s:" TID:", d:dtid);
		SetResultValue(dtid);
		terminate;
	}else 
	SetResultValue(UniqueTID(15200));
}

Script "Deploy_Count" (int tid, int type){
	int play = tid - 990;
	int dtid;
	int limit;
	if(play >= 0 && play < 32){
		switch(type){
			case 1: dtid = 15000+play; limit = 20; break; // Turret
			case 2: dtid = 10000+play; limit = 8; break; // Drone
		}
		//printbold(s:"Owner: ", d:play, s:" Can i Place? :", d:ThingCount(0,dtid) < limit);
		SetResultValue(ThingCount(0,dtid) < limit);
		terminate;
	}else 
	SetResultValue(0);
}

Script "Turret_Count" (int tid) {
	int play = tid - 990;
	if(play >= 0 && play < 32){
		SetResultValue(ThingCount(0,15000+play));
		terminate;
	}
	SetResultValue(0);
	
}

Script "Turret_States" (int height){
	// The current state of the turret/dispenser!, Level and Health!
	int hp = GetActorProperty(0, APROP_HEALTH);
	int max_hp = GetActorProperty(0, APROP_SPAWNHEALTH);
	int lvl = GetActorProperty(0, APROP_STAMINA);
	int z = height<<16 + 4.0;
	int bid = UniqueTID(4000);
	int sid = UniqueTID(5000);
	spawn("Turret_HealthBar", getactorx(0), getactory(0), getactorz(0) + z, bid);
	spawn("Turret_LevelStars", getactorx(0), getactory(0), getactorz(0) + z*2, sid);
	//SetActorProperty(bid, APROP_RENDERSTYLE, STYLE_STENCIL);
	while (hp > 0){
		hp = GetActorProperty(0, APROP_HEALTH);
		// Health display
		setactorposition(bid, getactorx(0), getactory(0), getactorz(0) + z, 0);
		Bar_State(bid, hp, max_hp);
		//Bar_Color(bid, hp, max_hp); 
		// Level display
		lvl = GetActorProperty(0, APROP_STAMINA);
		setActorState(sid, Strparam(s:"LV", d:lvl));
		setactorposition(sid, getactorx(0), getactory(0), getactorz(0) + z, 0);
		delay(1);
	}
	setActorState(bid, "HP_0");
	setActorState(sid, "LV0");
	delay(35);
	Thing_Remove(bid);
	Thing_Remove(sid);
}

Script "Building_AggroLoop" (int tid) {
	delay(5);
	while(GetActorProperty(0, APROP_HEALTH) >= 1){
		//log(s:"Aggroing")
		TakeInventory("Building_GetRange", 0xFFFFFFFF);
		//
		if(CheckActorClass(0, "AmmoDispenser_Base") || CheckActorClass(0, "HealthDispenser_Base"))
			GiveInventory("Building_GetRange", 1024*3);
			
			// Dispensers are more prone to be attacked!
		else{
			GiveInventory("Building_GetRange", GetUserVariable(0, "user_range"));
		}
		GiveInventory("Building_HateRadius", 1);
		Log(s:"Give the HateRadius, radius:", d:CheckInventory("Building_GetRange"));
		delay(35*5);
	}
}

Script "Building_GetRange" (void) {
	SetResultValue(CheckInventory("Building_GetRange"));
}

function void Bar_State(int id, int var, int max_val){
	// Quick division function to show sprite.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int bar_state_num = bar_amount / 5;
	if(bar_state_num >= 20) bar_state_num = 20;
	setActorState(id, Strparam(s:"HP_", d:bar_state_num));
} 

function void Bar_Color(int id, int var, int max_val){
	//Colour your life.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int color = bar_amount / 20;
	if(color >= 5) color = 5;
	int res =  0xFFFFFF;
	switch(color){
		case 0:	res = 0xFF0000; break; // Red (20 %)
		case 1:	res = 0xFF8800; break; // Orange (40 %)
		case 2:	res = 0xFFFF00; break; // Yellow (60 %)
		case 3:	res = 0x00FF00; break; // Green (80 %)
		case 4:	res = 0xAAAAFF; break; // cyan (100 %)
		case 5:	res = 0xFFFFFF; break; // White (Overhealth)
	}
	SetActorProperty(id, APROP_STENCILCOLOR, res);
}


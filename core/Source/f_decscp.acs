///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// f_decscp.acs
// Scripts for the decorate tricks

// Put all your Decorate-Only scripts here, this script should be loaded in any level.


#library "f_decscp"


#include "zcommon.acs"
#include "acsutils.acs"
#import "f_intdb.acs"
#import "f_Rank.acs"

// ye, it's a shameless copy of dual wielding script from brutal doom.

// I have no shaem.
script "SecFireTrigger" ENTER
{
 int buttons;

 while (TRUE)
 {
   buttons = GetPlayerInput(-1, INPUT_BUTTONS);
   
	if (buttons & BT_ALTATTACK)	GiveInventory("Akimbo_Fire2", 1);
	else 						TakeInventory("Akimbo_Fire2", 1);
   delay(1);
 }
}


script "PriFireTrigger" ENTER
{
 int buttons;

 while (TRUE)
 {
   buttons = GetPlayerInput(-1, INPUT_BUTTONS);
   
	if (buttons & BT_ATTACK)	GiveInventory("Akimbo_Fire1", 1);
	else						TakeInventory("Akimbo_Fire1", 1);
   delay(1);
 }
}

function void AddAmmoCapacity (str ammo, int amount){
	SetAmmoCapacity(ammo, getAmmoCapacity(ammo) + amount);
}

script "PersonalBP_Expand" (void) {
	if(	getAmmoCapacity("Ammo_2BackpacksToken") == 3 ||
	 	getAmmoCapacity("Ammo_PersonalBPToken") == 2 ||
	  	!CheckInventory("P_Backpack")){
			// Dont expand if already expanded (having the backpack or not) or if we don't have the item.
			terminate; 
		}
	
	AddAmmoCapacity("Clip", 			100);
	AddAmmoCapacity("ClipPistol",		50);
	AddAmmoCapacity("Shell", 			30);
	AddAmmoCapacity("RocketAmmo", 		25);
	AddAmmoCapacity("HeavyBullets", 	100);
	AddAmmoCapacity("Dualshot_Ammo", 	50);
	AddAmmoCapacity("Cell", 			200);
	AddAmmoCapacity("GLauncher_Ammo", 	25);
	AddAmmoCapacity("Flinger_Ammo", 	50);
	AddAmmoCapacity("Gasoline",			50);

	AddAmmoCapacity("Ammo_PersonalBPToken", 1); // Set token.

	if(GetAmmoCapacity("Ammo_BackpackToken") == 2){
		AddAmmoCapacity("Ammo_2BackpacksToken", 1); // Set token.
	}
}

script "PersonalBP_Reset" (void) {
	SetAmmoCapacity("Ammo_PersonalBPToken", 1); // Reset token.
	SetAmmoCapacity("Ammo_2BackpacksToken", 1); // Reset token.

	SetAmmoCapacity("Clip", 			200);
	SetAmmoCapacity("ClipPistol",		50);
	SetAmmoCapacity("Shell", 			60);
	SetAmmoCapacity("RocketAmmo", 		50);
	SetAmmoCapacity("HeavyBullets", 	300);
	SetAmmoCapacity("Dualshot_Ammo",	200);
	SetAmmoCapacity("Cell", 			300);
	SetAmmoCapacity("GLauncher_Ammo", 	15);
	SetAmmoCapacity("Flinger_Ammo", 	50);
	SetAmmoCapacity("Gasoline", 		200);
}

Script "Player_GetRank" (void){
	SetResultValue(p_Rank[playernumber()] + 1);
}

script "Repeater_HeatDamage" (void)
{
	int bonusDmg = (CheckInventory("Rep_Heat") / 20);
	SetResultValue(bonusDmg);
}

script "Repeater_AimX" (void)
{
	int spread = (CheckInventory("Rep_Heat") / 25);
	SetResultValue(spread + 7);
}

script "Repeater_AimY" (void)
{
	int spread = (CheckInventory("Rep_Heat") / 25);
	SetResultValue(spread + 3);
}

script "RepeaterX2_AimX" (void)
{
	int spread = (CheckInventory("Rep_Heat") / 25);
	SetResultValue(spread + 5);
}

script "RepeaterX2_AimY" (void)
{
	int spread = (CheckInventory("Rep_Heat") / 25);
	SetResultValue(spread + 1);
}

script "RepGauss_AimX" (void)
{
	int spread = (CheckInventory("Rep_Heat") / 25);
	SetResultValue(spread + 5);
}

script "RepGauss_AimY" (void)
{
	int spread = (CheckInventory("Rep_Heat") / 25);
	SetResultValue(spread + 1);
}

script "PlayerId" (void){
	SetActivatorToTarget(0);
	SetResultValue(ActivatorTID());
}

function bool IsATurret(int tid){
	str turrets[7] ={
		"TurretBullet_HEAD",
		"TurretShotgun_Head",
		"TurretChaingun_Head",
		"TurretRocket_Head",
		"TurretPlasma_Head",
		"TurretBase_Head",
		"TurretBFG_Head"
	};

	for(int i = 0; i < 7; i ++){
		if(CheckActorClass(tid, turrets[i])) return true;
	}
		
	return false;
}

#libdefine PATCHER_HID_HEALTH 2700
#libdefine PATCHER_HID_COST	  2701
#libdefine PATCHER_HID_MSG 	  2702
#libdefine PATCHER_FIXINMULT 0.10
#libdefine PATCHER_PRICEMULT 0.07
#libdefine PATCHER_BUFFMULT 0.20

function void Patcher_Display(int playnum){
	int hp = GetActorProperty(0, APROP_HEALTH);
	int maxhp = GetActorProperty(0, APROP_SPAWNHEALTH);
	int price = (maxhp * PATCHER_PRICEMULT) >> 16;
	int buff_price = (maxhp * PATCHER_BUFFMULT) >> 16;

	int fix = (maxhp * PATCHER_FIXINMULT) >> 16;
	int color = CR_WHITE;
	str msg = 0;
	int cost = strparam(s:"Repair Cost: ", d:price, s:" credits\nBuffing Cost: ", d:buff_price, s:" credits");
	if(CheckInventory("PowerPatcher_BuffDamage")) {
		color = CR_GOLD;
		msg = strparam(s:"DMG & RES UP (",d:(GetActorPowerupTics(0, "PowerPatcher_BuffDamage") / 35),s:")");
	}
	
	SetActivator(990+playnum);
	if(CheckWeapon("Patcher_Advanced")) price = price/2;
	if(CheckInventory("Patcher_HudHeal")){
		color = CR_GREEN;
		msg = strparam(s:"Repaired \cd", d:fix,s:"\c- HP" );
	} else if(CheckInventory("Patcher_HudMaxHp")){
		color = CR_CYAN;
		msg = strparam(s:"Fully Repaired");
	} else if(CheckInventory("Patcher_HudNoMoney")){
		color = CR_ORANGE;
		msg = strparam(s:"Not enough credits!");
	} else if (CheckInventory("Patcher_HudBuff")){
		color = CR_GOLD;
		msg = strparam(s:"Buffed!");
	} else if (CheckInventory("Patcher_HudBuffed")){
		color = CR_GOLD;
		msg = strparam(s:"Already buffed!");
	}
	 										  
	SetHudSize(320, 240, 0);
	Setfont("confont");
	HudMessage(d:hp, s:"/", d:maxhp; HUDMSG_FADEOUT, PATCHER_HID_HEALTH, color, 320*0.5, 240*0.65, 0.2, 1.0);
	SetHudSize(0, 0, 0);
	SetHudSize(640, 480, 0);
	Setfont("confont");
	HudMessage(s:msg; HUDMSG_FADEOUT, PATCHER_HID_MSG, CR_WHITE, 640*0.5, 480*0.55, 0.2, 1.0);
	HudMessage(s:cost; HUDMSG_FADEOUT, PATCHER_HID_COST, CR_WHITE, 640*0.5, 480*0.70, 0.2, 1.0);
	SetHudSize(0, 0, 0);
}

script "Patcher_TurretScouter" (void){
	if(CheckInventory("Patcher_Script")) terminate;
	else GiveInventory("Patcher_Script", 1);

	int framecount = 0;
	While(CheckWeapon("Patcher") || CheckWeapon("Patcher_Advanced")){
		GiveInventory("Patcher_Libra", 1);
		if(framecount >= 7){
			TakeInventory("Patcher_HudHeal", 1);
			TakeInventory("Patcher_HudMaxHp", 1);
			TakeInventory("Patcher_HudNoMoney", 1);
			TakeInventory("Patcher_HudBuff", 1);
			TakeInventory("Patcher_HudBuffed", 1);
			framecount = 0;
		}
		delay(5);
		framecount++;
	}
	TakeInventory("Patcher_HudHeal", 1);
	TakeInventory("Patcher_HudMaxHp", 1);
	TakeInventory("Patcher_HudNoMoney", 1);
	TakeInventory("Patcher_HudBuff", 1);
	TakeInventory("Patcher_HudBuffed", 1);
	TakeInventory("Patcher_Script", 1);
}
script "Patcher_HandleHit" (int type, int arg1, int arg2) Event {
	
    if(type != GAMEEVENT_ACTOR_DAMAGED || !IsATurret(ActivatorTID())) terminate;
	int atid, playnum;
	SetActivator(0, AAPTR_Damage_Source);
		playnum = PlayerNumber();
	if(playnum == -1) terminate;
	
	
	if(strcmp(arg2, "PriPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		If(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)){
			int price = (GetActorProperty(0, APROP_SPAWNHEALTH)*PATCHER_PRICEMULT) >> 16;
			int fix = (GetActorProperty(0, APROP_SPAWNHEALTH)*PATCHER_FIXINMULT) >> 16;
			SetActivator(0, AAPTR_Damage_Source); // Back to the player
			if(CheckWeapon("Patcher_Advanced")) price = price/2;
			SetActivator(0, AAPTR_Damage_Target); // Back to the turret.

			if(p_Credits[playnum] < price){
				SetActivator(990+playnum);
				GiveInventory("Patcher_HudNoMoney", 1);
			}else{
				if(random(0, 100) < 15) Rank_GrantEXP(playnum, 1);
				p_Credits[playnum] -= price;
				if(CheckWeapon("Patcher_Advanced")) price = price/2;
				GiveInventory("Health", fix);
				SetActivator(990+playnum);
				GiveInventory("Patcher_HudHeal", 1);
			}
		} else {
			SetActivator(990+playnum);
			GiveInventory("Patcher_HudMaxHP", 1);
		}
		
	}
	if(strcmp(arg2, "AltPatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);

		If(!CheckInventory("PowerPatcher_BuffDamage")){
			int price_buff = (GetActorProperty(0, APROP_SPAWNHEALTH)*PATCHER_BUFFMULT) >> 16;
			if(p_Credits[playnum] < price_buff){
				SetActivator(990+playnum);
				GiveInventory("Patcher_HudNoMoney", 1);
			}else{
				if(random(0, 100) < 15) Rank_GrantEXP(playnum, 1);
				p_Credits[playnum] -= price_buff;
				GiveInventory("Patcher_Buffer", 1);
				
				SetActivator(990+playnum);
				if(CheckWeapon("Patcher_Advanced")){
					SetActivator(0, AAPTR_Damage_Target);
					GiveInventory("Patcher_AdvBuffer", 1);
					SetActivator(990+playnum);
				}
				GiveInventory("Patcher_HudBuff", 1);
			}
		} else {
			
			SetActivator(990+playnum);
			GiveInventory("Patcher_HudBuffed", 1);
		}
	}
	if(strcmp(arg2, "IdlePatcherDmg") == 0){
		SetActivator(0, AAPTR_Damage_Target);
		Patcher_Display(playnum);
	}
	setResultValue(0);

}

function str cond_str (int c){
	if(c) return strparam(s:"yes");
	return strparam(s:"no");
}

script "MinesGoBoom" (int tid) {
	SpawnProjectile(tid, "Grenade_Mine_GoBoom", 0,0,0,0,0);
	Thing_remove(tid);
}

script "SF_SpawnADrone" (void){
	int player = ActivatorTID();
	if(playerNumber() == -1){ 
		giveinventory("Inventory_SawDrone", 1);
		terminate;
	}
	int drone = UniqueTID(10000 + 100*playernumber());
	print(d:player, s:" ", d:drone);
	Spawn("sf_SawDrone", GetActorX(player), GetActorY(player), 50.0, drone, 0);
	SetActivator(drone);
	SetActorProperty(drone, APROP_MasterTID, player);
	//SetActorProperty(player, APROP_TracerTID, drone);
	//debugTidPointers(player);
	debugTidPointers(drone);
	//debugTidPointersStrings(player);
	debugTidPointersStrings(drone);
	
}

script "InfAmmoCheck" (void)
{
	setResultValue(GetCvar("sv_infiniteammo"));
}


script "SF_Checc" (void){
	debugTidPointers(ActivatorTID());
	debugTidPointersStrings(ActivatorTID());
	
}

function void debugTidPointers (int debug1){
log(d:debug1, s:") TAR:", d:GetActorProperty(debug1, APROP_TargetTID), s:" MAS:", d:GetActorProperty(debug1, APROP_MasterTID), s: " TRA:", d:GetActorProperty(debug1, APROP_TracerTID) );
}
function void debugTidPointersStrings (int debug2){
log(s:GetActorClass(debug2),
 s:") TAR:", s:GetActorClass(GetActorProperty(debug2, APROP_TargetTID)),
 s:" MAS:", s:GetActorClass(GetActorProperty(debug2, APROP_MasterTID)),
 s: " TRA:", s:GetActorClass(GetActorProperty(debug2, APROP_TracerTID)) );
}

Script "DebugTID" (int arg, int value){
	printbold(s:GetActorClass(ActivatorTID()), s:"\c-, ARG: \cd", d:arg, s:"\c-, VALUE: \cd", d:value);
}

Script "GetUniqueTID" (void){
	SetResultValue(UniqueTID());
}

Script "Turret_LinkBase" (int basetid){
	int oldtid = ActivatorTID();
	int tmptid = UniqueTID();
	Thing_ChangeTID(0,tmptid);
	SetActivator(basetid);
	SetPointer(AAPTR_Target, tmptid);
	Thing_ChangeTID(basetid, 0);
	Thing_ChangeTID(tmptid, oldtid);
}

Script "Deploy_TID" (int tid, int type) { 
	// Assuming the players are the only ones spawning turrets.
	int play = tid - 990;
	int dtid;
	if(play >= 0 && play < 32){
		switch(type){
			case 0: dtid = 11000+play; break;
			case 1: dtid = 15000+play; break;
			case 2: dtid = 10000+play; break;
		}
		//log(s:"Owner: ", d:play, s:" TID:", d:dtid);
		SetResultValue(dtid);
		terminate;
	}else 
	SetResultValue(UniqueTID(15200));
}

Script "Deploy_Count" (int tid, int type){
	int play = tid - 990;
	int dtid;
	int limit;
	if(play >= 0 && play < 32){
		switch(type){
			case 1: dtid = 15000+play; limit = 20; break; // Turret
			case 2: dtid = 10000+play; limit = 8; break; // Drone
		}
		//printbold(s:"Owner: ", d:play, s:" Can i Place? :", d:ThingCount(0,dtid) < limit);
		SetResultValue(ThingCount(0,dtid) < limit);
		terminate;
	}else 
	SetResultValue(0);
}

Script "Turret_Count" (int tid) {
	int play = tid - 990;
	if(play >= 0 && play < 32){
		SetResultValue(ThingCount(0,15000+play));
		terminate;
	}
	SetResultValue(0);
	
}

Script "Turret_HPBar" (int height){
	// This is a Health bar for the turrets and dispensers!
	int hp = GetActorProperty(0, APROP_HEALTH);
	int max_hp = GetActorProperty(0, APROP_SPAWNHEALTH);
	int z = height<<16 + 4.0;
	int id = UniqueTID(4000);
	spawn("Turret_HealthBar", getactorx(0), getactory(0), getactorz(0) + z, id);
	while (hp > 0){
		hp = GetActorProperty(0, APROP_HEALTH);
		
		setactorposition(id, getactorx(0), getactory(0), getactorz(0) + z, 0);
		Bar_State(id, hp, max_hp);
		//Bar_Color(id, hp, max_hp); // Damn you zandronum!
		delay(1);
	}
	setActorState(id, "HP_0");
	delay(70);
	Thing_Remove(id);
}

function void Bar_State(int id, int var, int max_val){
	// Quick division function to show sprite.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int bar_state_num = bar_amount / 5;
	if(bar_state_num >= 20) bar_state_num = 20;
	setActorState(id, Strparam(s:"HP_", d:bar_state_num));
} 

function void Bar_Color(int id, int var, int max_val){
	//Colour your life.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int color = bar_amount / 20;
	if(color >= 5) color = 5;
	int res =  0xFFFFFF;
	switch(color){
		case 0:	res = 0xFF0000; break; // Red (20 %)
		case 1:	res = 0xFF8800; break; // Orange (40 %)
		case 2:	res = 0xFFFF00; break; // Yellow (60 %)
		case 3:	res = 0x00FF00; break; // Green (80 %)
		case 4:	res = 0xAAAAFF; break; // cyan (100 %)
		case 5:	res = 0xFFFFFF; break; // White (Overhealth)
	}
	SetActorProperty(id, APROP_STENCILCOLOR, res);
}


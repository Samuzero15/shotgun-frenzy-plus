///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// f_decscp.acs
// Scripts for the decorate tricks

// Put all your Decorate-Only scripts here, this script should be loaded in any level.


#library "f_decscp"


#include "zcommon.acs"
#include "acsutils.acs"
#import "fl_techs.acs"
#import "f_intdb.acs"
#import "f_Rank.acs"
#import "f_tip.acs"
#import "f_stokp.acs"
#import "fl_WDir.acs"
#include "samu_tools.acs"
#include "wep_patcher.acs"
#include "altstates.acs"
//#include "announcer.acs"

// ye, it's a shameless copy of dual wielding script from brutal doom.

// I have no shaem.
script "Weapon_ItemInputs" ENTER
{
 int buttons;

 while (TRUE)
 {
   buttons = GetPlayerInput(-1, INPUT_BUTTONS);
   
	if (buttons & BT_ALTATTACK)	GiveInventory("Fire_Alt", 1);
	else 						TakeInventory("Fire_Alt", 1);

	if (buttons & BT_ATTACK)	GiveInventory("Fire_Pri", 1);
	else						TakeInventory("Fire_Pri", 1);

	if (buttons & BT_USE)		GiveInventory("Input_Use", 1);
	else						TakeInventory("Input_Use", 1);

	if (buttons & BT_RELOAD)	GiveInventory("Input_Reload", 1);
	else						TakeInventory("Input_Reload", 1);

	TakeInventory("Fire_JustPressed", 1);
	if(CheckInventory("Fire_Pri") && KeyToggled(BT_ATTACK)){
		GiveInventory("Fire_JustPressed", 1);
	}
	//log(s:"Fire Just pressed: ", d:CheckInventory("Fire_JustPressed"));

   delay(1);
 }
}

Script "Weapon_ItemTics" (void){
	SetResultValue(CheckInventory("WeaponToken_Tics"));
}

script "ParticleCheck" (int type) ClientSide{
	int cvar = 0;
	int player_console = consolePlayerNumber();
	switch(type){
		case 0: // Blood
			cvar = "sfp_part_gore";
		break;
		case 1: // Money splash
			cvar = "sfp_part_moneysplash";
		break;
		case 2: // Lightbars
			cvar = "sfp_part_lightbars";
		break;
		case 3: // Blur
			cvar = "sfp_part_blur";
		break;
		case 4: // Casings
			cvar = "sfp_part_casings";
		break;
		case 5: // Smoke
			cvar = "sfp_part_smoke";
		break;
		case 6: // Junk
			cvar = "sfp_part_junk";
		break;
		case 7: // Sparks
			cvar = "sfp_part_sparks";
		break;
	}
	//PrintBold(s:"Particles: ", d:GetUserCVar(player_console, cvar));
	if(!GetUserCVar(player_console, cvar)) {SetActorState(0, "NoSpawn");}	
}

Script "LightBarsSpawner" (int radius, int color) ClientSide{
	str particle;
	switch(color){
		case 0: particle = "streak_red";	break;
		case 1: particle = "streak_blue";	break;
		case 2: particle = "streak_green";	break;
		case 3: particle = "streak_yellow";	break;
		case 4: particle = "streak_violet"; break;
	}

	int count = 3, x, y, z, a;
	int grade_add = (1.0 / 16);
	int tid;
	int invert = random (0,1);
	for(int i = 0; i < 16 && GetActorProperty(0, APROP_HEALTH) >= 1; i ++){
		x = GetActorX(0); y = GetActorY(0); z = GetActorZ(0); a = GetActorAngle(0); tid = UniqueTID();
		if(invert){
			SpawnForced(particle, x + cos(a-grade_add*i)*radius, y + sin(a-grade_add*i)*radius, z,tid);
			SpawnForced(particle, x - cos(a-grade_add*i)*radius, y - sin(a-grade_add*i)*radius, z,tid);
		}
		else {
			SpawnForced(particle, x + cos(a+grade_add*i)*radius, y + sin(a+grade_add*i)*radius, z,tid);
			SpawnForced(particle, x - cos(a+grade_add*i)*radius, y - sin(a+grade_add*i)*radius, z,tid);
		}
		SetActorVelocity(tid, 0, 0, 3.0+random(-1.5, 1.5), 0, 0);
		delay(random(2,5));
	}
	Thing_Remove(tid);
}

Script "HellTriggerPower_AmmoRegeneration" (int upgraded){
	TakeInventory("Inv_Power_AmmoRegeneration", 99999999);
	int lessdelay = 0, ragerune = CheckInventory("RuneDoubleFiringSpeed");
	if(upgraded){
		GiveInventory("Inv_PowerGiver_HellTrigger_Infinity_2", 1);
		GiveInventory("Inv_PowerGiver_HellTrigger_FastFire_2", 1);
		GiveInventory("Inv_PowerGiver_HellTrigger_AmmoRegeneration_2", 1);
		lessdelay = 15;
	}else {
		GiveInventory("Inv_PowerGiver_HellTrigger_FastFire", 1);
		GiveInventory("Inv_PowerGiver_HellTrigger_Infinity", 1);
		GiveInventory("Inv_PowerGiver_HellTrigger_AmmoRegeneration", 1);
	}
	int tics = 0;
	while(PlayerHealth() > 0 && CheckInventory("Inv_Power_AmmoRegeneration")){
		if(tics % (35-lessdelay) == 0) 
			Stock_FillAmmo(0);
		tics ++;
		delay(1);
	}
	
	if(ragerune){ // Helltrigger overrides rage rune, recover rage rune if equipped.
		TakeInventory("RuneDoubleFiringSpeed", 1);
		delay(1);
		GiveInventory("RageRune", 1);
	}
}

Script "SFPlus_Announcer_SayTime" (int string, int time, int urgent){
	AnnouncerSound(string, 0);
	if(time == -1){
		terminate;
	}
	delay(35 + 20);
	str sound = "";
	switch(time) {
		case 10:
			sound = "time/10Secs";
			break;
		case 30:
			sound = "time/30Secs";
			break;
		case 60:
			sound = "time/60Secs";
			break;
		case 120:
			sound = "time/2Mins";
			break;
		case 300:
			sound = "time/5Mins";
			break;
		case 600:
			sound = "time/10Mins";
			break;
	}
	if(urgent == 1) sound = strparam(s:sound, s:"!");

	AnnouncerSound(sound, 0);
}

Script "Player_GetRank" (void){
	SetResultValue(p_Rank[playernumber()] + 1);
}

Script "Player_IsDed" (void) {
	setResultValue(PlayerHealth() <= 0);
}

Script "MagneticPickup_TargetIsPlayer" (void) {
	SetActivatorToTarget(0);
	SetResultValue(ActorIsPlayer(0));
}

Script "Invul_Check" (void) {
	SetResultValue(CheckInventory("PowerInvulnerable") || 
		CheckInventory("PlayUp_Spawnshield_Power") || 
		CheckInventory("CorePulse_Heal_Invul") || 
		CheckInventory("DefenseRune_ShieldInvul") || 
		CheckInventory("PlayUp_Prometeo_Power_Invul"));
}

Script "Pickup_Fade" (int stay_seconds) {
	str class = GetActorClass(0);
	int last_seconds = 5;
	if(stay_seconds < last_seconds) stay_seconds = last_seconds;
	while (stay_seconds > 0){
		if(!(CheckActorClass(0, class) && CheckFlag(0, "SPECIAL")))	terminate;
		if(stay_seconds == last_seconds) ACS_NamedExecuteAlways("Pickup_FadeGFX", 0, last_seconds);
		stay_seconds--;
		delay(35);
	}
	Thing_Remove(0);
}

Script "Pickup_FadeGFX" (int last_seconds) ClientSide {
	int fade_tics = 0;
	while(fade_tics <= last_seconds*35){
		fade_tics += 4;
		SetActorProperty(0, APROP_RenderStyle, STYLE_Normal);
		delay(4);
		fade_tics += 4;
		SetActorProperty(0, APROP_Alpha, 0.5);
		SetActorProperty(0, APROP_RenderStyle, STYLE_Translucent);
		delay(4);
	}
}

Script "Armor_TemperanceRune" (int armortype){
	/*
	log(s:"Temperance rune? ", d:CheckInventory("RuneTemperance"));
	log(s:"Armor type: ", d:armortype);
	log(s:"Current Armor: ", d:CheckInventory("BasicArmor"));
	log(s:"Max Armor + temperance: ", d:((100*(armortype+1))+100));
	*/
	if(CheckInventory("RuneTemperance") && CheckInventory("BasicArmor") < ((100*(armortype+1))+100)){
		// Simple, give some 100 AP extra for the current rune.
		GiveInventory("ArmorShard_One", 100);
	}
}

Script "Armor_CompleteTo" (int amount){
	if(!CheckInventory("BasicArmor")){
		TakeInventory("Flag_RedArmor", 1); 
		TakeInventory("Flag_BlueArmor", 1);
	}
	int armor_points = CheckInventory("BasicArmor");
	if(armor_points < amount){
		int diff = amount - armor_points;
		GiveInventory("ArmorShard_One", diff);
	}
}

Script "Armor_FullCheck" (int armortype){
	SetResultValue(
		CheckInventory("BasicArmor") >= (100*(armortype+1))+(100*CheckInventory("RuneTemperance"))
		&& stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "ArmorShard") != 0);
}

Script "Armor_ArmorShardsOnly" (void){
	SetResultValue(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "ArmorShard") == 0);
}

Script "Armor_ReplaceShardsWithArmor" (int armortype){
	// When picked a lot of armor shards, and pick any type of armor. 
	// Replace the shards with the armor you picked up.
	// The leftovers will be also added to your armor.

	if(!CheckInventory("BasicArmor")){
		TakeInventory("Flag_RedArmor", 1); 
		TakeInventory("Flag_BlueArmor", 1);
	}
	
	if(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "ArmorShard") == 0){
		int armor_points = CheckInventory("BasicArmor");
		TakeInventory("BasicArmor", 9999999);

		switch(armortype){
			case 0:
				GiveInventory("SteelPlatingArmor", 1);
			break;
			case 1:
				GiveInventory("MegasphereArmor", 1);
			break;
			case 2:
				GiveInventory("TitaniumArmor", 1);
			break;
		}
		
		int armor_points_now = CheckInventory("BasicArmor");
		if(armor_points > armor_points_now){
			int diff = armor_points - armor_points_now;
			GiveInventory("ArmorShard_One", diff);
		}
	}
	ACS_NamedExecuteAlways("Armor_TemperanceRune", 0, armortype);
}

Script "UpgradeCard_PickMe" (void)
{
	sf_AddUpPoints(1, PlayerNumber());
}

Script "Mineral_PickMe" (int amount)
{
	sf_AddCredits(amount, PlayerNumber());
}

Script "Supplier_GrantExp" (void)
{
	Rank_GrantEXP(PlayerNumber(), 1);
}

Script "Supplier_SpawnAmmo" (int expanded) {
	int x = GetActorX(0);
	int y = GetActorY(0);
	int z = GetActorFloorZ(0);
	int range = expanded ? 32.0 : 16.0;

	for (int i = 0; i < fp_AmmoDefStack; i++) {
		str ammo_name = fp_AmmoList[i][FP_AMMODEF_NAME];
		str ammo_supply_spawn = fp_AmmoList[i][FP_AMMODEF_SUPPLYSPAWN];
		if(ammo_supply_spawn == -1) terminate; // Ammo is not given by supplier.
		str ammo_actor = ammo_supply_spawn == 0 ? ammo_name : ammo_supply_spawn;
		SpawnForced(ammo_actor, x + random(-range, range), y + random(-range, range), z);
		if(expanded) {
			SpawnForced(ammo_actor, x + random(-range, range), y + random(-range, range), z);
		}
	}
}


Script "AltState_Particle_Stop" (void) {
	SetActivatorToTarget(0);
	SetResultValue(GetActorProperty(0, APROP_HEALTH) < 1);
}

Script "Particle_Get" (int which) {
	SetActivatorToTarget(0);
	int res;
	switch(which){
		case 1: res = GetActorProperty(0, APROP_RADIUS)>>16; break;
		case 2: res = GetActorProperty(0, APROP_HEIGHT)>>16; break;
		default: res = 0;
	}
	setResultValue(res);
}

Script "AltState_Particle_Activate" (void) {
	Thing_Activate(0);
}

#libdefine REPEATER_HEATAIM 0
#libdefine REPEATER_BONUSDMG  1
#libdefine REPEATER_FIRECHANCE 2

script "Repeater_HeatProp" (int prop, int base){
	int heat = CheckInventory("Rep_Heat");
	switch(prop){
		case REPEATER_HEATAIM:
			setResultValue(heat/25 + base);
		break;
		case REPEATER_BONUSDMG:
			if (base <= 5) base = 5; 
			setResultValue((heat/10)*2 + base);
		break;
		case REPEATER_FIRECHANCE:
			setResultValue(heat/40 + base);
		break;
	}
}

script "PlayerId" (void){
	SetActivatorToTarget(0);
	SetResultValue(ActivatorTID());
}

#define PATCHER_UPGRADEABLES 11

#define PATCHER_TURRETS 9
#define PATCHER_DISPENSERS 2

function bool IsAUpgradeableBuilding(int tid){
	str turrets[PATCHER_UPGRADEABLES] ={
		"TurretBullet_HEAD",
		"TurretShotgun_Head",
		"TurretChaingun_Head",
		"TurretRocket_Head",
		"TurretPlasma_Head",
		"TurretFlame_HEAD",
		"TurretTesla_Head",
		"TurretBase_Head",
		"TurretBFG_Head",
		"HealthDispenser_Base",
		"AmmoDispenser_Base"
	};

		//log(s:GetActorClass(tid));
	for(int i = 0; i < PATCHER_UPGRADEABLES; i ++){
		if(CheckActorClass(tid, turrets[i])){
			 return true;
		}
	}
		
	return false;
}

function int GetBuildingType(int tid){
	// 1= Turret, 2= Dispenser, 0 = None
	str turrets[PATCHER_TURRETS] ={
		"TurretBullet_HEAD",
		"TurretShotgun_Head",
		"TurretChaingun_Head",
		"TurretRocket_Head",
		"TurretPlasma_Head",
		"TurretFlame_HEAD",
		"TurretTesla_Head",
		"TurretBase_Head",
		"TurretBFG_Head",
	};
	str dispensers[PATCHER_DISPENSERS] = {
		"HealthDispenser_Base",
		"AmmoDispenser_Base"
	};
	int i = 0;
		//log(s:GetActorClass(tid));
	for(i = 0; i < PATCHER_TURRETS; i ++){
		if(CheckActorClass(tid, turrets[i])) return 1;
	}
	for(i = 0; i < PATCHER_DISPENSERS; i ++){
		if(CheckActorClass(tid, dispensers[i])){
			 return 2;
		}
	}
		
	return 0;
}

function str GetBuildingTypeName(int type){
	int str_langs[3] = {
		"None",
		"FP_BUILDTYPE_TURRET",
		"FP_BUILDTYPE_DISPENSER"
	};

	return strparam(l:str_langs[type]);
}

script "IAmATurret" (void){
	SetResultValue(IsAUpgradeableBuilding(ActivatorTID()));
}

Script "Cheat_InstaDeploying" (void) {
	SetResultValue(GetCvar("sfp_instantdeploying"));
}

script "MinesGoBoom" (int tid) {
	SpawnProjectile(tid, "Grenade_Mine_GoBoom", 0,0,0,0,0);
	Thing_remove(tid);
}

script "SF_SpawnADrone" (void){
	int player = ActivatorTID();
	if(playerNumber() == -1){ 
		giveinventory("Inventory_SawDrone", 1);
		terminate;
	}
	int drone = UniqueTID(10000 + 100*playernumber());
	print(d:player, s:" ", d:drone);
	Spawn("sf_SawDrone", GetActorX(player), GetActorY(player), 50.0, drone, 0);
	SetActivator(drone);
	SetActorProperty(drone, APROP_MasterTID, player);
	//SetActorProperty(player, APROP_TracerTID, drone);
	//debugTidPointers(player);
	debugTidPointers(drone);
	//debugTidPointersStrings(player);
	debugTidPointersStrings(drone);
	
}

script "InfAmmoCheck" (void)
{
	setResultValue(GetCvar("sv_infiniteammo") || CheckInventory("PowerInfiniteAmmo") || CheckInventory("Inv_Power_Infinity") || CheckInventory("Ammunition_InfiniteAmmo"));
}


script "SF_Checc" (void){
	debugTidPointers(ActivatorTID());
	debugTidPointersStrings(ActivatorTID());
	
}

function void debugTidPointers (int debug1){
log(d:debug1, s:") TAR:", d:GetActorProperty(debug1, APROP_TargetTID), s:" MAS:", d:GetActorProperty(debug1, APROP_MasterTID), s: " TRA:", d:GetActorProperty(debug1, APROP_TracerTID) );
}
function void debugTidPointersStrings (int debug2){
log(s:GetActorClass(debug2),
 s:") TAR:", s:GetActorClass(GetActorProperty(debug2, APROP_TargetTID)),
 s:" MAS:", s:GetActorClass(GetActorProperty(debug2, APROP_MasterTID)),
 s: " TRA:", s:GetActorClass(GetActorProperty(debug2, APROP_TracerTID)) );
}

Script "WhatClassIAM" (void){
 log(s:"I am: ", s:GetActorClass(0));
}

Script "DebugTID" (int arg, int value){
	printbold(s:GetActorClass(ActivatorTID()), s:"\c-, ARG: \cd", d:arg, s:"\c-, VALUE: \cd", d:value);
}

Script "GetUniqueTID" (void){
	SetResultValue(UniqueTID());
}

Script "Marker_Script" (void) ClientSide {
	int tid = UniqueTiD(), x = GetActorX(0), y = GetActorY(0), z = GetActorZ(0);
	SpawnForced("Marker_enemy", x, y, z, tid);
	while(GetActorProperty(0, APROP_Health) > 0){
		if(x != GetActorX(0) || y != GetActorY(0)){
			x = GetActorX(0); y = GetActorY(0); z = GetActorZ(0);
			setactorposition(tid, x, y, z, 0);
		}
		delay(3);
	}
	Thing_Remove(tid);
}

Script "Turret_LinkBase" (int basetid){
	int oldtid = ActivatorTID();
	int tmptid = UniqueTID();
	Thing_ChangeTID(0,tmptid);
	SetActivator(basetid);
	SetPointer(AAPTR_Target, tmptid);
	Thing_ChangeTID(basetid, 0);
	Thing_ChangeTID(tmptid, oldtid);
}

Script "Deploy_TID" (int tid, int type) { 
	// Assuming the players are the only ones spawning turrets.
	int play = tid - 990;
	int dtid;
	
	if(play >= 0 && play < 32){
		switch(type){
			case 0: dtid = 11000+play; break;
			case 1: dtid = 15000+play; break;
			case 2: dtid = 10000+play; break;
		}
		//log(s:"Owner: ", d:play, s:" TID:", d:dtid);
		SetResultValue(dtid);
		terminate;
	}else {
		//log(s:"No owner found.");
		SetResultValue(UniqueTID(15200));
	}
	
}

Script "Deploy_Count" (int tid, int type){
	int play = tid - 990;
	int dtid;
	int limit;
	if(play >= 0 && play < 32){
		switch(type){
			case 1: dtid = 15000+play; limit = 20; break; // Turret
			case 2: dtid = 10000+play; limit = 8; break; // Drone
		}
		//printbold(s:"Owner: ", d:play, s:" Can i Place? :", d:ThingCount(0,dtid) < limit);
		SetResultValue(ThingCount(0,dtid) < limit);
		terminate;
	}else 
	SetResultValue(0);
}

Script "Turret_Count" (int tid) {
	int play = tid - 990;
	if(play >= 0 && play < 32){
		SetResultValue(ThingCount(0,15000+play));
		terminate;
	}
	SetResultValue(0);
	
}

#define TURRETSTATEHID_HP 	9000
#define TURRETSTATEHID_LVL 12000
#define TURRETSTATE_TID 70001
#define TURRETSTATE_MAX 200
#define TURRETSTATE_PROPS 6

int turretStates_lastIndex = 0;
int turretStates_data[TURRETSTATE_MAX][TURRETSTATE_PROPS]; // HP_HID, HP, MAXHP, LVL_HID, LVL

Script "TurretState_SyncLabels" open {
	int syncindex = 0;
	int basetid = TURRETSTATE_TID;
	SyncVariable(basetid + syncindex, turretStates_lastIndex); syncindex++;
	for(int i = 0; i < turretStates_lastIndex; i++){
		for(int j = 0; j < TURRETSTATE_PROPS; j++){
			SyncVariable(basetid + syncindex, turretStates_data[i][j]);
			syncindex++;
		}
	}
	delay(1);
	restart;
}

script "TurretState_ShowLabels" OPEN Clientside {
	if(CheckActorInventory(990+ConsolePlayerNumber(),"SamuTInv_UsingTerminal")){
		delay(1);
		restart;
	}
	
	for(int id = 0; id < GetSyncVar(TURRETSTATE_TID); id++){
		int hp_hid = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*id);
		int hp = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*id + 1);
		int lvl_hid = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*id + 3);
		
		if(hp <= 0 || !GetUserCVar(ConsolePlayerNumber(), "sfp_buildstats")) {
			ClearHudMessageBold(hp_hid);
			ClearHudMessageBold(lvl_hid);
			continue;
		}
		//log(s:"TurretState_ShowLabels: id=", d:id, s:" hp_hid=", d:hp_hid, s:" hp=", d:hp, s:" lvl_hid=", d:lvl_hid);
		TurretState_Draw(id);
	}
	delay(1);
	restart;
}

function void TurretState_Draw (int index) {
	//log(s:"TurretState_Draw index: ", d:index);
	int hp_hid = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*index);
	int hp = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*index + 1);
	int max_hp = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*index + 2);
	int lvl_hid = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*index + 3);
	int lvl = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*index + 4);
	int utid = GetSyncVar(TURRETSTATE_TID+1 + (TURRETSTATE_PROPS)*index + 5);
	//log(s:"hp_hid: ", d:hp_hid, s:", hp: ", d:hp, s:", max_hp: ", d:max_hp, s:", lvl_hid: ", d:lvl_hid, s:", lvl: ", d:lvl, s:", utid: ", d:utid);
	int range = GetUserCvar(ConsolePlayerNumber(), "sfp_buildstats_renderdistance");

	HudResetState();
	HudSetShowToEveryone(true);

	if(PlayerIsSpectator(ConsolePlayerNumber()) && (CheckPlayerCamera(ConsolePlayerNumber()) > 0)) {
		int playerSpecedNearLabelText = ActorDistance(CheckPlayerCamera(ConsolePlayerNumber()), utid) <= range;
		if(!playerSpecedNearLabelText){
			ClearHudMessageBold(hp_hid);
			ClearHudMessageBold(lvl_hid);
			return;
		}
		
		HudSetCameraActor(CheckPlayerCamera(ConsolePlayerNumber()));
	} else {
		int playerNearLabelText = ActorDistance(990+ConsolePlayerNumber(), utid) <= range;
		if(!playerNearLabelText){
			ClearHudMessageBold(hp_hid);
			ClearHudMessageBold(lvl_hid);
			return;
		}
		HudSetCameraActor(990+ConsolePlayerNumber());
	}

	HudSetFont(Bar_StateFont(hp, max_hp));
	HudSetPoint3D(GetActorX(utid), GetActorY(utid), GetActorZ(utid) + 90.0);
	HudSetScale(1.0);
	HudSetTextColor(CR_CYAN);
	int alpha = fixedDiv(GetUserCvar(ConsolePlayerNumber(), "sfp_buildstats_alpha"), 100.0);
	HudSetAlpha(alpha);
	HudSetStayTime(0.1);
	HudSetAlignment(HUD_ALIGN_LEFT, HUD_ALIGN_CENTER);
	//HudDrawText(hp_hid, strparam(d:hp, s:"/", d:max_hp));
	HudDrawText(hp_hid, "a");
	//HudSetAlignment(HUD_ALIGN_CENTER, HUD_ALIGN_CENTER);
	HudSetFont(Stars_StateFont(lvl));
	HudSetPoint3D(GetActorX(utid), GetActorY(utid), GetActorZ(utid) + 95.0);
	if(lvl == 0) HudDrawText(lvl_hid, "");
	else  		HudDrawText(lvl_hid, "a");
} 

function int TurretState_Allocate(void) {
	int res = -1;
	for(int i = 0; i < TURRETSTATE_MAX; i++){
		if(turretStates_data[i][1] <= 0){
			res = i;
			break;
		}
	}
	return res;
}

function void TurretState_UpdateLastIndex(void) {
	int res = 0;
	for(int i = TURRETSTATE_MAX; i > 0; i--){
		if(turretStates_data[i][1] > 0){
			res = i;
			break;
		}
	}
	turretStates_lastIndex = res+1;
	//log(s:"TurretState LastId: (", d:turretStates_lastIndex, s:")");
}

Script "Building_States" (void) {
	int free_index = TurretState_Allocate();
	turretStates_data[free_index][0] = TURRETSTATEHID_HP + free_index;
	turretStates_data[free_index][1] = GetActorProperty(0, APROP_HEALTH);
	turretStates_data[free_index][2] = GetActorProperty(0, APROP_SPAWNHEALTH);
	turretStates_data[free_index][3] = TURRETSTATEHID_LVL + free_index;
	turretStates_data[free_index][4] = GetActorProperty(0, APROP_STAMINA);
	turretStates_data[free_index][5] = UniqueTID(4000);
	SpawnForced("TurretStates_Label", GetActorX(0), GetActorY(0), GetActorZ(0), turretStates_data[free_index][5]);
	ACS_NamedExecuteAlways("TurretStates_Update", 0, free_index);
	TurretState_UpdateLastIndex();
}

Script "Building_Scripts" (void) {
	if(Tech_IsDone(TECH_MARCOM_GEARUP)){
		int rng = GetUserVariable(0, PATCHER_USERVAR_RANGE);
		int rng_up = GetUserVariable(0, PATCHER_USERVAR_RANGEUP);
		SetActorProperty(0, APROP_STAMINA, 1);
		ACS_NamedExecuteAlways("Building_UpgradeStats", 0);
		SetUserVariable(0, "user_range", rng + rng_up);
	}

	ACS_NamedExecuteAlways("Building_States", 0);
	ACS_NamedExecuteAlways("Building_AggroLoop", 0);
}

Script "TurretStates_Update" (int id) {
	if (GetActorHealth(0) <= 0){
		Thing_Remove(turretStates_data[id][5]);
		for (int i = 0; i < TURRETSTATE_PROPS; i++) {
			turretStates_data[id][i] = 0;
		}
		TurretState_UpdateLastIndex();
		//log(s:"TurretState ID: (", d:id, s:") Data Cleared");
		terminate;
	}

	turretStates_data[id][1] = GetActorProperty(0, APROP_HEALTH);
	turretStates_data[id][2] = GetActorProperty(0, APROP_SPAWNHEALTH);
	turretStates_data[id][4] = GetActorProperty(0, APROP_STAMINA);
	SetActorPosition(turretStates_data[id][5], GetActorX(0), GetActorY(0), GetActorZ(0), false);

	delay(5);
	restart;
}

Script "Dispenser_SpawnVFX" (int sparks, int ammo_or_health) {
	int range = GetUserVariable(0, "user_range")*2;
	int times = 3 + GetActorStamina(0);
	for (int i = 0; i < times; i ++){
		if(ammo_or_health == 0){
			SpawnRadius("AmmoDispenser_StreakBarEmmiter", 0, (random(8, range-4))<<16, random(0.01, 1.0), 0, false);
			if(sparks)
				SpawnRadius("AmmoDispenser_StreakSparkEmmiter", 0, range<<16, random(0.01, 1.0), 0, false);
		}
		if(ammo_or_health == 1){
			SpawnRadius("HealthDispenser_StreakBarEmmiter", 0, (random(8, range-4))<<16, random(0.01, 1.0), 0, false);
			if(sparks)
				SpawnRadius("HealthDispenser_StreakSparkEmmiter", 0, range<<16, random(0.01, 1.0), 0, false);
		}
		
	}
	
}

function int SpawnRadius(str type, int spotid, int radius, int angle, int newtid, bool fog)
{
   int x = GetActorX(spotid) + FixedMul(cos(angle), radius);
   int y = GetActorY(spotid) + FixedMul(sin(angle), radius);

   int test = Spawn(type, x, y, GetActorZ(spotid), newtid, angle >> 8);

   if (test && fog)
     Spawn("TeleportFog", x, y, GetActorZ(spotid), 0, 0);

   if (test)
     return TRUE;

   return FALSE;
}

Script "Building_AggroLoop" (int tid) {
	delay(random(0,17));
	while(GetActorProperty(0, APROP_HEALTH) > 0){
		//log(s:"Aggroing");
		TakeInventory("Building_GetRange", 0xFFFFFFFF);
		//
		if(CheckActorClass(0, "AmmoDispenser_Base") || CheckActorClass(0, "HealthDispenser_Base"))
			GiveInventory("Building_GetRange", 1024*3);
			
			// Dispensers are more prone to be attacked!
		else{
			GiveInventory("Building_GetRange", GetUserVariable(0, "user_range"));
		}
		GiveInventory("Building_HateRadius", 1);
		//GiveInventory("Building_AlertThem", 1);
		//Log(s:"Give the HateRadius, radius:", d:CheckInventory("Building_GetRange"));
		delay(35*4);
	}
	//log(s:"Done aggroing");
}


Script "Building_AttackThis" (void) {
	if(CheckInventory("Building_AttackFirst")) Terminate;
	//int tid = ActivatorTid();
	GiveInventory("Building_AttackFirst", 1);
	delay(20);
	TakeInventory("Building_AttackFirst", 1);
	//thing_hate(0, g_Status + 100, 4);
}

Script "Building_GetRange" (void) {
	SetResultValue(CheckInventory("Building_GetRange"));
}

Script "PlayUp_CheckCvar" (void) {
	SetResultValue(GetCvar("sfp_allplayups"));
}

function void Bar_State(int id, int var, int max_val){
	// Quick division function to show sprite.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int bar_state_num = bar_amount / 5;
	if(bar_state_num >= 20) bar_state_num = 20;
	setActorState(id, Strparam(s:"HP_", d:bar_state_num));
} 

function str Bar_StateFont(int var, int max_val){
	// Quick division function to show sprite.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int bar_state_num = bar_amount / 5;
	if(bar_state_num >= 20) bar_state_num = 20;
	return Strparam(s:"BUHB", c:65+bar_state_num, s:"0");
} 

function str Stars_StateFont(int val){
	// Quick division function to show sprite.
	return Strparam(s:"BULV", c:65+(val-1), s:"0");
} 
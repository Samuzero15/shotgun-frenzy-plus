/**
*
* 	<samut_update.acs> 
* 	Update module!
*	Here is where the data gets updated.
*	Remember, just a display alone, can't do much 
*	if you don't pass some data for it.
*	Nifty for counting your money, or to show dynamic labels to the user!
*
**/
function void SamuTerm_Update(void){
	//Here, change stuff before drawing!
	// (Like, dunno, showing your money n stuff?)
	
	UpdateCursor();
	UpdatePrompt();
	//log(s:"Last tag hiding...");
	HideOrShowByTag(pagetags[STTAGS_LAST], false);
	//log(s:"Current tag showing...");
	HideOrShowByTag(pagetags[STTAGS_NOW], true);
	
	showByAlphaTag();
	//UpdateDragBtns();
	UpdatePages();
}

Function void UpdatePrompt(void){
	ImgButton_setShow(prompt_data[STPROMPT_DATA_OKBTN], (Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]) == ImgButton_getTag(prompt_data[STPROMPT_DATA_OKBTN])) && Prompt_GetState());
	ImgButton_setShow(prompt_data[STPROMPT_DATA_YESBTN], (Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]) == ImgButton_getTag(prompt_data[STPROMPT_DATA_YESBTN])) && Prompt_GetState());
	ImgButton_setShow(prompt_data[STPROMPT_DATA_NOBTN], (Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]) == ImgButton_getTag(prompt_data[STPROMPT_DATA_NOBTN])) && Prompt_GetState());
	Label_setShow(prompt_data[STPROMPT_DATA_LABEL], Prompt_GetState());
	Panel_setShow(prompt_data[STPROMPT_DATA_PANEL], Prompt_GetState());
	UpdatePanel(prompt_data[STPROMPT_DATA_PANEL], Prompt_GetState());
}

Function void ShowByAlphaTag(void){
	int i, compTag;
	//log(s:"0 tag showing...");
	HideOrShowByTag(0, true);
	//log(s:"Alpha tag showing...");
	HideOrShowByTag(pagetags[STTAGS_ALPHA], true);
}

function void UpdateDragBtns(void){
	for (int i = 0; i < comp_count[STCOMP_IBTN]; i++){
		if(ImgButton_getGrabState(i) == false) continue;
		if(CursorDeltaX() == 0.0 && CursorDeltaY() == 0.0) continue;

		RectFollowCursor(ImgButton_getRect(i));
	}
}

Function void HideOrShowByTag(int tag, bool show){
	int i, compTag;
	for (i = 0; i < comp_count[STCOMP_IBTN]; i++){
		if(i == prompt_data[STPROMPT_DATA_YESBTN] 
			|| i == prompt_data[STPROMPT_DATA_NOBTN] 
			|| i == prompt_data[STPROMPT_DATA_OKBTN]) continue;
		if(ImgButton_getTag(i) == tag) ImgButton_setShow(i, show);
	}
	
	for (i = 0; i < comp_count[STCOMP_SBTN]; i++){
		if(StrButton_getTag(i) == tag) StrButton_setShow(i, show);
		
	}
	
	for (i = 0; i < comp_count[STCOMP_LBL]; i++){
		if(i == prompt_data[STPROMPT_DATA_LABEL]) continue;
		if(Label_getTag(i) == tag) Label_setShow(i, show);
		
	}
	
	for (i = 0; i < comp_count[STCOMP_IMG]; i++){
		if(Image_getTag(i) == tag) Image_setShow(i, show);
	}

	for (i = 0; i < comp_count[STCOMP_PANEL]; i++){
		if(Panel_GetTag(i) == tag) UpdatePanel(i, show);
	}
}

function void UpdatePanel(int pan,int show){
	Panel_SetShow(pan, show);
	if(!show) return;

	// Handle Autoscrolling.
	Panel_UpdateAutoscroll(pan);
	Panel_UpdateScrollButtons(pan);
	Panel_UpdateAnchorPoint(pan);
	int x = Panel_GetAnchorPointX(pan);
	int y = Panel_GetAnchorPointY(pan);
	for(int i = 0; i < Panel_GetNumberOfComps(pan); i++){
		Panel_UpdateOffsets(pan, i, x, y);
	}
	//log(s:"Panel Update Done");
}

function void Panel_UpdateOffsets(int pan, int comp, int x, int y){
	int component = panels_comps_index[pan][comp][STPANEL_COMPDATA_ID];
	int is_anchored = panels_comps_index[pan][comp][STPANEL_COMPDATA_ISANCHORED];
	if(!is_anchored) return;
	
	// Check if the component is a label, a imgbutton, an img or a strbutton.
	switch (panels_comps_index[pan][comp][STPANEL_COMPDATA_TYPE]){
		case STCOMP_IBTN:
			if(ImgButton_GetParent(component) == pan) ImgButton_setOffsets(component, x, y);
		break;
		case STCOMP_LBL: 
			if(Label_GetParent(component) == pan) Label_setOffsets(component, x, y);
		break;
		case STCOMP_IMG: 
			if(Image_GetParent(component) == pan) Image_setOffsets(component, x, y);
		break;
		case STCOMP_SBTN: 
			if(StrButton_GetParent(component) == pan) StrButton_setOffsets(component, x, y);
		break;
	}
}
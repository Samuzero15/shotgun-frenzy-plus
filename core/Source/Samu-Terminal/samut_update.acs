/**
*
* 	<samut_update.acs> 
* 	Update module!
*	Here is where the data gets updated.
*	Remember, just a display alone, can't do much 
*	if you don't pass some data for it.
*	Nifty for counting your money, or to show dynamic labels to the user!
*
**/
function void SamuTerm_Update(void){
	//Here, change stuff before drawing!
	// (Like, dunno, showing your money n stuff?)
	
		UpdateCursor();
	UpdatePromptImgButtons();
	UpdatePromptLabels();
	HideOrShowByTag(pagetags[STTAGS_LAST], false);
	HideOrShowByTag(pagetags[STTAGS_NOW], true);
	showByAlphaTag();
	UpdatePanels();
	UpdatePages();
	//Label_setText(techs, StrParam(s:"Human engineering 1 Researched?: ", d:getTechFlag_C(TECH_HEALT1)));
	//Label_setText(label1, StrAddInt("Money: ", CheckInventory("BasicArmor")));
}

Function void UpdatePromptLabels(void){
	for (int i = 0; i < comp_count[STCOMP_LBL]; i++){
		int parent = Label_getParent(i);
		if(parent == getPromptRect()){
			UpdateLabel(i, getPromptState());
		}
	}
}

Function void UpdatePromptImgButtons(void){
	for (int i = 0; i < comp_count[STCOMP_IBTN]; i++){
		int parent = ImgButton_getParent(i);
		if(parent == getPromptRect()){
			UpdateImgButton(i, getPromptState());
		}
	}
}

Function void ShowByAlphaTag(void){
	int i, compTag;
	HideOrShowByTag(0, true);
	HideOrShowByTag(pagetags[STTAGS_ALPHA], true);
}

Function void HideOrShowByTag(int tag, bool show){
	int i, compTag;

	for (i = 0; i < comp_count[STCOMP_IBTN]; i++){
		comptag = ImgButton_getTag(i);
		if(comptag == tag){
			ImgButton_setShow(i, show);
		}
	}
	
	for (i = 0; i < comp_count[STCOMP_SBTN]; i++){
		comptag = StrButton_getTag(i);
		if(comptag == tag){
			StrButton_setShow(i, show);
		}
	}
	
	for (i = 0; i < comp_count[STCOMP_LBL]; i++){
		comptag = Label_getTag(i);
		if(comptag == tag){
			Label_setShow(i, show);
		}
	}
	
	for (i = 0; i < comp_count[STCOMP_IMG]; i++){
		comptag = Image_getTag(i);
		if(comptag == tag){
			Image_setShow(i, show);
		}
	}
}

function void UpdatePanels(void){
	for (int pan = 0; pan < panel_count; pan++){
		Panel_UpdateScrollButtons(pan);
		for(int i = 0; i < Panel_GetNumberOfComps(pan); i++){
			int component = panels_comps_index[pan][i][1];
			int x = Panel_GetVirtualOffsetX(pan);
			int y = Panel_GetVirtualOffsetY(pan);
			int show = Panel_GetShow(pan);
			int comp_show = panels_comps_index[pan][i][3];

			int virtual_size[2];
			virtual_size[0] = Panel_GetVirtualWidth(pan);
			virtual_size[1] = Panel_GetVirtualHeight(pan);
			int spacing_anchored[2];
			int comp_pos[2];
			int spacing[2];
			spacing[0] = Panel_GetSpacingX(pan);
			spacing[1] = Panel_GetSpacingY(pan); 
			int columns = Panel_GetColumns(pan);

			int count = Panel_GetNumberOfComps(pan) - Panel_GetNumberOfCompsAbs(pan);

			switch(Panel_GetAnchorX(pan)){
				case STPANEL_ANCHOR_CENTER: 
					spacing_anchored[0] = FixedDiv(virtual_size[0]+Panel_getClipWidth(pan), 2.0)-(FixedDiv(spacing[0]*columns,2.0));
					x = Panel_GetVirtualOffsetX(pan) + spacing_anchored[0]; 
				break;
				case STPANEL_ANCHOR_LEFT: x = Panel_GetVirtualOffsetX(pan); break;
				case STPANEL_ANCHOR_RIGHT: break;
			}
			switch(Panel_GetAnchorY(pan)){
				case STPANEL_ANCHOR_CENTER: 
					spacing_anchored[1] = FixedDiv(virtual_size[1]+Panel_getClipHeight(pan), 2.0)-(FixedDiv(spacing[1]*(count/(columns)),2.0));
					y = Panel_GetVirtualOffsetY(pan) + spacing_anchored[1]; 
				break;
				case STPANEL_ANCHOR_TOP: y = Panel_GetVirtualOffsetY(pan);  break;
				case STPANEL_ANCHOR_BOTTOM: break;
			}

			// Check if the component is a label, a imgbutton, an img or a strbutton.
			switch (panels_comps_index[pan][i][0]){
				case STCOMP_IBTN:
					if(ImgButton_GetParent(component) == pan){
						ImgButton_setShowEx(component, !show ? false : comp_show, false);
						ImgButton_setOffsets(component, x, y);
					}
				break;
				case STCOMP_LBL: 
					if(Label_GetParent(component) == pan){
						Label_setShowEx(component, !show ? false : comp_show, false);
						Label_setOffsets(component, x, y);
					}
				break;
				case STCOMP_IMG: 
					if(Image_GetParent(component) == pan){
						//log(s:"Panel show? ", d:show, s:" Image button, Component show? ", d:comp_show,  s:", Result? ",d:!show ? false : comp_show);
						Image_setShowEx(component, !show ? false : comp_show, false);
						Image_setOffsets(component, x, y);
					}
				break;
				case STCOMP_SBTN: 
					if(StrButton_GetParent(component) == pan){
						StrButton_setShowEx(component, !show ? false : comp_show, false);
						StrButton_setOffsets(component, x, y);
					}
				break;
			}
				
		}
	}
}
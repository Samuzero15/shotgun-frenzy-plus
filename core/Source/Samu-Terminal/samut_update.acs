/**
*
* 	<samut_update.acs> 
* 	Update module!
*	Here is where the data gets updated.
*	Remember, just a display alone, can't do much 
*	if you don't pass some data for it.
*	Nifty for counting your money, or to show dynamic labels to the user!
*
**/
function void SamuTerm_Update(void){
	//Here, change stuff before drawing!
	// (Like, dunno, showing your money n stuff?)
	
	UpdateCursor();
	UpdatePrompt();
	HideOrShowByTag(pagetags[STTAGS_LAST], false);
	HideOrShowByTag(pagetags[STTAGS_NOW], true);
	showByAlphaTag();
	UpdatePages();
}

Function void UpdatePrompt(void){
	ImgButton_setShow(prompt_data[STPROMPT_DATA_OKBTN], (Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]) == ImgButton_getTag(prompt_data[STPROMPT_DATA_OKBTN])) && Prompt_GetState());
	ImgButton_setShow(prompt_data[STPROMPT_DATA_YESBTN], (Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]) == ImgButton_getTag(prompt_data[STPROMPT_DATA_YESBTN])) && Prompt_GetState());
	ImgButton_setShow(prompt_data[STPROMPT_DATA_NOBTN], (Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]) == ImgButton_getTag(prompt_data[STPROMPT_DATA_NOBTN])) && Prompt_GetState());
	Label_setShow(prompt_data[STPROMPT_DATA_LABEL], Prompt_GetState());
	Panel_setShow(prompt_data[STPROMPT_DATA_PANEL], Prompt_GetState());
	UpdatePanel(prompt_data[STPROMPT_DATA_PANEL], Prompt_GetState());
}

Function void ShowByAlphaTag(void){
	int i, compTag;
	HideOrShowByTag(0, true);
	HideOrShowByTag(pagetags[STTAGS_ALPHA], true);
}

Function void HideOrShowByTag(int tag, bool show){
	int i, compTag;
	for (i = 0; i < comp_count[STCOMP_IBTN]; i++){
		if(i == prompt_data[STPROMPT_DATA_YESBTN] || i == prompt_data[STPROMPT_DATA_NOBTN] || i == prompt_data[STPROMPT_DATA_OKBTN]) continue;
		comptag = ImgButton_getTag(i);
		if(comptag == tag){
			ImgButton_setShow(i, show);
		}
	}
	
	for (i = 0; i < comp_count[STCOMP_SBTN]; i++){
		comptag = StrButton_getTag(i);
		if(comptag == tag){
			StrButton_setShow(i, show);
		}
	}
	
	for (i = 0; i < comp_count[STCOMP_LBL]; i++){
		if(i == prompt_data[STPROMPT_DATA_LABEL]) continue;
		comptag = Label_getTag(i);
		if(comptag == tag){
			Label_setShow(i, show);
		}
	}
	
	for (i = 0; i < comp_count[STCOMP_IMG]; i++){
		comptag = Image_getTag(i);
		if(comptag == tag){
			Image_setShow(i, show);
		}
	}
	UpdatePanels(tag, show);
}

function void UpdatePanel(int pan,int show){
	Panel_SetShow(pan, show);
	if(!show) return;

	// Handle Autoscrolling.
	Panel_UpdateScrollAutomove(pan);
	Panel_UpdateScrollButtons(pan);
	Panel_UpdateAnchorPoint(pan);
	int x = Panel_GetAnchorPointX(pan);
	int y = Panel_GetAnchorPointY(pan);
	for(int i = 0; i < Panel_GetNumberOfComps(pan); i++){
		int component = panels_comps_index[pan][i][STPANEL_COMPDATA_ID];
		int panshow = Panel_GetShow(pan);
		//int is_absolute = panels_comps_index[pan][i][STPANEL_COMPDATA_ISABSOLUTE];
		int comp_show = panels_comps_index[pan][i][STPANEL_COMPDATA_SHOWSTATUS];
		int is_anchored = panels_comps_index[pan][i][STPANEL_COMPDATA_ISANCHORED];
		
		// Check if the component is a label, a imgbutton, an img or a strbutton.
		switch (panels_comps_index[pan][i][STPANEL_COMPDATA_TYPE]){
			case STCOMP_IBTN:
				if(ImgButton_GetParent(component) == pan){
					ImgButton_setShowEx(component, panshow == false ? false : comp_show, false);
					if(is_anchored) 
						ImgButton_setOffsets(component, x, y);
				}
			break;
			case STCOMP_LBL: 
				if(Label_GetParent(component) == pan){
					Label_setShowEx(component, !panshow ? false : comp_show, false);
					if(is_anchored) 
						Label_setOffsets(component, x, y);
				}
			break;
			case STCOMP_IMG: 
				if(Image_GetParent(component) == pan){
					//log(s:"Panel show? ", d:show, s:" Image button, Component show? ", d:comp_show,  s:", Result? ",d:!show ? false : comp_show);
					Image_setShowEx(component, !panshow ? false : comp_show, false);
					if(is_anchored) 
						Image_setOffsets(component, x, y);
				}
			break;
			case STCOMP_SBTN: 
				if(StrButton_GetParent(component) == pan){
					StrButton_setShowEx(component, !panshow ? false : comp_show, false);
					if(is_anchored) 
						StrButton_setOffsets(component, x, y);
				}
			break;
		}
	}
	//log(s:"Panel Update Done");
}

function void UpdatePanels(int tag, int show){
	for (int pan = 0; pan < panel_count; pan++){
		int comptag = Panel_GetTag(pan);
		if(comptag == tag){
			UpdatePanel(pan, show);
		}
	}
}
/**
*
* 	<samut_exes.acs> 
* 	Execution Module!
*	Here you can store all action handlers that you want!
* 	Just try to DO NOT remove the core-ish ones.
*	Like the ASK, YES, NO, OKAY, OPEN, CLOSE & GTCAT Executions. 
*
**/

//Thank you TDDR!
function void SamuTerm_ServerCheck (int key){ SetInventory("SamuTInv_ActionKey", key); }
function bool SamuTerm_ClientCheck (int key) { return CheckInventory("SamuTInv_ActionKey") >= key; }

function void SamuTerm_ServerCheck2 (int key) { SetInventory("SamuTInv_Action2Key", key); }
function bool SamuTerm_ClientCheck2 (int key){ return CheckInventory("SamuTInv_Action2Key") >= key; }

function void SamuTerm_CallOpExecute (int cmd, int arg1, int arg2, int arg3){
	// Depends on what you wanna do.
	// Wanna give items, open doors? Use a negative value.
	// Wanna change the components?  Use a positive value.
	
	if(sgn(cmd) == 1) SamuTerm_ClientExecute(cmd, arg1, arg2, arg3);
	else if (sgn(cmd) == -1){
		//int args = PackBytes(arg1, arg2, arg3, 0);
		//Net Packets are Unreliable huh?
		//NamedRequestScriptPuke("SamuTerm_ServerExecute", cmd , arg1, arg2, arg3);
		ACS_NamedExecuteWithResult("SamuTerm_RequestServExe", cmd, arg1, arg2, arg3);
	}
	else return;
}

function void SamuTerm_ClientExecute (int cmd, int arg1, int arg2, int arg3){
	//This next action is for the terminal variable changes.
	SamuTerm_Execute(cmd, arg1, arg2, arg3);
}

script "SamuTerm_RequestServExe" (int cmd, int arg1, int arg2, int arg3){
	int key = CheckInventory("SamuTInv_ActionKey") + 1;
	int key2 = CheckInventory("SamuTInv_Action2Key") + 1;
	GiveInventory("SamuTInv_LockInput", 1);
	while(!SamuTerm_ClientCheck(key) || !SamuTerm_ClientCheck2(key2)) {
		if(!SamuTerm_ClientCheck(key))
			NamedRequestScriptPuke("SamuTerm_ServerExecute_Command", key, cmd);
		if(SamuTerm_ClientCheck(key))
			NamedRequestScriptPuke("SamuTerm_ServerExecute_Args", key, arg1, arg2, arg3);
		delay(3);
	}
	TakeInventory("SamuTInv_LockInput", 1);
    
}
int stexecute_server_cmd;
// I divided the server execution in 2 parts, one for setting the cmd for execution. and the other action for setting args and execute.
Script "SamuTerm_ServerExecute_Command" (int key, int cmd) NET{
	//This sets the command to execute.
	if(SamuTerm_ClientCheck(key)) {terminate;}
	
	stexecute_server_cmd = cmd;
	SamuTerm_ServerCheck(key);
}

Script "SamuTerm_ServerExecute_Args" (int key, int arg1, int arg2, int arg3) NET{
	//This adds the args on the command to execute, and executes it.
	if(SamuTerm_ClientCheck2(key)) {terminate;}

	SamuTerm_Execute(stexecute_server_cmd, arg1, arg2, arg3);
	SamuTerm_ServerCheck2(key);
}

/**
*
*	stexec_handler.acs
* 	In this switch, you can expand it to whatever handlers you need.
*	Note: The arguments are limited to bytes. (0 - 255)
*
*/

function void SamuTerm_Execute(int cmd, int arg1, int arg2, int arg3)
{
	// Eitherway, this will list all of the functions about the executions.
	switch(cmd){

		case STEXE_RUNESHOP_BUY: 	STExecute_RuneBuy(arg1);	break;
		case STEXE_RUNESHOP_GET: 	STExecute_RuneGet(arg1);	break;
		case STEXE_RUNESHOP_GIVE: 	STExecute_RuneGive(arg1);	break;
		case STEXE_RUNESHOP_HOVER: 	STExecute_RuneDesc(arg1);	break;
		case STEXE_RUNESHOP_BUYTIER: 	STExecute_RuneTierBuy();	break;
		case STEXE_RUNESHOP_GIVETIER: 	STExecute_RuneTierGive();	break;

		case STEXE_STIMUP_BUY: 	 STExecute_StimUpBuy(arg1);		break;
		case STEXE_STIMUP_GIVE:  STExecute_StimUpGive(arg1);	break;
		case STEXE_STIMUP_HOVER: STExecute_StimUpDesc(arg1);	break;
		
		case STEXE_PLAYUP_GET: STExecute_PlayUpGet(arg1); break;
		case STEXE_PLAYUP_SET: STExecute_PlayUpSet(arg1); break;
		case STEXE_PLAYUP_ASK: STExecute_PlayUpAsk(arg1); break;
		case STEXE_PLAYUP_SETDESC: STExecute_PlayUpSetDesc(arg1); break;
		case STEXE_PLAYUP_BTNHOVER: STExecute_PlayUpTitleHover(arg1, arg2); break;
		
		case STEXE_BUYWP_PSHOW: STExecute_BuyWepSetCat(arg1); break;
		case STEXE_BUYWP_PDESC: STExecute_BuyWepShowData(arg1); break;
		case STEXE_BUYWP_MOVEWEP: STExecute_BuyWepChangeWeapon(arg1); break;
		case STEXE_BUYWP_MOVEWPPAGE: STExecute_BuyWepChangeWPPage(arg1); break;
		case STEXE_GETWP: STExecute_getWeapon(arg1); break;
		case STEXE_GIVEWP: STExecute_giveWeapon(arg1); break;
		case STEXE_BUYWP: STExecute_BuyWeapon(arg1); break;
	
		case STEXE_UPGPAGEDESC: StExecute_UpgPageDesc(arg1, arg2); break;
		case STEXE_UPGPAGECAT: StExecute_UpgPageCat(arg1); break;
		case STEXE_UPGPAGEWEPS: StExecute_UpgPageWeps(arg1); break;
		case STEXE_UPWEPOPENUPS: StExecute_UpPageOpenUps(arg1); break;
		
		case STEXE_CMDEVENT_CHECK: STExecute_CMDEvent_Check(arg1, arg2); break;
		case STEXE_CMDEVENT_DOIT: STExecute_CMDEvent_DoIt(arg1); break;
		case STEXE_CMDEXIT: StExecute_CMDExit(); break;
		case STEXE_CMDBTNDESC: StExecute_CMDBtnDesc(arg1, arg2, arg3); break;
		case STEXE_CMDCAT: STExecute_CMDGotToCat(arg1, arg2); break;
		case STEXE_CMDCAT2: STExecute_CMDGotToCat2(arg1, arg2); break;
		
		case STEXE_BUYMECHTANK: StExecute_BuyMechTank(); break;
		case STEXE_GETMECHTANK: StExecute_GetMechTank(); break;
		case STEXE_UPGMECHTANK: StExecute_UpgradeMech(arg1); break;
		case STEXE_GETMECHUPG: StExecute_GetMechUpgrade(arg1); break;
		case STEXE_EnterMECHTANK: StExecute_EnterMechTank(); break;
		
		case STEXE_POWBUY: StExecute_BuyPowerup(arg1); break;
	
		case STEXE_ITEMBUY: StExecute_BuyItem(arg1); break;
		case STEXE_ITEMGET: StExecute_GetItem(arg1); break;
		
		case STEXE_WEPRC: StExecute_RecycleWeapon(arg1, arg2, arg3); break;
		case STEXE_MOVERC: STExecute_RecycleMove(arg1, arg2); break;
		case STEXE_MSGRC: StExecute_RecycleAccepted(arg1, arg2); break;
		case STEXE_ASKRC: StExecute_AskForRecycle(arg1, arg2); break;
		case STEXE_LABELRC: StExecute_LabelWepRecycle(arg1, arg2); break;
		
		case STEXE_GETUP: StExecute_UpgradeWeapon(arg1, arg2); break;
		case STEXE_MSGUP: StExecute_UpgradeAccepted(arg1, arg2); break;
		case STEXE_ASKUP: StExecute_AskForUpgrade(arg1, arg2); break;
		/*
		case STEXE_ShowBuyPage: STExecute_ShowBuyPage(arg1); break;
		*/
		case STEXE_PANEL_SCROLL: STExecute_PanelScroll(arg1, arg2, arg3); break;
		case STEXE_HowKind: STExecute_AYesFun(); break;
		case STEXE_HowRude: STExecute_ANoFun(); break;
		case STEXE_YES: STExecute_YesAction(); break;
		case STEXE_NO: STExecute_NoAction(); break;
		case STEXE_OKAY: STExecute_OkayAction(); break;
		case STEXE_SAYHI: STExecute_SayHi(); break;
		case STEXE_ASK: STExecute_Ask(); break;
		case STEXE_CLOSE: STExecute_Close(); break;
		case STEXE_SYSOFF: STExecute_Shutdown(); break;
		case STEXE_OPEN: STExecute_Open(arg1); break;
		case STEXE_GTCAT: StExecute_GoToCategory(arg1, arg2); break;
		case STEXE_SELECT: StExecute_SelectComponent(arg1, arg2); break;
		default: 
			Toaster_ShowToast(StrAddInt("Command not defined yet. ", cmd),CR_RED);
		break;
	}
}

#include "stexec_funs.acs"

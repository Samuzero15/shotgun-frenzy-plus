/**
*
*	<samut_comps.acs>
*	Here it declares all of the components for the terminal.
*	This is the part where you can customize your menu stuff!
*
*/


#include "samut_comps_ibtns.acs"
#include "samut_comps_sbtns.acs"
#include "samut_comps_lbls.acs"
#include "samut_comps_imgs.acs"
#include "samut_comps_toast.acs"
#include "samut_comps_prompt.acs"
#include "samut_comps_cursor.acs"


function void SamuTerm_InitComps(void){
	Components_Clear();
	pagetags[STTAGS_NOW] = pagetags[STTAGS_ALPHA];
	Cursor_Initialize(32.0, 32.0);
	
	initTitle();
	Toaster_Initialize();
	Prompt_Initialize();
	
	//Custom shiet.
	SamuTerm_InitPages();
}

function void Components_Clear(void){
	RectsDelete(0);
	Vars_ClearCompCounts();
	Vars_ClearTmps();
	Grid_ClearAll();
	Card_ClearAll();
	pagetags[STTAGS_NOW] = 0;
	pagetags[STTAGS_LAST] = 0;
}

function void Component_Save(int comprect){
	for(int i = 0; i < ACSUTILS_RECTLIB_USERVARS; i++){
		comp_propsave[i] = RectGetUserData(comprect, i);
	}
}

function void Component_Load(int id, int type, int rect){
	for(int i = 0; i < ACSUTILS_RECTLIB_USERVARS; i++){
		SetRectUserData(rect, i, comp_propsave[i]);
	}

	switch(type) {// Hud Id is overriden. Fix that with a redefining.
		case STCOMP_IBTN:	ImgButton_setHudId(id, ST_HID_IBTN + id); break;
		case STCOMP_SBTN:	StrButton_setHudId(id, ST_HID_SBTNF + id); break;
		case STCOMP_IMG:	Image_setHudId	(id, ST_HID_IMG + id); break;
		case STCOMP_LBL:	Label_setHudId	(id, ST_HID_LBL + id); break;
	}
}

function int Component_Allocate(int comptype, int x, int y, int w, int h){
	int id = comp_count[comptype];
	if(id < ST_NCOMPS){
		int rect = RectCreate(x,y,w,h);
		switch(comptype){
			case STCOMP_IBTN:	ImgButton_setRect(id, rect); break;
			case STCOMP_SBTN:	StrButton_setRect(id, rect); break;
			case STCOMP_IMG:	Image_setRect	(id, rect); break;
			case STCOMP_LBL:	Label_setRect	(id, rect); break;
		}
		//if(comptype == STCOMP_IBTN) print(s:"Id: ", d:id, s:" for image button added.");
		comp_count[comptype]++;
	}else{
		print(s:"Too many components!");
		id = -1;
	}
	//print(d:id);
	
	return id;
}

function void Component_PrintCount(void){
	str type_str;
	log(s:"Component cap: \cg", d:ST_NCOMPS);
	for (int i = 0; i < STVARS_COMPCOUNT; i++){
		switch(i){
			case 0: type_str = "IMG BUTTON"; break;
			case 1: type_str = "LABELS"; break;
			case 2: type_str = "IMAGES"; break;
			case 3: type_str = "STR BUTTON"; break;
		}
		log(s:type_str, s:", \cd", d:comp_count[i]);
	}
}

function void initTitle(void){

	ptitle = Label_Add(320.0,40.0); 
	Label_setText(ptitle,"Title");
	Label_setFont(ptitle,"STATBIGS");
	Label_setColor(ptitle,CR_WHITE);
	Label_setTag(ptitle, -1);
	Label_setShow(ptitle, false);
}

function void setTitleText(str title){
	Label_setText(ptitle, title);
}

function void setTitleColor(int color){
	Label_setColor(ptitle, color);
}

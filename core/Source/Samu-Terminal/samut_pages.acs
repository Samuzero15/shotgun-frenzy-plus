/**
*
* 	<samut_pages.acs> 
* 	Functions that initializes components, 
*	but specially done for some dynamic segments.
*
**/


#include "samut_pages_upgwp.acs"
#include "samut_pages_buywp.acs"
#include "samut_pages_rcywp.acs"
#include "samut_pages_armit.acs"
#include "samut_pages_pwrup.acs"
#include "samut_pages_mechup.acs"
#include "samut_pages_stimup.acs"
#include "samut_pages_playup.acs"
#include "samut_pages_runep.acs"

#include "samut_pages_cmd_main.acs"

#define ST_PAGEALPHA_CMD 10
#define ST_PAGEALPHA_ATE 0
#define ST_PAGEALPHA_HTE 20
#define ST_PAGEALPHA_MTE 30

function void SamuTerm_InitPages(void){

	int card;
	int b;
	Card_SetPosition(176.0, 424.0);
	Card_SetStep(64.0);
	Card_SetCells(5);
	card = Card_Generate();

	sfpcomps[SF_SFCOMPS_WALLET_CREDITS] = Label_Add(60.0,452.0); 
	Label_setText(sfpcomps[SF_SFCOMPS_WALLET_CREDITS], "");
	Label_setFont(sfpcomps[SF_SFCOMPS_WALLET_CREDITS],"DBIGFONT");
	Label_setColor(sfpcomps[SF_SFCOMPS_WALLET_CREDITS],CR_gold);
	Label_setShow(sfpcomps[SF_SFCOMPS_WALLET_CREDITS], true);

	sfpcomps[SF_SFCOMPS_WALLET_UPS] = Label_Add(580.0,452.0); 
	Label_setText(sfpcomps[SF_SFCOMPS_WALLET_UPS], "");
	Label_setFont(sfpcomps[SF_SFCOMPS_WALLET_UPS],"DBIGFONT");
	Label_setColor(sfpcomps[SF_SFCOMPS_WALLET_UPS],CR_cyan);
	Label_setShow(sfpcomps[SF_SFCOMPS_WALLET_UPS], true);

	/*
	int panel = Panel_Add(80.0, 80.0, 20, 15);
	Panel_SetVirtualSize(panel, 32.0, 32.0);
	Panel_SetScrollAmount(panel, 4.0, 4.0);
	Panel_SetSpacing(panel, 32.0, 32.0);
	Panel_SetColumns(panel, 2);
	Panel_SetShow(panel, true);
	Panel_SetAnchors(panel, STPANEL_ANCHOR_CENTER, STPANEL_ANCHOR_CENTER);
	int image = Image_AddToPanel("BTN7", panel);
	Image_SetShow(image, true);
	int image2 = Image_DupToPanel(image, panel);
	Image_SetShow(image2, true);
	int image3 = Image_DupToPanel(image, panel);
	Image_SetShow(image3, true);
	int image4 = Image_DupToPanel(image, panel);
	Image_SetShow(image4, true);
	/*
	int label = Label_AddToPanel(panel);
	Label_SetText(label, "TESTME");
	Label_SetAligns(label, HUD_ALIGN_LEFT, HUD_ALIGN_TOP);
	Label_SetShow(label, true);
	int imgbtn = ImgButton_AddToPanel(32.0, 32.0, panel);
	ImgButton_SetImage		(imgbtn, "BTN1");
	ImgButton_SetHoverImage	(imgbtn, "BTNHOV");
	ImgButton_SetShow(imgbtn, true);
	int strbtn = StrButton_AddToPanel("Sex", panel);
	StrButton_SetShow(strbtn, true);
	int strbtn2 = StrButton_AddToPanelAbs("Sex", panel, 50.0, 50.0);
	*/
	switch(pagetags[STTAGS_ALPHA]){
		int i;
		case ST_PAGEALPHA_HTE:
			i = Image_Add (0.0, 0.0, "TFRAME");
			Image_SetShow(i, true);
			make_menubutton(card, 1, 1, "BTN7", "Buy Powerups");
			if(GameSkill() != 0){
				make_menubutton(card, 2, 2, "BTN5", "Player Upgrades");
				make_menubutton(card, 3, 3, "SUBTN0", "Stimpack Upgrades");
				make_menubutton(card, 4, 4, "HBTN08", "Rune-Sync");
			}
			make_exitbutton(card, 5, "BTNEXIT2");
			
			setPageTitle_Alpha("Health Terminal", CR_CYAN);
			InitPowBuyPage(1);
			if(GameSkill() != 0){
				PlayUpPage_Init(2);
				StimUpPage_Init(3);
				RunePage_Init(4);
			}
		break;
		case ST_PAGEALPHA_ATE:
			i = Image_Add (0.0, 0.0, "TFRAME");
			Image_SetShow(i, true);
			make_menubutton(card, 1, 1, "BTN1", "Buy Weapons");
			make_menubutton(card, 2, 2, "BTN2", "Upgrade Weapons");
			make_menubutton(card, 3, 3, "BTN3", "Recycle Weapons");
			make_menubutton(card, 4, 4, "BTNOK", "Extra Items");
			make_exitbutton(card, 5, "BTNEXIT");

			/*
			b = ImgButton_Add(50.0, 50.0, 32.0, 32.0);
			log(s:"Dummy button: ", d:b);
			ImgButton_SetImage		(b, "BTN1");
			ImgButton_SetHoverImage	(b, "BTNHOV");
			ImgButton_SetTag		(b, pagetags[STTAGS_ALPHA]);
			ImgButton_SetGrabable	(b, true);
			*/

			setPageTitle_Alpha("Ammuniton Terminal", CR_CYAN);
			BuyWpnPage_Init(1);
			RcyWpnPage_Init(3);
			ArmItmPage_Init(4);
			InitListUPPage(2);
		break;
		case ST_PAGEALPHA_MTE:
			Image_Add (0.0, 0.0, "TFRAME");
			make_exitbutton(card, 1, "BTNEXIT");
			MechUpPage_Init(pageTags[STTAGS_ALPHA]);
		break;
		case ST_PAGEALPHA_CMD:
			Toast_SetPosition(320.0, 150.0);
			CMDPage_Init();
		break;
		default:
			log(s:"(SamuTerm): This alphatag (",d:pagetags[STTAGS_ALPHA], s:") is unknown!");
		break;
	}
}

function void UpdatePages(void){
	if(pagetags[STTAGS_ALPHA] == 20){
		updateWallet();
		UpdatePowBuyPage(1);
		if(GameSkill() != 0){
			PlayUpPage_Update(2);
			StimUpPage_Update(3);
			RunePage_Update(4);
		}
	}else if(pageTags[STTAGS_ALPHA] == 30){
		updateWallet();
		MechUpPage_Update(pageTags[STTAGS_ALPHA]);
	}else if(pageTags[STTAGS_ALPHA] == 10){
		CMDPage_Update();
	}else{
		updateWallet();
		BuyWpnPage_Update(1);
		RcyWpnPage_Update(3);
		ArmItmPage_Update(4);
		UpdateListUPPage(2);
		//Label_setText(wallet, StrParam(s:"Price of p_key: ", d:Prices_getValue_K("pr_wb_bfg")));
	}
}

function int make_menubutton(int card, int cell, int cat, int img, int tooltip) {
	int b = ImgButton_AddCard(card, cell, 32.0, 32.0);
			ImgButton_SetImage		(b, img);
			ImgButton_SetHoverImage	(b, "BTNHOV");
			ImgButton_SetTag		(b, pagetags[STTAGS_ALPHA]);
			ImgButton_SetExecute	(b, STEXE_GTCAT);
			ImgButton_SetArgs		(b, cat, 0, 0);
			ImgButton_SetTooltip	(b, tooltip);
	return b;
}

function void make_exitbutton(int card, int cell, int img) {
	int b = make_menubutton(card, cell, 0, img, "Exit Terminal");
	ImgButton_SetExecute	(b, STEXE_CLOSE);
}

function void updateWallet(void){
	Label_setText(sfpcomps[SF_SFCOMPS_WALLET_CREDITS], StrParam(d:SFPlus_getPlayCredits(), s:"$"));
	Label_setText(sfpcomps[SF_SFCOMPS_WALLET_UPS], StrParam(d:SFPlus_getPlayUPts(), s:" U.P"));
}

function void setPageTitle_Alpha(str title, int color){
		setTitleText(title);
		setTitleColor(color);
		Label_setTag(sfpcomps[SF_SFCOMPS_TITLE], pagetags[STTAGS_ALPHA]);
}

function void setPageTitle(int pageTag, str title, int color){
	if(SamuTerminal_isOnSamePage(pageTag)){
		setTitleText(title);
		setTitleColor(color);
		Label_setTag(sfpcomps[SF_SFCOMPS_TITLE], pagetags[STTAGS_ALPHA]);
	}
}

function bool SamuTerminal_isOnSamePage(int pageTag){return pagetags[STTAGS_NOW] == pageTag;}
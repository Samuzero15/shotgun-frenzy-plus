/**
*
* 	<samut_input.acs> 
* 	Input module!
*	Here is where the "click" gets analized. You don't usually, touch this.
*
**/

function void SamuTerm_Input(int play){
	if(CheckInventory("SamuTInv_LockInput")){
		//hudmessage(s:"Waiting..."; HUDMSG_PLAIN, 0, 0, 0.5, 0.5, 1.0);
		return;
	}

	if(PlayerKeyDown(play, FIRE1) && PlayerKeyPressed(play, FIRE1)){
		if(!GetPromptState())
			CheckClick();
		else CheckPromptClick();
	}
	
	if(!GetPromptState())
		CheckHover();
	else CheckPromptHover();
}

function void CheckPromptClick(void){
	int rect;
	bool inputDone = false;
	
	inputDone = ExecuteOnClick_IBtn(prompt_ok);
	if(!inputDone) inputDone = ExecuteOnClick_IBtn(prompt_yes); 
	if(!inputDone) inputDone = ExecuteOnClick_IBtn(prompt_no);
	
	if(!inputDone){
		localAmbientSound("SamuTerm/Error",127);
	}
}

function bool ExecuteOnClick_IBtn(int i){
	int sucess = false;
	int rect =  ImgButton_getRect(i);
	int panel = ImgButton_getParent(i);
	if(ImgButton_getShow(i) != ST_Disabled){
		
		if(panel != -1){
			//log(s:"click!");
			if(Panel_ImgBtnIsClicked(panel, i, FIRE1) || (GetPromptState() && RectIsClicked(rect,FIRE1))){
				SamuTerm_CallOpExecute 
				(ImgButton_getExecute(i), ImgButton_getExeArg1(i),  
				ImgButton_getExeArg2(i),  ImgButton_getExeArg3(i));
				localAmbientSound("SamuTerm/Select",127);
				sucess = true;
			}
		}else if(RectIsClicked(rect,FIRE1)){
			SamuTerm_CallOpExecute 
				(ImgButton_getExecute(i), ImgButton_getExeArg1(i),  
				ImgButton_getExeArg2(i),  ImgButton_getExeArg3(i));
			localAmbientSound("SamuTerm/Select",127);
			sucess = true;
		}
	}
	return sucess;
}

function bool ExecuteOnHover_IBtn(int i){
	int sucess = false;
	int rect =  ImgButton_getRect(i);
	if(ImgButton_getShow(i) != ST_Disabled){
		SamuTerm_CallOpExecute 
			(ImgButton_getExeHover(i), ImgButton_getHoverArg1(i),  
			ImgButton_getHoverArg2(i),  ImgButton_getHoverArg3(i));
		//localAmbientSound("SamuTerm/Select",127);
		sucess = true;
	}
	return sucess;
	
}

function bool ExecuteOnClick_sBtn(int i){
	int sucess = false;
	int rect = StrButton_getRect(i);
	int panel = StrButton_getParent(i);
	if(StrButton_getShow(i) != ST_Disabled){
		if(panel != -1){
			//log(s:"click!");
			if(Panel_StrBtnIsClicked(panel, i, FIRE1)){
				SamuTerm_CallOpExecute 
				(StrButton_getExecute(i), StrButton_getExeArg1(i),  
				StrButton_getExeArg2(i),  StrButton_getExeArg3(i));
				localAmbientSound("SamuTerm/Select",127);
				sucess = true;
			}
		}else if(RectIsClicked(rect,FIRE1)){
			SamuTerm_CallOpExecute 
				(StrButton_getExecute(i), StrButton_getExeArg1(i),  
				StrButton_getExeArg2(i),  StrButton_getExeArg3(i));
			//log(s:"You clicked a string button!");
			localAmbientSound("SamuTerm/Select",127);
			sucess = true;
		}
	}
		
	return sucess;
	
}

function void CheckClick(void){
	int rect, i = 0;
	bool inputDone = false;
	for(i = 0; i < comp_count[STCOMP_IBTN] && !inputDone; i++){
		inputDone = ExecuteOnClick_IBtn(i);
	}
	for(i = 0; i < comp_count[STCOMP_SBTN] && !inputDone; i++){
		inputDone = ExecuteOnClick_SBtn(i);
	}
	//log(s:"Click!");
}

function void CheckHover(void){
	int rect, panel, i;
	bool inputDone = false;
	
	bool nowHover = false;
	lasthover = comphover;
	comphover = -1;
	//log(s:"No Change. ", d:nowHover);
	
	for(i = 0; i < comp_count[STCOMP_IBTN] && !inputDone; i++){
		if(ImgButton_getShow(i) != ST_Disabled){
			rect = ImgButton_getRect(i);
			panel = ImgButton_GetParent(i);
			if(panel != -1){
				if(Panel_ImgBtnIsHovered(panel, i)){
					ExecuteOnHover_IBtn(i);
					comphover = i;
					inputDone = true;
					break;
				}
			} else {
				if(RectIsHovered(rect)){
					ExecuteOnHover_IBtn(i);
					comphover = i;
					inputDone = true;
					break;
				}
			}
		}
	}
	for(i = 0; i < comp_count[STCOMP_SBTN] && !inputDone; i++){
		if(StrButton_getShow(i) != ST_Disabled){
			rect = StrButton_getRect(i);
			panel = StrButton_GetParent(i);
			if(panel != -1){
				if(Panel_StrBtnIsHovered(panel, i)){
					comphover = i;
					inputDone = true;
					break;
				}
				
			} else if (RectIsHovered(rect)){
				comphover = i;
				inputDone = true;
				break;
			}
		}
	}
	if(lasthover != comphover && (comphover != -1))
		localAmbientSound("SamuTerm/Hover",127);
	//log(s:"Click!");
}

function void CheckPromptHover(void){
	int rect;
	bool inputDone = false, nowhover;
	
	
	//log(s:"No Change. ", d:nowHover);
	inputDone = IsHovering_ibtn(prompt_ok);
	if(!inputDone) inputDone = IsHovering_ibtn(prompt_yes); 
	if(!inputDone) inputDone = IsHovering_ibtn(prompt_no);
	
	nowhover = inputDone;
	
	if(nowHover && !onceHover){
		localAmbientSound("SamuTerm/Hover",127);
		oncehover = true;
	}else if (!nowHover && onceHover) 
		oncehover = false;
	//log(s:"Click!");
}

function bool IsHovering_ibtn(int i){
	bool res = false;
	int rect = ImgButton_getRect(i);
	if(RectIsHovered(rect) && ImgButton_getShow(i) != ST_Disabled){
		res = true;
	}
	return res;
}

script "SamuTerm_FreePlayer" (int play) NET{
	unlockPlayer(play);
	takeActorInventory(1000+play,"SamuTInv_UsingTerminal", 1);
}
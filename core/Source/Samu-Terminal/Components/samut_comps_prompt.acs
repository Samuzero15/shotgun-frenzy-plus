

/**
	A prompt. I ask you something, You answer, Simple.
*/

////////////////////////////////////////
// Getters from prompts!
////////////////////////////////////////

function int Prompt_GetRect(void){return comp_rects_once[STCOMP_PROMPT];}
function int Prompt_GetX(void){return RectX1(Prompt_GetRect());}
function int Prompt_GetY(void){return RectY1(Prompt_GetRect());}
function int Prompt_GetWidth(void){return RectWidth(Prompt_GetRect());}
function int Prompt_GetHeight(void){return RectHeight(Prompt_GetRect());}
function int Prompt_GetTag(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP1);}
function int Prompt_GetTitle(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP2);}
function int Prompt_GetWindowId(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP3);}
function int Prompt_GetValue(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP4);}
function int Prompt_GetColor(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP5);}
function str Prompt_GetBack(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP6);}
function bool Prompt_GetState(void){ return RectGetUserData(Prompt_GetRect(), ST_CPROP7);}
function bool Prompt_GetSourceTag(void){return RectGetUserData(Prompt_GetRect(), ST_CPROP8);}
function int Prompt_GetExecute_YesAction(void){return prompt_data[STPROMPT_DATA_ONTRUE_EXECUTE];}
function int Prompt_GetExecute_NoAction(void){return prompt_data[STPROMPT_DATA_ONFALSE_EXECUTE];}
function int Prompt_GetExeArg1_YesAction(void){return prompt_data[STPROMPT_DATA_ONTRUE_EXEARG1];}
function int Prompt_GetExeArg2_YesAction(void){return prompt_data[STPROMPT_DATA_ONTRUE_EXEARG2];}
function int Prompt_GetExeArg3_YesAction(void){ return prompt_data[STPROMPT_DATA_ONTRUE_EXEARG3];}
function int Prompt_GetExeArg1_NoAction(void){ return prompt_data[STPROMPT_DATA_ONFALSE_EXEARG1];}
function int Prompt_GetExeArg2_NoAction(void){ return prompt_data[STPROMPT_DATA_ONFALSE_EXEARG2];}
function int Prompt_GetExeArg3_NoAction(void){ return prompt_data[STPROMPT_DATA_ONFALSE_EXEARG3];}

///////////////////////////////////////
// Setters for teh prompts!
///////////////////////////////////////

function void Prompt_SetRect(int rect){ comp_rects_once[STCOMP_PROMPT] = rect;}
function void Prompt_SetTag(int tag){ SetRectUserData(Prompt_GetRect(), ST_CPROP1, tag);}
function void Prompt_SetTitle(str title){ SetRectUserData(Prompt_GetRect(), ST_CPROP2, title);}
function void Prompt_SetWindowId(int windowid){ SetRectUserData(Prompt_GetRect(), ST_CPROP3, windowid);}
function void Prompt_SetValue(int value){ SetRectUserData(Prompt_GetRect(), ST_CPROP4, value);}
function void Prompt_SetColor(int color){ SetRectUserData(Prompt_GetRect(), ST_CPROP5, color);}
function void Prompt_SetBack(str back){ SetRectUserData(Prompt_GetRect(), ST_CPROP6, back);}
function void Prompt_SetState(bool state){ SetRectUserData(Prompt_GetRect(), ST_CPROP7, state);}
function void Prompt_SetSourceTag(int tag){ SetRectUserData(Prompt_GetRect(), ST_CPROP8, tag);}
function void Prompt_SetExecute_YesAction(int execute){ prompt_data[STPROMPT_DATA_ONTRUE_EXECUTE] = execute;}
function void Prompt_SetExecute_NoAction(int execute){ prompt_data[STPROMPT_DATA_ONFALSE_EXECUTE] = execute;}

function void Prompt_SetExeArgs_YesAction(int arg1,int arg2,int arg3){ 
	prompt_data[STPROMPT_DATA_ONTRUE_EXEARG1] = arg1;
	prompt_data[STPROMPT_DATA_ONTRUE_EXEARG2] = arg2;
	prompt_data[STPROMPT_DATA_ONTRUE_EXEARG3] = arg3;
}

function void Prompt_SetExeArgs_NoAction(int arg1,int arg2,int arg3){ 
	prompt_data[STPROMPT_DATA_ONFALSE_EXEARG1] = arg1;
	prompt_data[STPROMPT_DATA_ONFALSE_EXEARG2] = arg2;
	prompt_data[STPROMPT_DATA_ONFALSE_EXEARG3] = arg3;
}

////////////////////////
// Prompts functions! //
////////////////////////

function void Prompt_Initialize (void){

	int w = 20, h = 12;
	int fw = 16.0 + (8.0*w);
	int fh = 16.0 + (8.0*h);
	
	int posx = FixedDiv(640.0, 2.0)-FixedDiv(fw, 2.0);
	int posy = FixedDiv(480.0, 2.0)-FixedDiv(fh, 2.0);
	int rect = RectCreate(0, 0, 0, 0);
	Prompt_SetRect(rect);
	Prompt_SetDefaultProps();
	Prompt_SetTag(200);

	prompt_data[STPROMPT_DATA_PANEL] = Panel_Add(posx, posy, w, h);
	Panel_SetAnchors(prompt_data[STPROMPT_DATA_PANEL], STPANEL_ANCHOR_CENTER, STPANEL_ANCHOR_TOP);
	Panel_SetTag(prompt_data[STPROMPT_DATA_PANEL], 200);
	Panel_SetTitle(prompt_data[STPROMPT_DATA_PANEL], Prompt_GetTitle());
	Panel_SetColor(prompt_data[STPROMPT_DATA_PANEL], Prompt_GetColor());
	Panel_SetHudId(prompt_data[STPROMPT_DATA_PANEL], ST_HID_PROMPT_BACK);
	Panel_SetTitleHudId(prompt_data[STPROMPT_DATA_PANEL], ST_HID_PROMPT_TITLE);
	Panel_SetClipHeight(prompt_data[STPROMPT_DATA_PANEL], fh - 24.0 - 32.0);

	ImgButton_SetHudId(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][0], ST_HID_PROMPT_SCRBTN_LEFT);
	ImgButton_SetHudId(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][1], ST_HID_PROMPT_SCRBTN_RIGHT);
	ImgButton_SetHudId(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][2], ST_HID_PROMPT_SCRBTN_DOWN);
	ImgButton_SetHudId(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][3], ST_HID_PROMPT_SCRBTN_UP);

	prompt_data[STPROMPT_DATA_OKBTN] = ImgButton_AddToPanelAbs(32.0, 32.0, prompt_data[STPROMPT_DATA_PANEL], FixedDiv(fw, 2.0)-24.0, fh-(16.0)-(32.0)); 
	ImgButton_SetImage(prompt_data[STPROMPT_DATA_OKBTN], "BTNOK");
	ImgButton_SetExecute(prompt_data[STPROMPT_DATA_OKBTN], STEXE_OKAY);
	ImgButton_setHudID(prompt_data[STPROMPT_DATA_OKBTN],ST_HID_PROMPT_BTNOK);
	ImgButton_setHoverImage(prompt_data[STPROMPT_DATA_OKBTN], "btnhov");

	prompt_data[STPROMPT_DATA_YESBTN] = ImgButton_DupToPanelAbs(prompt_data[STPROMPT_DATA_OKBTN], prompt_data[STPROMPT_DATA_PANEL], FixedDiv(fw, 2.0)-24.0-(48.0), fh-(16.0)-(32.0));
	ImgButton_SetImage(prompt_data[STPROMPT_DATA_YESBTN], "BTNYES");
	ImgButton_SetExecute(prompt_data[STPROMPT_DATA_YESBTN], STEXE_YES);
	ImgButton_setHudID(prompt_data[STPROMPT_DATA_YESBTN],ST_HID_PROMPT_BTNYES);

	prompt_data[STPROMPT_DATA_NOBTN] = ImgButton_DupToPanelAbs(prompt_data[STPROMPT_DATA_OKBTN], prompt_data[STPROMPT_DATA_PANEL], FixedDiv(fw, 2.0)-24.0+(48.0), fh-(16.0)-(32.0));
	ImgButton_SetImage(prompt_data[STPROMPT_DATA_NOBTN], "BTNNO");
	ImgButton_SetExecute(prompt_data[STPROMPT_DATA_NOBTN], STEXE_NO);
	ImgButton_setHudID(prompt_data[STPROMPT_DATA_NOBTN],ST_HID_PROMPT_BTNNO);

	prompt_data[STPROMPT_DATA_LABEL] = Label_AddToPanel(prompt_data[STPROMPT_DATA_PANEL]);
	Label_SetText(prompt_data[STPROMPT_DATA_LABEL],"This is a small message from the prompt.");
	Label_setAligns(prompt_data[STPROMPT_DATA_LABEL], HUD_ALIGN_CENTER, HUD_ALIGN_TOP);
	Label_SetColor(prompt_data[STPROMPT_DATA_LABEL], Prompt_GetColor());
	Label_SetFont(prompt_data[STPROMPT_DATA_LABEL],"SMALLFNT");
	Label_SetShow(prompt_data[STPROMPT_DATA_LABEL], true);
	Label_setHudID(prompt_data[STPROMPT_DATA_LABEL],ST_HID_PROMPT_LBL);
	Label_setTag(prompt_data[STPROMPT_DATA_LABEL],-9999);
	Label_setWrapWidth(prompt_data[STPROMPT_DATA_LABEL], (fw-16.0)>>16);

	Prompt_ResetOptions();
	Prompt_SetOptions(0);
	Prompt_SetState(false);
}

function void Prompt_SetOptions(int style)
{
	switch(style){
		case 1: // Yes or not answer.
			ImgButton_setTag(prompt_data[STPROMPT_DATA_YESBTN],Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]));
			ImgButton_setTag(prompt_data[STPROMPT_DATA_NOBTN],Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]));
			//ImgButton_setShow(prompt_data[STPROMPT_DATA_YESBTN], true);
			//ImgButton_setShow(prompt_data[STPROMPT_DATA_NOBTN], true);
			ImgButton_setTag(prompt_data[STPROMPT_DATA_OKBTN],-9999);
		break;
		default: // Accept answer.
			ImgButton_setTag(prompt_data[STPROMPT_DATA_YESBTN],-9999);
			ImgButton_setTag(prompt_data[STPROMPT_DATA_NOBTN],-9999);
			ImgButton_setTag(prompt_data[STPROMPT_DATA_OKBTN],Panel_GetTag(prompt_data[STPROMPT_DATA_PANEL]));
			//ImgButton_setShow(prompt_data[STPROMPT_DATA_OKBTN], true);
		break;
	}
}

function void Prompt_ResetOptions(void)
{
	ImgButton_setShow(prompt_data[STPROMPT_DATA_YESBTN], false);
	ImgButton_setShow(prompt_data[STPROMPT_DATA_NOBTN], false);
	ImgButton_setShow(prompt_data[STPROMPT_DATA_OKBTN], false);
	ImgButton_setTag(prompt_data[STPROMPT_DATA_YESBTN],-9999);
	ImgButton_setTag(prompt_data[STPROMPT_DATA_NOBTN],-9999);
	ImgButton_setTag(prompt_data[STPROMPT_DATA_OKBTN],-9999);
	Panel_SetVirtualOffset(prompt_data[STPROMPT_DATA_PANEL], 0.0, 0.0);
}


function void Prompt_Ask(str title, str msg, str color){
	Prompt_AskEx(title, msg, color, 0.0, 0.0);
}

function void Prompt_AskEx(str title, str msg, str color, int virt_w, int virt_h){
	Prompt_ResetOptions();
	Panel_SetTitle(prompt_data[STPROMPT_DATA_PANEL], title);
	Panel_SetColor(prompt_data[STPROMPT_DATA_PANEL], color);
	Panel_SetVirtualSize(prompt_data[STPROMPT_DATA_PANEL], virt_w, virt_h);
	Input_ClearBinds();
	Prompt_SetExecute_YesAction(0);
	Prompt_SetExecute_NoAction(0);
	Input_AddBind(BT_USE, STEXE_YES,0,0,0);
	Input_AddBind(BT_ALTATTACK, STEXE_NO,0,0,0);
	Input_AddBind(BT_CROUCH, STEXE_NO,0,0,0);
	
	Label_setText(prompt_data[STPROMPT_DATA_LABEL], msg);
	Label_setColor(prompt_data[STPROMPT_DATA_LABEL], color);
	Label_setShow(prompt_data[STPROMPT_DATA_LABEL], true);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][0], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][1], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][2], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][3], color);
	Prompt_SetOptions(1);

	localAmbientSound("SamuTerm/HopIn",127);
	//SamuTerm_CallOpExecute(STEXE_GTCAT,Prompt_GetTag(),0,0);
	Prompt_SetState(true);
	Cursor_MoveToRect(ImgButton_GetRect(prompt_data[STPROMPT_DATA_NOBTN]));
}

function void Prompt_ExecuteOnTrue(int cmd, int arg1, int arg2, int arg3){
	Prompt_SetExecute_YesAction(cmd);
	Prompt_SetExeArgs_YesAction(arg1,arg2,arg3);
}

function void Prompt_ExecuteOnFalse(int cmd, int arg1, int arg2, int arg3){
	Prompt_SetExecute_NoAction(cmd);
	Prompt_SetExeArgs_NoAction(arg1,arg2,arg3);
}

function void Prompt_Notify(str title, str msg, str color){
	Prompt_ResetOptions();
	Panel_SetTitle(prompt_data[STPROMPT_DATA_PANEL], title);
	Panel_SetColor(prompt_data[STPROMPT_DATA_PANEL], color);
	Input_AddBind(BT_USE, STEXE_OKAY,0,0,0);

	Label_setText(prompt_data[STPROMPT_DATA_LABEL], msg);
	Label_setColor(prompt_data[STPROMPT_DATA_LABEL], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][0], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][1], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][2], color);
	ImgButton_SetColor(panels_scrollbuttons[prompt_data[STPROMPT_DATA_PANEL]][3], color);
	Prompt_SetOptions(0);
	
	//SamuTerm_CallOpExecute(STEXE_GTCAT,Prompt_GetTag(),0,0);
	Prompt_SetState(true);
	Cursor_MoveToRect(ImgButton_GetRect(prompt_data[STPROMPT_DATA_OKBTN]));
}

function void Prompt_SetDefaultProps (void){
		Prompt_SetTitle("Prompt Title");
		Prompt_SetState(false);
		Prompt_SetColor(CR_BRICK);
}

/**	
	The Label contains a string. And nothing more.
*/


////////////////////////////////////////
// Getters from Labels!
////////////////////////////////////////

function int Label_getRect(int bid){return comp_rects_many[STCOMP_LBL][bid];}
function int Label_getX(int bid){return RectX1(Label_getRect(bid));}
function int Label_getY(int bid){return RectY1(Label_getRect(bid));}
function int Label_getTag(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP1);}
function str Label_getText(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP2);}
function int Label_getShow(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP3);}
function str Label_getFont(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP4);}
function int Label_getColor(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP5);}
function int Label_getParent(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP6);}
function int Label_getParentId(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP7);}
function int Label_getAlignX(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP11);}
function int Label_getAlignY(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP12);}
function int Label_getHudId(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP8);}
function int Label_getWrapWidth(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP9);}
function int Label_getOffsetX(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP13);}
function int Label_getOffsetY(int bid){return RectGetUserData(Label_getRect(bid), ST_CPROP14);}
function bool Label_isPanelAbsolute(int bid){
	return Label_getParent(bid) != -1 && 
	panels_comps_index[Label_getParent(bid)][Label_getParentId(bid)][STPANEL_COMPDATA_ISABSOLUTE];
}

///////////////////////////////////////
// Setters from Labels!
///////////////////////////////////////

function void Label_setRect(int bid, int rect){comp_rects_many[STCOMP_LBL][bid] = rect;}
function void Label_setTag(int bid, int tag){SetRectUserData(Label_getRect(bid), ST_CPROP1, tag);}
function void Label_setPosition(int bid, int x, int y){SetRectPosition(Label_getRect(bid), x, y);}
function void Label_setText(int bid, str text){SetRectUserData(Label_getRect(bid), ST_CPROP2, text);}
function void Label_setShow(int bid, bool visible){SetRectUserData(Label_getRect(bid), ST_CPROP3, visible);}
function void Label_setFont(int bid, str font){SetRectUserData(Label_getRect(bid), ST_CPROP4, Font);}
function void Label_setColor(int bid, int color){SetRectUserData(Label_getRect(bid), ST_CPROP5, color);}
function void Label_setParent(int bid, int parent){SetRectUserData(Label_getRect(bid), ST_CPROP6, parent);}
function void Label_setHudID(int bid, int hudId){SetRectUserData(Label_getRect(bid), ST_CPROP8, hudId);}
function void Label_setWrapWidth(int bid, int wrap){SetRectUserData(Label_getRect(bid), ST_CPROP9, wrap);}
function void Label_setParentId(int bid, int pid){SetRectUserData(Label_getRect(bid), ST_CPROP7, pid);}

function void Label_setAligns(int bid, int alx, int aly){
	SetRectUserData(Label_getRect(bid), ST_CPROP11, alx);
	SetRectUserData(Label_getRect(bid), ST_CPROP12, aly);
}

function void Label_setOffsets(int bid, int offx, int offy){
	SetRectUserData(Label_getRect(bid), ST_CPROP13, offx);
	SetRectUserData(Label_getRect(bid), ST_CPROP14, offy);
}


/////////////////////////
// Label functions!    //
/////////////////////////

function int Label_Add (int x, int y){
	int id = Component_Allocate(STCOMP_LBL, x, y, 0.0, 0.0);
	if(id != -1){
		Label_SetDefaultProps(id);
	}
	return id;
}

function int Label_AddGrid(int grid, int row, int col){return Label_AddGridOff(grid, row, col, 0.0, 0.0);}
function int Label_AddGridOff(int grid, int row, int col, int offx, int offy){
	return Label_Add( Grid_GetX(grid, row, col) + offx, Grid_GetY(grid, row, col) + offy);
}

function int Label_AddCard(int grid, int cell){return Label_AddCardOff(grid, cell, 0.0, 0.0);}
function int Label_AddCardOff(int grid, int cell, int offx, int offy){
	return Label_Add(Card_GetX(grid, cell) + offx, Card_GetY(grid, cell) + offy);// Stupid limited ACS.
}

//Duplicate constructors.
//This will make another component with the same properties saved with Component_SaveProps function.

//A time saver if you dont like to re-define the component again and again.
function int Label_Dup(int copy, int x, int y){
	int id = Component_Allocate(STCOMP_LBL, x, y, 0.0, 0.0);
	if(id != -1){
		Component_Save(Label_getRect(copy));
		Component_Load(id, Label_getRect(id));
	}
	return id;
}

function int Label_DupGrid(int copy, int grid, int row, int col){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	
	int l = Label_Dup(copy, x, y);
	return l;
}

function int Label_DupCard(int copy, int grid, int cell){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);
	
	int l = Label_Dup(copy, x, y);
	return l;
}

function int Label_DupGridOff(int copy, int grid, int row, int col, int offx, int offy){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	
	int l = Label_Dup(copy, x + offx, y + offy);
	return l;
}

function int Label_DupCardOff(int copy, int grid, int cell, int offx, int offy){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);

	int l = Label_Dup(copy, x + offx, y + offy);
	return l;
}

// For Re-positioning within the layout.
function void Label_SetPosToGridOff(int i, int grid, int row, int col, int offx, int offy){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	Label_setPosition(i, x + offx, y + offy);
}

function void Label_SetPosToCardOff(int i, int card, int cell, int offx, int offy){
	int x = Card_GetX(card, cell);
	int y = Card_GetY(card, cell);
	
	Label_setPosition(i, x + offx, y + offy);
}

function void Label_SetPosToGrid(int i, int grid, int row, int col){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	Label_setPosition(i, x, y);
}

function void Label_SetPosToCard(int i, int card, int cell){
	int x = Card_GetX(card, cell);
	int y = Card_GetY(card, cell);
	Label_setPosition(i, x, y);
}

function int Label_AddToPanelAbsPos (int panel, int pos, int x, int y) {return Label_AddToPanelEX (panel, pos, x, y, true);}
function int Label_AddToPanelAbs (int panel, int x, int y) {return Label_AddToPanelEX (panel, -1, x, y, true);}
function int Label_AddToPanelPosOff (int panel, int pos, int offx, int offy) {return Label_AddToPanelEX (panel, pos, offx, offy, false);}
function int Label_AddToPanelOff (int panel, int offx, int offy) {return Label_AddToPanelEX (panel, -1, offx, offy, false);}
function int Label_AddToPanelPos (int panel, int pos) 				{return Label_AddToPanelEX (panel, pos, 0.0, 0.0, false);}
function int Label_AddToPanel (int panel) 							{return Label_AddToPanelEX (panel, -1, 0.0, 0.0, false);}
function int Label_AddToPanelEX (int panel, int pos, int offx, int offy, bool absolute){
	int id = Component_Allocate(STCOMP_LBL, 0.0, 0.0, 0.0, 0.0);
	if(id != -1){
		Label_SetDefaultProps(id);
		Label_SetParent(id, panel);
		
		Panel_AddCompEx(panel, STCOMP_LBL, id, pos, offx, offy, absolute);
		//Label_setAligns(id,alX,alY);
	}
	return id;
}
function int Label_DupToPanelAbsPos (int copy, int panel, int pos, int x, int y) {return Label_AddToPanelEX (panel, pos, x, y, true);}
function int Label_DupToPanelAbs (int copy, int panel, int x, int y) {return Label_AddToPanelEX (panel, -1, x, y, true);}
function int Label_DupToPanelPosOff (int copy, int panel, int pos, int offx, int offy) {return Label_DupToPanelEX (copy, panel, pos, offx, offy, false);}
function int Label_DupToPanelOff (int copy, int panel, int offx, int offy) {return Label_DupToPanelEX (copy, panel, -1, offx, offy, false);}
function int Label_DupToPanelPos (int copy, int panel, int pos) 			  {return Label_DupToPanelEX (copy, panel, pos, 0.0, 0.0, false);}
function int Label_DupToPanel (int copy, int panel) 						  {return Label_DupToPanelEX (copy, panel, -1, 0.0, 0.0, false);}
function int Label_DupToPanelEX(int copy, int panel, int pos, int offx, int offy, bool absolute){
	int comp_rect = Label_getRect(copy);
	int id = Component_Allocate(STCOMP_LBL, RectX1(comp_rect), RectY1(comp_rect), RectWidth(comp_rect), RectHeight(comp_rect));
	if(id != -1){
		Component_Save(comp_rect);
		Component_Load(id, Label_getRect(id));
		Label_SetParent(id, panel);

		Panel_AddCompEx(panel, STCOMP_LBL, id, pos, offx, offy, absolute);
	}
	return id;
}

function void Label_SetDefaultProps(int i){
	//print(s:"Default props");
		Label_setText(i,"This is a label");
		Label_setShow(i, false);
		Label_setFont(i, "SMALLFNT");
		Label_setColor(i, CR_WHITE);
		Label_setAligns(i,HUD_ALIGN_CENTER,HUD_ALIGN_CENTER);
		Label_setWrapWidth(i,0);
		Label_setHudid(i, ST_HID_LBL + i);
		Label_setOffsets(i, 0.0, 0.0);
		Label_setParent(i, -1);
		Label_setTag(i, -1);
}

/**	
	The Image contains a string to a graphic. And nothing more.
*/

#include "samut_cgnsf_imgs.acs"

function int Image_Add (int x, int y, str file){
	int id = Component_Allocate(STCOMP_IMG, x, y, 0.0, 0.0);
	if(id != -1){
		Image_SetDefaultProps(id);
		Image_setFile(id,file);
	}
	return id;
}

function int Image_AddGrid(int grid, int row, int col, str file){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	
	int id = Component_Allocate(STCOMP_IMG, x, y, 0.0, 0.0);
	if(id != -1){
		Image_SetDefaultProps(id);
		Image_setFile(id,file);
	}
	return id;
}

function int Image_AddCard(int grid, int cell, str file){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);
	
	int id = Component_Allocate(STCOMP_IMG, x, y, 0.0, 0.0);
	if(id != -1){
		Image_SetDefaultProps(id);
		Image_setFile(id,file);
	}
	return id;
}

function int Image_AddCardOff(int grid, int cell, str file, int offx, int offy){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);
	
	int id = Component_Allocate(STCOMP_IMG, x + offx, y + offy, 0.0, 0.0);
	if(id != -1){
		Image_SetDefaultProps(id);
		Image_setFile(id,file);
	}
	return id;
}

function void Image_SetPosToGridOff(int i, int grid, int row, int col, int offx, int offy){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	Image_setPosition(i, x + offx, y + offy);
}

function void Image_SetPosToCardOff(int i, int card, int cell, int offx, int offy){
	int x = Card_GetX(card, cell);
	int y = Card_GetY(card, cell);
	
	Image_setPosition(i, x + offx, y + offy);
}

function void Image_SetPosToGrid(int i, int grid, int row, int col){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	Image_setPosition(i, x, y);
}

function void Image_SetPosToCard(int i, int card, int cell){
	int x = Card_GetX(card, cell);
	int y = Card_GetY(card, cell);
	
	Image_setPosition(i, x, y);
}

//Duplicate constructors.
//This will make another component with the same properties saved with Component_SaveProps function.

//A time saver if you dont like to re-define the component again and again.
function int Image_AddDup(int x, int y, int w, int h){
	int id = Component_Allocate(STCOMP_IMG, x, y, w, h);
	if(id != -1){
		Component_Load(id, Image_getRect(id));
	}
	
	return id;
}

function int Image_AddDupGrid(int grid, int row, int col, int w, int h){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	
	int id = Component_Allocate(STCOMP_IMG, x, y, w, h);
	if(id != -1){
		Component_Load(id, Image_getRect(id));
		Image_setPosition(id, x, y);
	}
	return id;
}

function int Image_AddDupCard(int grid, int cell, int w, int h){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);
	
	int id = Component_Allocate(STCOMP_IMG, x, y, w, h);
	if(id != -1){
		Component_Load(id, Image_getRect(id));
		Image_setPosition(id, x, y);
	}
	return id;
}

function int Image_AddToPanelAbs (str file, int panel, int offx, int offy) {return Image_AddToPanelEX (file, panel, -1, offx, offy, true);}
function int Image_AddToPanelOff (str file, int panel, int offx, int offy) {return Image_AddToPanelEX (file, panel, -1, offx, offy, false);}
function int Image_AddToPanelPos (str file, int panel, int pos) 				{return Image_AddToPanelEX (file, panel, pos, 0.0, 0.0, false);}
function int Image_AddToPanel (str file, int panel) 							{return Image_AddToPanelEX (file, panel, -1, 0.0, 0.0, false);}
function int Image_AddToPanelEX (str file, int panel, int pos, int offx, int offy, bool absolute){
	int id = Component_Allocate(STCOMP_IMG, 0.0, 0.0, 0.0, 0.0);
	if(id != -1){
		Image_SetDefaultProps(id);
		Image_SetParent(id, panel);
		Image_setFile(id,file);
		
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][0] = STCOMP_IMG;
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][1] = id;
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][2] = absolute;
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][3] = false;
		Panel_AddCompEx(panel, Image_getRect(id), pos, offx, offy, absolute);
		//Image_setAligns(id,alX,alY);
	}
	return id;
}

function int Image_DupToPanelAbs (int copy, int panel, int offx, int offy) {return Image_DupToPanelEX (copy, panel, -1, offx, offy, true);}
function int Image_DupToPanelOff (int copy, int panel, int offx, int offy) {return Image_DupToPanelEX (copy, panel, -1, offx, offy, false);}
function int Image_DupToPanelPos (int copy, int panel, int pos) 			  {return Image_DupToPanelEX (copy, panel, pos, 0.0, 0.0, false);}
function int Image_DupToPanel (int copy, int panel) 						  {return Image_DupToPanelEX (copy, panel, -1, 0.0, 0.0, false);}
function int Image_DupToPanelEX(int copy, int panel, int pos, int offx, int offy, bool absolute){
	int id = Component_Allocate(STCOMP_IMG, 0.0, 0.0, 0.0, 0.0);
	if(id != -1){
		Component_Save(Image_getRect(copy));
		Component_Load(id, Image_getRect(id));
		Image_SetParent(id, panel);

		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][0] = STCOMP_IMG;
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][1] = id;
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][2] = absolute;
		panels_comps_index[panel][Panel_GetNumberOfComps(panel)][3] = false;
		Panel_AddCompEx(panel, Image_getRect(id), pos, offx, offy, absolute);
	}
	return id;
}

function void UpdateImage(int bid, int condit){
	if(Image_getParent(bid) > -1){
		Image_setShow(bid, condit);
	}
}

function void Image_SetDefaultProps(int i){
		Image_setFile		(i,"");
		Image_setShow		(i, false);
		Image_setAligns		(i,HUD_ALIGN_LEFT,HUD_ALIGN_TOP);
		Image_setOffsets	(i, 0.0, 0.0);
		Image_setParent		(i, -1);
		Image_setHudid		(i, ST_HID_IMG + i);
		Image_setTag		(i, -1);
		Image_SetScale		(i, 1.0, 1.0);
}

function bool ImgButton_CheckHover(int which){
	return ImgButton_getShow(which) && RectIsHovered(ImgButton_GetRect(which));
}

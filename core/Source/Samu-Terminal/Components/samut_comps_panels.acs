
#include "samut_cgnsf_panels.acs"

function int Panel_Add(int x, int y, int wx8, int hx8){
	int i = panel_count;
	
	int fw = 16.0 + (8.0*wx8);
	int fh = 16.0 + (8.0*hx8);
	
	//print(s:StrSfPfFixed("Width: ", fw, " pixels"), s:" ", s:StrSfPfFixed("Height: ", fh, " pixels"));
	
	if(i < ST_NCOMPS){
		int rect = RectCreate(x,y,fw,fh);
		Panel_setRect(i,rect);
		Panel_SetDefaultProps(i);
		panel_count++;
	}else log(s:"No more panels to add!");
	
	return i;
}

function void Panel_AddCompEX(int p, int type, int id, int numb_pos, int offx, int offy, bool absolute){
	// The full function
	//log(s:"Panel number of components: ", d:Panel_GetNumberOfComps(p));
	int panel_comp_stack = Panel_GetNumberOfComps(p);
	int rect = Component_getRect(type, id);
	panels_comps_index[p][panel_comp_stack][STPANEL_COMPDATA_TYPE] = type;
	panels_comps_index[p][panel_comp_stack][STPANEL_COMPDATA_ID] = id;
	panels_comps_index[p][panel_comp_stack][STPANEL_COMPDATA_ISABSOLUTE] = absolute;
	panels_comps_index[p][panel_comp_stack][STPANEL_COMPDATA_SHOWSTATUS] = false;
	panels_comps_index[p][panel_comp_stack][STPANEL_COMPDATA_ISANCHORED] = (!absolute || (absolute && numb_pos > -1));

	int count = numb_pos <= -1 ? (panel_comp_stack - Panel_GetNumberOfCompsAbs(p)) : numb_pos;
	int pos[2];
	pos[0] = Panel_getClipX1(p);
	pos[1] = Panel_getClipY1(p); 
	int spacing[2];
	spacing[0] = Panel_GetSpacingX(p);
	spacing[1] = Panel_GetSpacingY(p); 
	int columns = Panel_GetColumns(p);
	/*log(s:"Virtual size: (", f:virtual_size[0], s:", ", f:virtual_size[1], s:")");
	log(s:"Spacing Anchored: (", f:spacing_anchored[0], s:", ", f:spacing_anchored[1], s:")");
	log(s:"Component base position Anchored: (", f:comp_pos[0], s:", ", f:comp_pos[1], s:")");
	*/
	if(absolute){
		if(numb_pos > -1)
			SetRectPosition(rect, pos[0] + spacing[0]*(numb_pos%columns) + offx, pos[1] + spacing[1]*(numb_pos/columns) + offy);
		else SetRectPosition(rect, pos[0] + offx, pos[1] + offy);
	} else{
		SetRectPosition(rect, 
		pos[0] + spacing[0]*(count%columns) + offx, 
		pos[1] + spacing[1]*(count/columns) + offy);
	}
	
	Panel_AddCompNumber(p);
	if(absolute) Panel_AddCompAbsNumber(p);
}

function void Panel_SetDefaultProps(int i){
	Panel_ResetCompNumber(i);
	Panel_ResetCompAbsNumber(i);
	Panel_setColor(i,CR_WHITE);
	Panel_setShow(i, false);
	Panel_setTag(i,0);
	Panel_setHudId(i, ST_HID_PAN_BACKG + i);
	Panel_SetTitleHudId(i, ST_HID_PAN_TITLE + i);
	Panel_SetScrollAmount(i, 1.0, 1.0);
	Panel_SetVirtualSize(i, 0.0, 0.0);
	Panel_SetColumns(i, 1);
	Panel_SetTitleAnchors(i, STPANEL_ANCHOR_CENTER, STPANEL_ANCHOR_TOP);
	Panel_SetAnchors(i, STPANEL_ANCHOR_LEFT, STPANEL_ANCHOR_TOP);
	Panel_SetClipRect(i, -1, -1, -1, -1);
	Panel_SetScrollSpace(i, 24.0);
	Panel_SetScrollSpeedDiv(i, 6.0);
	Panel_SetScrollSpeedCap(i, 4.0);
}

function void Panel_MakeScrollButton(int i, int id, int x, int y, int scrollx, int scrolly, int img){
	int btn = ImgButton_Add(x, y, 8.0, 8.0);
	ImgButton_setExecute(btn, STEXE_PANEL_SCROLL);
	ImgButton_setArgs(btn, i, scrollx, scrolly);
	ImgButton_setShow(btn, true);
	ImgButton_setImage(btn, img);
	ImgButton_setHudId(btn, ST_HID_PAN_FOREG + btn);
	panels_scrollbuttons[i][id] = btn;
}

function bool Panel_ImgBtnIsClicked(int panel, int ibtn, int key){
	return Panel_ButtonIsClicked(panel, Imgbutton_GetX1Offseted(ibtn), Imgbutton_GetY1Offseted(ibtn), 
		Imgbutton_GetX2Offseted(ibtn), Imgbutton_GetY2Offseted(ibtn), key);
}

function bool Panel_ImgBtnIsHovered(int panel, int ibtn)
{
	return Panel_ButtonIsClicked(panel, Imgbutton_GetX1Offseted(ibtn), Imgbutton_GetY1Offseted(ibtn), 
		Imgbutton_GetX2Offseted(ibtn), Imgbutton_GetY2Offseted(ibtn), -1);
}

function bool Panel_StrBtnIsClicked(int panel, int ibtn, int key){
	return Panel_ButtonIsClicked(panel, Strbutton_GetX1Offseted(ibtn), Strbutton_GetY1Offseted(ibtn), 
		Strbutton_GetX2Offseted(ibtn), Strbutton_GetY2Offseted(ibtn), key);
}

function bool Panel_StrBtnIsHovered(int panel, int ibtn)
{
	return Panel_ButtonIsClicked(panel, Strbutton_GetX1Offseted(ibtn), Strbutton_GetY1Offseted(ibtn), 
		Strbutton_GetX2Offseted(ibtn), Strbutton_GetY2Offseted(ibtn), -1);
}

function bool Panel_ButtonIsClicked(int panel, int btnx1, int btny1, int btnx2, int btny2, int key)
{
	int cursor[2] = {CursorX(), CursorY()};
	int pan_clip[4] = { // Get the clipping points of the panel.
		Panel_GetClipX1(panel),
		Panel_GetClipY1(panel),
		Panel_GetClipX2(panel),
		Panel_GetClipY2(panel)
	};
	bool res;
	bool intersects = !(pan_clip[0] >= btnx2 ||btnx1 >= pan_clip[2] || pan_clip[1] >= btny2 || btny1 >= pan_clip[3]);
	//log(s:"Img Btn Offset: ( ", f:btnx1, s:", ", f:btny1, s:", ", f:btnx2, s:", ", f:btny2, s:" ) Intersercts? ", d:intersects);
	if(intersects){
		int clip_rect[4] = {
		max(pan_clip[0], btnx1),
		max(pan_clip[1], btny1),
		min(pan_clip[2], btnx2),
		min(pan_clip[3], btny2)
		};
		//log(s:" Intersected rectangle: ", f:abs(clip_rect[0] - clip_rect[2]), s:"x", f:abs(clip_rect[1] - clip_rect[3]));
		bool cursor_inside = cursor[0] > clip_rect[0] && cursor[0] < clip_rect[2] && cursor[1] > clip_rect[1] && cursor[1] < clip_rect[3];
		//log(s:" Cursor: ( ", f:cursor[0], s:",", f:cursor[1], s:") \n Cursor Inside? ", d:cursor_inside);
		if(key == -1){
			res = cursor_inside;
			/*if(res){
				
			}*/
		}else {
			res = cursor_inside && KeyPressed(key);
		}
	}else{
		res = false;
	}
	return res;
}

Function bool Panel_ContainsComponent(int panel, int btnx1, int btny1, int btnx2, int btny2){
	int pan_clip[4] = { // Get the clipping points of the panel.
		Panel_GetClipX1(panel),
		Panel_GetClipY1(panel),
		Panel_GetClipX2(panel),
		Panel_GetClipY2(panel)
	};
	return pan_clip[2] >= btnx1 && pan_clip[0] <= btnx1 &&  
	pan_clip[2] >= btnx2 && pan_clip[0] <= btnx2 &&  
	pan_clip[3] >= btny1 && pan_clip[1] <= btny1 &&  
	pan_clip[3] >= btny2 && pan_clip[1] <= btny2;
}

Function bool Panel_IntersectsImgButton (int panel, int ibtn){
	return Panel_ContainsComponent(panel, Imgbutton_GetX1Offseted(ibtn), Imgbutton_GetY1Offseted(ibtn), 
	Imgbutton_GetX2Offseted(ibtn), Imgbutton_GetY2Offseted(ibtn));
}

Function bool Panel_IntersectsStrButton (int panel, int ibtn){
	return Panel_ContainsComponent(panel, Strbutton_GetX1Offseted(ibtn), Strbutton_GetY1Offseted(ibtn), 
	Strbutton_GetX2Offseted(ibtn), Strbutton_GetY2Offseted(ibtn));
}

function void Panel_UpdateAnchorPoint(int pan){
	int x = Panel_GetVirtualOffsetX(pan), y = Panel_GetVirtualOffsetY(pan);
	int columns = Panel_GetColumns(pan) == 0 ? 1 : Panel_GetColumns(pan);
	int spacing[2] = {Panel_GetSpacingX(pan), Panel_GetSpacingY(pan)};
	int virtual_size[2] = {Panel_GetVirtualWidth(pan), Panel_GetVirtualHeight(pan)};
	int clip_size[2] = {Panel_getClipWidth(pan), Panel_getClipHeight(pan)};
	int count = Panel_GetNumberOfComps(pan) - Panel_GetNumberOfCompsAbs(pan);
	int anchor_off[2] = {Panel_GetAnchorPointOffX(pan), Panel_GetAnchorPointOffY(pan)};
	switch(Panel_GetAnchorX(pan)){
		case STPANEL_ANCHOR_CENTER: 
			x = x + (FixedDiv(virtual_size[0]+clip_size[0], 2.0)-(FixedDiv(spacing[0]*columns,2.0))) + anchor_off[0]; 
			//log(s:"Position: (", f:x, s:", ", f:y, s:") ");
		break;
		case STPANEL_ANCHOR_LEFT: 
			x = x + anchor_off[0];
		break;
		case STPANEL_ANCHOR_RIGHT: 
			x = x + ((virtual_size[0]+clip_size[0])-(spacing[0]*columns)) + anchor_off[0];
		break;
	}
	switch(Panel_GetAnchorY(pan)){
		case STPANEL_ANCHOR_CENTER: 
			y = y + (FixedDiv(virtual_size[1]+clip_size[1], 2.0)-(FixedDiv(spacing[1]*(count/(columns)),2.0))) + anchor_off[1]; 
			//log(s:"Position: (", f:x, s:", ", f:y, s:") ");
		break;
		case STPANEL_ANCHOR_TOP: 
			y = y + anchor_off[1];
		break;
		case STPANEL_ANCHOR_BOTTOM: 
			y = y + ((virtual_size[1]+clip_size[1])-(spacing[1]*(count/(columns)))) + anchor_off[1];
		break;
	}
	Panel_SetAnchorPoint(pan, x, y);
}

function void Panel_UpdateScrollButtons(int pan){
	int btn_up = panels_scrollbuttons[pan][0];
	int btn_down = panels_scrollbuttons[pan][1];
	int btn_left = panels_scrollbuttons[pan][2];
	int btn_right = panels_scrollbuttons[pan][3];
	
	int pan_show = Panel_getShow(pan);
	int pan_color = Panel_getColor(pan);
	ImgButton_setShow(btn_up, pan_show);
	ImgButton_setShow(btn_down, pan_show);
	ImgButton_setShow(btn_left, pan_show);
	ImgButton_setShow(btn_right, pan_show);
	if(!pan_show) return;
	
	int pan_tag = Panel_GetTag(pan);
	ImgButton_setTag(btn_up, pan_tag);
	ImgButton_setTag(btn_down, pan_tag);
	ImgButton_setTag(btn_left, pan_tag);
	ImgButton_setTag(btn_right, pan_tag);
	ImgButton_setColor(btn_up, pan_color);
	ImgButton_setColor(btn_down, pan_color);
	ImgButton_setColor(btn_left, pan_color);
	ImgButton_setColor(btn_right, pan_color);

	int pan_x = Panel_getX(pan);
	int pan_y = Panel_getY(pan);
	int pan_h = Panel_getHeight(pan);
	int pan_w = Panel_getWidth(pan);
	ImgButton_setPosition(btn_up, pan_x, pan_y+8.0);
	ImgButton_setPosition(btn_down, pan_x, pan_y+(pan_h-16.0));
	ImgButton_setPosition(btn_left, pan_x+8.0, pan_y+(pan_h-8.0));
	ImgButton_setPosition(btn_right, pan_x+(pan_w-16.0), pan_y+(pan_h-8.0));

	int scrollx = Panel_GetScrollX(pan);
	int scrolly = Panel_GetScrollY(pan);
	int virt_w = Panel_GetVirtualWidth(pan);
	int virt_h = Panel_GetVirtualHeight(pan);
	int virt_x = Panel_GetVirtualOffsetX(pan);
	int virt_y = Panel_GetVirtualOffsetY(pan);
	ImgButton_setArgs(btn_up, pan, 0, scrolly);
	ImgButton_setShow(btn_up, virt_y == 0 ? false : true);
	ImgButton_setArgs(btn_down, pan, 0, -scrolly);
	ImgButton_setShow(btn_down, virt_y == -virt_h ? false : true);
	ImgButton_setArgs(btn_left, pan, scrollx, 0);
	ImgButton_setShow(btn_left, virt_x == 0 ? false : true);
	ImgButton_setArgs(btn_right, pan, -scrollx, 0);
	ImgButton_setShow(btn_right, virt_x == -virt_w ? false : true);
}

function str Panel_GenerateBack(int i){
	str btnstring = "A";
	int xpan = Panel_GetX(i);
	int ypan = Panel_GetY(i);
	//log(s:"Panel size: (",f:Panel_GetWidth(i), s:", ",f:Panel_GetHeight(i), s:")");
	int w = FixedDiv(Panel_GetWidth(i)-16.0, 8.0)>>16;
	int h = FixedDiv(Panel_GetHeight(i)-16.0, 8.0)>>16;
	//print(s:"w: ", d:w, s:", h: ", d:h);
	int xbtn = xpan;
	int ybtn = xpan;
	int xscroll = Panel_GetScrollX(i);
	int yscroll = Panel_GetScrollY(i);
	
	if(w != 0){
		for(int j = 0; j < w; j++){
			btnstring = StrAdd(btnstring, "B");
		}
	}
	btnstring = StrAdd(btnstring, "C");
	ybtn += 8.0;
	
	if(w != 0 && h != 0){
		for(int y = 0; y < h; y++){
		if	(y == 0) {
			//btnstring = StrAdd(btnstring, "\nJ");
			//log(s:"Btn Pos: (",f:xbtn, s:", ",f:ybtn, s:")");
			Panel_MakeScrollButton(i, 0, xbtn, ybtn, 0, yscroll, "WP11");
		}   
		else if	(y == h-1){
			//btnstring = StrAdd(btnstring, "\nK");
			ybtn += 8.0*(h-1);
			//log(s:"Btn Pos: (",f:xbtn, s:", ",f:ybtn, s:")");
			Panel_MakeScrollButton(i, 1, xbtn, ybtn,  0, -yscroll, "WP10");
		}
		btnstring = StrAdd(btnstring, "\nD");
			for(int x = 0; x < w; x++){
				btnstring = StrAdd(btnstring, "E");
			}
		btnstring = StrAdd(btnstring, "F");
		}
	}
	
	btnstring = StrAdd(btnstring, "\nG");
	ybtn += 8.0;
	if(w != 0){
		
		for(int k = 0; k < w; k++){
			if (k == 0){
				//btnstring = StrAdd(btnstring, "L");
				xbtn += 8.0;
				//log(s:"Btn Pos: (",f:xbtn, s:", ",f:ybtn, s:")");
				Panel_MakeScrollButton(i, 2, xbtn, ybtn, xscroll, 0, "WP12");
			} 
			else if (k == w-1){
				//btnstring = StrAdd(btnstring, "M");
				xbtn += 8.0*(w-1);
				//log(s:"Btn Pos: (",f:xbtn, s:", ",f:ybtn, s:")");
				Panel_MakeScrollButton(i, 3, xbtn, ybtn, -xscroll, 0, "WP13");
			}
			btnstring = StrAdd(btnstring, "H");
		}
	}
	btnstring = StrAdd(btnstring, "I");
	
	tmp[2] = btnstring;
	Panel_setBack(i, btnstring);
	Panel_UpdateScrollButtons(i);
	return btnstring;
}

function bool RectContainsPoint (int x, int y, int rx1, int rx2, int ry1, int ry2){
	bool contains = x >= rx1 && x <= rx2 && y >= ry1 && y <= ry2;
	/*log(s:"rx1=",f:rx1, s:", rx2=", f:rx2, s:", ry1=", f:ry1, s:", ry2=", f:ry2,
	 s:"; x=", f:x, s:", y=", f:y, s:", Cointains? ",d:contains);
	 */
	return contains;
}

function int Panel_CalcScrollSpeed(int pan, int cursor_point, int axis_point){
	int divider = Panel_GetScrollSpeedDiv(pan);
	int cap = Panel_GetScrollSpeedCap(pan);
	int scrollspeed = FixedDiv(max(cursor_point, axis_point)-min(cursor_point, axis_point), divider);
	if(cap <= 0.0){
		return scrollspeed;
	}
	return clamp(scrollspeed, 0.0, cap);
}

function void Panel_UpdateScrollAutomove(int pan){
	if(!Panel_GetScrollAutomove(pan)) return;
	int pan_rect = Panel_GetRect(pan);
	if(!RectIsHovered(pan_rect)) return;
	int scroll_pan[2] = {0.0, 0.0};
		//log(s:"Y1 = ",f:RectY1(pan_rect), s:", Y1+8.0 = ", f:(RectY1(pan_rect) + 24.0), s:", Cursor = ", f:CursorY());
	int cursor[2] = {CursorX(),CursorY()};
	int padding = 8.0;
	int scrollzone = padding + Panel_GetScrollSpace(pan);
	int rects_threshold[4][4] ={
		{RectX1(pan_rect) + padding, RectX1(pan_rect) + scrollzone, RectY1(pan_rect) + padding, RectY2(pan_rect) - padding},
		{RectX2(pan_rect) - scrollzone, RectX2(pan_rect) - padding, RectY1(pan_rect) + padding, RectY2(pan_rect) - padding},
		{RectX1(pan_rect) + padding, RectX2(pan_rect) - padding, RectY1(pan_rect) + padding, RectY1(pan_rect) + scrollzone},
		{RectX1(pan_rect) + padding, RectX2(pan_rect) - padding, RectY2(pan_rect) - scrollzone, RectY2(pan_rect) - padding},
	};

	if(RectContainsPoint (cursor[0], cursor[1], 
		rects_threshold[0][0], rects_threshold[0][1],
		rects_threshold[0][2], rects_threshold[0][3])){
		//log(s:"Oh hey! I am scrolling left!");
		scroll_pan[0] += Panel_CalcScrollSpeed(pan, cursor[0], rects_threshold[0][1]);
	}else if(RectContainsPoint (cursor[0], cursor[1], 
		rects_threshold[1][0], rects_threshold[1][1],
		rects_threshold[1][2], rects_threshold[1][3])){
		scroll_pan[0] -= Panel_CalcScrollSpeed(pan, cursor[0], rects_threshold[1][0]);
		//STExecute_PanelScroll(pan, 0.0, 0.05);
	}

	if(RectContainsPoint (cursor[0], cursor[1], 
		rects_threshold[2][0], rects_threshold[2][1],
		rects_threshold[2][2], rects_threshold[2][3])){
		//log(s:"Oh hey! I am scrolling up!");
		scroll_pan[1] += Panel_CalcScrollSpeed(pan, cursor[1], rects_threshold[2][3]);
	}else if(RectContainsPoint (cursor[0], cursor[1], 
		rects_threshold[3][0], rects_threshold[3][1],
		rects_threshold[3][2], rects_threshold[3][3])){
		//log(s:"Oh hey! I am scrolling down!");
		scroll_pan[1] -= Panel_CalcScrollSpeed(pan, cursor[1], rects_threshold[3][2]);
		//STExecute_PanelScroll(pan, 0.0, 0.05);
	}
	STExecute_PanelScroll(pan, scroll_pan[0], scroll_pan[1]);
}
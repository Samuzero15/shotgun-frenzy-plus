
#define BWPAGE_WPPACK_PERPAGE 10
#define BWPAGE_WPPACK_MAXPAGES FP_WEP_PACKS_PER_CATEGORY/BWPAGE_WPPACK_PERPAGE
#define BWPAGE_CATEGORIES 4
// Indexes shortcuts baby.
#define BWPAGE_BUYSTRBTN 0
#define BWPAGE_COSTLABEL 1
#define BWPAGE_WPPACK_LISTPANEL 2
#define BWPAGE_WPPACK_CURRPAGE 3
#define BWPAGE_WPPACK_NEXTPAGE 4
#define BWPAGE_WPPACK_PREVPAGE 5
#define BWPAGE_WPPACK_WEAP_NAME 6
#define BWPAGE_WPPACK_WEAP_DESC 7
#define BWPAGE_WPPACK_DETAILPANEL 8
#define BWPAGE_NUMINPUT_SELECTWP 9
#define BWPAGE_WPPACK_DESC 11
#define BWPAGE_TAG 12
#define BWPAGE_SELECTED_PACK 13
#define BWPAGE_SELECTED_WEAPON 14
#define BWPAGE_SELECTED_PAGE 15
#define BWPAGE_UPDATE_NOW 16
#define BWPAGE_UPDATE_LAST 17
#define BWPAGE_SELECTED_CATEGORY 18
#define BWPAGE_CURRENT_PAGE 19

#define BWPAGE_MAX_WEAPONS_PER_PACK 3

int buywpn_vars[20];
int buywpn_wp_packbtns[BWPAGE_WPPACK_PERPAGE];
int buywpn_wp_categories[BWPAGE_CATEGORIES];

function void BuyWpnPage_Update(int pageTag){
	setPageTitle(pageTag, "Buy Weapon Packs", CR_CYAN);
	
	if(SamuTerminal_isOnSamePage(pageTag)){
		BuyWpnPage_UpdateCats();
		BuyWpnPage_UpdateBuyBut(buywpn_vars[BWPAGE_SELECTED_PACK]);
		BuyWpnPage_UpdatePackButtons(buywpn_vars[BWPAGE_SELECTED_CATEGORY]);
		BuyWpnPage_UpdatePackDetails(buywpn_vars[BWPAGE_SELECTED_PACK]);
	}else{
		buywpn_vars[BWPAGE_SELECTED_PACK] = -1;
		buywpn_vars[BWPAGE_UPDATE_NOW] = -99;
		buywpn_vars[BWPAGE_UPDATE_LAST] = -99;
		buywpn_vars[BWPAGE_SELECTED_CATEGORY] = -1;
		buywpn_vars[BWPAGE_SELECTED_WEAPON] = 1;
		buywpn_vars[BWPAGE_CURRENT_PAGE] = 0;
		buywpn_vars[BWPAGE_SELECTED_PAGE] = -1;
		NumInput_SetValue(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP], 0);
		BuyWpnPage_UpdatePackButtons(buywpn_vars[BWPAGE_SELECTED_CATEGORY]);
		BuyWpnPage_UpdatePackDetails(buywpn_vars[BWPAGE_SELECTED_PACK]);
	}
}

function void BuyWpnPage_Init(int pageTag){
	
	int i, card1, card2, card3;
	
	Card_SetPosition(30.0, 360.0);
	Card_SetCells(4);
	Card_SetStep(150.0);
	card1 = Card_Generate();

	buywpn_vars[BWPAGE_TAG] = pagetag;
	
	BuyWpnPage_InitCats(card1);
	BuyWpnPage_InitPackPanelList();
	BuyWpnPage_InitPackPanelDetails();

	buywpn_vars[BWPAGE_SELECTED_PACK] = -1;
	buywpn_vars[BWPAGE_UPDATE_NOW] = -99;
	
	//BuyWpnPage_UpdatePackButtons(buywpn_vars[BWPAGE_SELECTED_CATEGORY]);
	BuyWpnPage_UpdatePackDetails(buywpn_vars[BWPAGE_SELECTED_PACK]);
}

function void BuyWpnPage_UpdateBuyBut(int wp){
	str msg0, msg1, msg2;
	
	msg0 = strParam(s:"Cost: \cf", d:WeaponPack_getPrice(wp), s:"$");
	msg1 = strParam(s:"Needs \ci", d:(WeaponPack_getPrice(wp) - SFPlus_getPlayCredits()), s:"$ \cgmore!");
	msg2 = strParam(s:"\chAlready owned");
	
	
	StrButton_setShow(buywpn_vars[BWPAGE_BUYSTRBTN], 	false);
	Label_setShow	 (buywpn_vars[BWPAGE_COSTLABEL], 	false);
	
	bool canibuy = SFPlus_getPlayCredits() >= WeaponPack_getPrice(wp);
	
	bool gotit = WeaponPack_isOwned(wp);
	
	if(wp >= 0){
		StrButton_setShow	(buywpn_vars[BWPAGE_BUYSTRBTN], gotit ? false : (canibuy ? true : false));
		StrButton_setExeArgs(buywpn_vars[BWPAGE_BUYSTRBTN], wp, 0, 0);
		
		Label_setColor(buywpn_vars[BWPAGE_COSTLABEL], canibuy ? CR_GREEN : CR_RED);
		Label_setText(buywpn_vars[BWPAGE_COSTLABEL], gotit ? msg2 : (canibuy ? msg0 : msg1));
		Label_setShow(buywpn_vars[BWPAGE_COSTLABEL], true);
	}
}

function void BuyWpnPage_UpdateCats(void){
	StrButton_setShow(buywpn_wp_categories[1], Tech_IsDoneC(TECH_ARMORY_ARMS1));
	StrButton_setShow(buywpn_wp_categories[2], Tech_IsDoneC(TECH_ARMORY_ARMS2));
}

function void BuyWpnPage_InitCats(int card1){
	int i;
	i = StrButton_addCard (card1, 1, " Standard ");
		StrButton_setColor(i, CR_GREEN);
		StrButton_setTag  (i, buywpn_vars[BWPAGE_TAG]);
		StrButton_setExecute(i, STEXE_BUYWP_PSHOW);
		StrButton_setExeArgs(i, WEAPON_SET_STANDARD,0,0);
	buywpn_wp_categories[0] = i;

	i = StrButton_DupCard(i, card1, 2);
		StrButton_setColor(i, CR_CYAN);
		StrButton_setText(i, " Advanced ");
		StrButton_setExeArgs(i, WEAPON_SET_ADVANCED,0,0);
	buywpn_wp_categories[1] = i;
	
	i = StrButton_DupCard(i, card1, 3);
		StrButton_setColor(i, CR_ORANGE);
		StrButton_setText(i, "Powerguns");
		StrButton_setExeArgs(i, WEAPON_SET_OVERPOWERED,0,0);
	buywpn_wp_categories[2] = i;
	/*
	i = StrButton_DupCard(card1, 4);
	StrButton_setColor(i, CR_Gold);
	StrButton_setText(i, "  Elite  ");
	buywpn_wp_categories[3] = i;
	*/
}

function void BuyWpnPage_UpdatePackDetails(int selected){
	if(buywpn_vars[BWPAGE_SELECTED_PACK] == buywpn_vars[BWPAGE_UPDATE_NOW] 
		&& buywpn_vars[BWPAGE_SELECTED_WEAPON] == NumInput_GetValue(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP])) return;
	int i; 

	NumInput_SetShow(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP], false);
	if(selected < 0){
		Panel_SetShow(buywpn_vars[BWPAGE_WPPACK_DETAILPANEL], false);
		Label_setShow(buywpn_vars[BWPAGE_WPPACK_DESC], false);
		return;
	}
	Label_setShow(buywpn_vars[BWPAGE_WPPACK_DESC], true);
	
	Panel_setTitle(buywpn_vars[BWPAGE_WPPACK_DETAILPANEL],  strparam(s:WeaponPack_getName(selected), s:" pack"));
	Label_setText(buywpn_vars[BWPAGE_WPPACK_DESC], WeaponPack_getDesc(selected));
	
	
	//Fetches all weapons, and checks which one is inside this pack.
	int weps_in_pack[BWPAGE_MAX_WEAPONS_PER_PACK]; 
	int count = 0;
	for (i = 0; i < fp_WeaponStack && count != BWPAGE_MAX_WEAPONS_PER_PACK; i++){
		if(Weapon_getWepPack(i) == selected){
			weps_in_pack[count] = i;
			count++;
		}
	}

	NumInput_SetShow(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP], true);
	NumInput_SetMaxValue(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP], count-1);
	int selected_weapon = NumInput_GetValue(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP]);
	//log(s:"Weapon Data To Show: ", d:whichweapon, s:", Has second weapon? ", d:wep2, s:", Has third weapon? ", d:wep3, s:", Selected Category: ", d:WeaponPack_getCat(selected));
	Label_setText(buywpn_vars[BWPAGE_WPPACK_WEAP_NAME], Weapon_getName(weps_in_pack[selected_weapon]));
	Label_setText(buywpn_vars[BWPAGE_WPPACK_WEAP_DESC], Weapon_getDesc(weps_in_pack[selected_weapon]));
	
	int color_cat = term_catStyle[WeaponPack_getCat(selected)][TERM_CATSTYLE_COLOR];

	Panel_SetShow(buywpn_vars[BWPAGE_WPPACK_DETAILPANEL], true);
	Panel_setColor(buywpn_vars[BWPAGE_WPPACK_DETAILPANEL], color_cat);
	NumInput_SetColor(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP], color_cat);

	buywpn_vars[BWPAGE_UPDATE_NOW] = selected;
	buywpn_vars[BWPAGE_SELECTED_WEAPON] = selected_weapon;
}

function void BuyWpnPage_InitPackPanelDetails(void){
	int i;
	int p = Panel_Add(280.0, 60.0, 34, 28);
	Panel_SetAnchors(p, STPANEL_ANCHOR_LEFT, STPANEL_ANCHOR_TOP);
	Panel_SetTitle(p, "Pack Title");
	Panel_SetColor(p, CR_GREEN);
	Panel_setTag(p, buywpn_vars[BWPAGE_TAG]);
	Panel_SetSpacing(p, 0.0, 32.0);
	buywpn_vars[BWPAGE_WPPACK_DETAILPANEL] = p;

	i = Label_AddToPanelOff	(p, 0.0, 5.0); //Description
		Label_SetText		(i, "Pack description, write what's this pack about.");
		Label_setFont		(i, "SMALLFNT");
		Label_SetAligns		(i, HUD_ALIGN_LEFT, HUD_ALIGN_TOP);
		Label_setTag		(i, buywpn_vars[BWPAGE_TAG]);
		Label_setWrapWidth	(i, 280);
		Label_setShow		(i, true);
	buywpn_vars[BWPAGE_WPPACK_DESC] = i;

	i = Label_AddToPanelOff		(p, 0.0, 10.0); // Weapon 1 desc
		Label_setFont		(i, "DBIGFONT");
		Label_setText		(i, "Weapon Name");
		Label_setWrapWidth	(i, -1);
		Label_SetAligns		(i, HUD_ALIGN_LEFT, HUD_ALIGN_TOP);
		Label_setTag		(i, buywpn_vars[BWPAGE_TAG]);
		Label_setShow		(i, true);
	buywpn_vars[BWPAGE_WPPACK_WEAP_NAME] = i;
	
	i = Label_DupToPanel	(i, p); // Weapon 1 name
		Label_setText		(i, "Weapon Description");
		Label_setFont		(i, "SMALLFNT");
		Label_setTag	(i, buywpn_vars[BWPAGE_TAG]);
		Label_SetWrapWidth  (i, 280);
	buywpn_vars[BWPAGE_WPPACK_WEAP_DESC] = i;

	i = NumInput_Add(280.0, 300.0);
		NumInput_SetShowNumber(i, false);
		NumInput_SetBtnDistance(i, 224.0);
		NumInput_SetMinValue(i, 0);
		NumInput_SetValue(i, 0);
	buywpn_vars[BWPAGE_NUMINPUT_SELECTWP] = i;
	
	//buywpn_vars[12] = i;
	i = StrButton_Add(370.0,320.0, "Buy Pack");
		StrButton_SetColor	(i, cr_Darkgreen);
		StrButton_setTag	(i, buywpn_vars[BWPAGE_TAG]);
	StrButton_setExecute(i, STEXE_BUYWP);
	buywpn_vars[BWPAGE_BUYSTRBTN] = i;
	
	i = Label_add(430.0,315.0);
		Label_setTag(i, buywpn_vars[BWPAGE_TAG]);
		Label_setFont(i, "DBIGFONT");
		Label_setText(i, "Cost Price.");
	buywpn_vars[BWPAGE_COSTLABEL] = i;
}

function void BuyWpnPage_UpdatePackButtons(int category){
	int i;
	for (i = 0; i < BWPAGE_WPPACK_PERPAGE; i++){
		StrButton_setShow(buywpn_wp_packbtns[i], false);
	}
	if(category == -1){
		//Panel_ResetVirtualOffset (buywpn_vars[BWPAGE_WPPACK_LISTPANEL]);
		Panel_SetShow(buywpn_vars[BWPAGE_WPPACK_LISTPANEL], false);
		StrButton_SetShow(buywpn_vars[BWPAGE_WPPACK_PREVPAGE], false);
		StrButton_SetShow(buywpn_vars[BWPAGE_WPPACK_NEXTPAGE], false);
		Label_SetShow(buywpn_vars[BWPAGE_WPPACK_CURRPAGE], false);
		return;
	} else {
		int pages = (fp_WpCategoryStack[category]/BWPAGE_WPPACK_PERPAGE);
		int pages_reminder = (fp_WpCategoryStack[category]%BWPAGE_WPPACK_PERPAGE);
		if (pages_reminder == 0 && pages > 0) pages = pages-1;
		//log(s:"Pages: ",d:pages, s:", reminder: ", d:pages_reminder);
		Panel_SetShow(buywpn_vars[BWPAGE_WPPACK_LISTPANEL], true);
		StrButton_SetShow(buywpn_vars[BWPAGE_WPPACK_PREVPAGE], buywpn_vars[BWPAGE_CURRENT_PAGE] == 0 ? false : true);
		StrButton_SetShow(buywpn_vars[BWPAGE_WPPACK_NEXTPAGE], 
		(buywpn_vars[BWPAGE_CURRENT_PAGE] == pages || pages == 0) ? false : true);

		Label_SetShow(buywpn_vars[BWPAGE_WPPACK_CURRPAGE], pages == 0 ? false : true);
		Label_SetText(buywpn_vars[BWPAGE_WPPACK_CURRPAGE],
			 strparam(d:buywpn_vars[BWPAGE_CURRENT_PAGE]+1, s:" / ", d:(pages+1)));
	}
	// Something new on the Zandro 3.1-alpha.
	// Local arrays!
	int stack, wp;
	int color_cat = term_catStyle[category][TERM_CATSTYLE_COLOR];
	//log(s:"Category stack: ", d:fp_WpCategoryStack[category]);
	for (i = buywpn_vars[BWPAGE_CURRENT_PAGE]*BWPAGE_WPPACK_PERPAGE; i < fp_WpCategoryStack[category] && stack < BWPAGE_WPPACK_PERPAGE; i++){
		wp = fp_WpCategory[category][i];
		StrButton_setExeArgs(buywpn_wp_packbtns[stack], wp, 0, 0);
		StrButton_setTextAdjust(buywpn_wp_packbtns[stack], WeaponPack_getName(wp));
		StrButton_setColor(buywpn_wp_packbtns[stack], color_cat);
		StrButton_setShow(buywpn_wp_packbtns[stack], true);
		stack++;
	}
	Panel_SetColor(buywpn_vars[BWPAGE_WPPACK_LISTPANEL], color_cat);
	Panel_SetVirtualSize(buywpn_vars[BWPAGE_WPPACK_LISTPANEL], 0.0, 32.0*(stack > 6 ? 1*(stack-7) : 0));
	buywpn_vars[BWPAGE_SELECTED_PAGE] = buywpn_vars[BWPAGE_CURRENT_PAGE];
}

function void BuyWpnPage_InitPackPanelList(void){
	int p = Panel_Add(60.0, 60.0, 20, 28);
	Panel_SetAnchors(p, STPANEL_ANCHOR_LEFT, STPANEL_ANCHOR_TOP);
	Panel_SetTitle(p, "Wep. Pack");
	Panel_SetColor(p, CR_GREEN);
	Panel_SetVirtualSize(p, 0.0, 32.0*3);
	Panel_SetScrollAmount(p, 0.0, 32.0);
	Panel_SetSpacing(p, 0.0, 32.0);
	Panel_SetAutoscroll(p, true);
	Panel_SetTag(p, buywpn_vars[BWPAGE_TAG]);
	buywpn_vars[BWPAGE_WPPACK_LISTPANEL] = p;
	// Limited to 10 weapons packs per category, but, if this part is paginated, can grab more. 
	// Maybe up to 100 weapons per category :)
	int i;
	for (int j = 0; j < BWPAGE_WPPACK_PERPAGE; j++){
		i = StrButton_addToPanel(strparam(s:" Pack ", d:j ,s:" "), p);
		StrButton_setExecute(i, STEXE_BUYWP_PDESC);
		buywpn_wp_packbtns[j] = i;
	}
	
	i = Label_Add		(146.0, 310.0); //Description
	Label_SetText		(i, "Pack Page");
	Label_setFont		(i, "DBIGFONT");
	Label_SetAligns 	(i, HUD_ALIGN_CENTER, HUD_ALIGN_TOP);
	buywpn_vars[BWPAGE_WPPACK_CURRPAGE] = i;
	//Label_setWrapWidth	(i, -1);
	i = StrButton_Add(60.0, 300.0, "<");
	StrButton_SetColor	(i, cr_WHITE);
	StrButton_SetExecute(i, STEXE_BUYWP_MOVEWPPAGE);
	StrButton_SetExeArgs(i, -1, 0, 0);
	buywpn_vars[BWPAGE_WPPACK_PREVPAGE] = i;

	i = StrButton_Add(204.0, 300.0, ">");
	StrButton_SetColor	(i, cr_WHITE);
	StrButton_SetExecute(i, STEXE_BUYWP_MOVEWPPAGE);
	StrButton_SetExeArgs(i, 1, 0, 0);
	buywpn_vars[BWPAGE_WPPACK_NEXTPAGE] = i;
	
}
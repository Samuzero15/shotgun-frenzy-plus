int rcywpn_vars[200];

#define RCYWPNPAGE_NCOMPGROUP 4
#define RCYWPNPAGE_NPRIVARS 8
#define RCYWPNPAGE_ITEMCAP 10


function void RcyWpnPage_SaveGroup(int up, int id, int comp){
	rcywpn_vars[RCYWPNPAGE_NCOMPGROUP * up + RCYWPNPAGE_NPRIVARS + (id-1)] = comp;
}

function int RcyWpnPage_LoadGroup(int up, int id){
	return rcywpn_vars[RCYWPNPAGE_NCOMPGROUP * up + RCYWPNPAGE_NPRIVARS + (id-1)];
}

function void RcyWpnPage_Update(int pageTag){
	setPageTitle(pageTag, "Recycle Weapons", CR_RED);
	if(isOnTheSamePage(pageTag)){
		for(int i = 0; i < fp_WeaponStack; i++){
			if(Weapon_getWepPack(i) != -1 && Weapon_getWepPack(i) != -2)
				RcyWpnPage_updateOptions(i);
		}
		if(rcywpn_vars[2] == 0) Label_setShow(rcywpn_vars[7], true);
		else 					Label_setShow(rcywpn_vars[7], false);

		if (rcywpn_vars[2] > RCYWPNPAGE_ITEMCAP){
			// Enable navigation buttons
			int rest_of_em = rcywpn_vars[2]-RCYWPNPAGE_ITEMCAP;
			
			StrButton_setShow	(rcywpn_vars[4], true);
			StrButton_setShow	(rcywpn_vars[5], true);
			StrButton_setExeArgs(rcywpn_vars[4], -1, rest_of_em, 0);
			StrButton_setExeArgs(rcywpn_vars[5], 1, rest_of_em, 0);
			if (rcywpn_vars[3] > rest_of_em) rcywpn_vars[3] = rest_of_em;
			Label_SetPosition	(rcywpn_vars[6], 100.0, 120.0 + FixedMul(180.0, fixedDiv(rcywpn_vars[3],rest_of_em)));
		}else {
			// Reset counter and hide it.
			rcywpn_vars[3] = 0;
			StrButton_setShow	(rcywpn_vars[4], false);
			StrButton_setShow	(rcywpn_vars[5], false);
			Label_setShow		(rcywpn_vars[6], false);
		}
		
		rcywpn_vars[1] = 0; // reset stack.
		rcywpn_vars[2] = 0; // Reset current weapons count
	}
}


function void RcyWpnPage_Init(int pageTag){
	Grid_SetPosition(40.0, 50.0);
	Grid_SetCellSize(300.0, 35.0);
	Grid_SetDimensions(10, 1);
	rcywpn_vars[0] = Grid_Generate(); 
	rcywpn_vars[1] = 0; // Top.
	rcywpn_vars[2] = 0; // Weapon counter.
	rcywpn_vars[3] = 0;
	

	for(int i = 0; i < fp_WeaponStack; i++){
		if(Weapon_getWepPack(i) != -1 && Weapon_getWepPack(i) != -2) // Excludes boomstick and beretta.
			RcyWpnPage_AddOptions(pagetag, i);
	}
	// Scroll up button
	rcywpn_vars[4] = StrButton_Add	(90.0,80.0, "^"); 
	StrButton_setTag	(rcywpn_vars[4], pageTag);
	StrButton_setExecute(rcywpn_vars[4], STEXE_MOVERC);

	// Scroll down button
	rcywpn_vars[5] = StrButton_Add	(90.0,300.0, "v"); 
	StrButton_setTag	(rcywpn_vars[5], pageTag);
	StrButton_setExecute(rcywpn_vars[5], STEXE_MOVERC);

	// The scroller cero.
	rcywpn_vars[6] = Label_Add	(100.0,120.0);
	Label_setText	(rcywpn_vars[6], "O");
	Label_setFont	(rcywpn_vars[6],"DBIGFONT"); 
	Label_setTag	(rcywpn_vars[6], pageTag);
	Label_setAligns	(rcywpn_vars[6], HUD_ALIGN_CENTER, HUD_ALIGN_CENTER);
	Label_setShow   (rcywpn_vars[6], false);

	rcywpn_vars[7] = Label_Dup	(rcywpn_vars[6], 320.0,240.0);
	Label_setText	(rcywpn_vars[7], "No weapons to recycle...");

}

function void RcyWpnPage_AddOptions(int pagetag, int wpn){
	int i = 0;
	bool ihaveup1, ihaveup2;
	int stat0, stat1, stat2, stat3;
	
	stat0 = Weapon_GetName(wpn);
	
	int price = Weapon_getPrice(wpn);
	int priceup1 = WeaponUpgrade_getRcyPrice(wpn,0);
	int priceup2 = WeaponUpgrade_getRcyPrice(wpn,1);
	ihaveup1 = CheckInventory(WeaponUpgrade_GetActor(wpn,0));
	ihaveup2 = CheckInventory(WeaponUpgrade_GetActor(wpn,1));
	
	if(WeaponUpgrade_getActor(wpn, 1) == -1){
		stat1 = cond(ihaveup1, "Up. Type: 0", "Not Upgraded");
		stat2 = cond(ihaveup1, priceup1, price);
	}else{
		stat1 = cond(ihaveup1 || ihaveup2, cond(ihaveup1, "Up. Type: 1", "Up. Type: 2"), "Not Upgraded");
		stat2 = cond(ihaveup1 || ihaveup2, cond(ihaveup1, priceup1, priceup2), 			price);
	}
	
	i = Label_Add	(0.0, 0.0); 
	Label_setText	(i, stat0);
	Label_setFont	(i,"DBIGFONT");
	Label_setShow	(i, false);
	Label_setAligns	(i, HUD_ALIGN_LEFT, HUD_ALIGN_TOP);
	Label_setTag	(i, pageTag);
	RcyWpnPage_SaveGroup(wpn, 1, i);
	
	i = Label_Dup(i, 0.0, 0.0); 
	Label_setText	(i,strparam(s:"+ ",d:stat2,s:" $"));
	Label_setAligns	(i, HUD_ALIGN_CENTER, HUD_ALIGN_CENTER);
	Label_setFont	(i, "SMALLFNT");
	RcyWpnPage_SaveGroup(wpn, 2, i);
	
	i = StrButton_Add	(0,0, "Recycle"); 
	StrButton_setShow	(i, false);
	StrButton_setTag	(i, pageTag);
	StrButton_setExecute(i, STEXE_ASKRC);
	StrButton_setExeArgs(i, wpn, 0, 0);
	RcyWpnPage_SaveGroup(wpn, 3, i);
}

function int RcyWpnPage_getColorCat(int cat){
	if(cat == 1) return CR_GREEN;
	if(cat == 2) return CR_CYAN;
	if(cat == 3) return CR_ORANGE;
	return cr_white;
}

function void RcyWpnPage_UpdateOptions(int wpn){
	

	int comp1 = RcyWpnPage_LoadGroup(wpn, 1);
	int comp2 = RcyWpnPage_LoadGroup(wpn, 2);
	int comp3 = RcyWpnPage_LoadGroup(wpn, 3);
	
	Label_setShow(comp1, false); // Name
	Label_setShow(comp2, false); // Price
	StrButton_setShow(comp3, false); // The button

	bool ihaveup1, ihaveup2, ihavewpn;
	ihavewpn = CheckInventory(Weapon_GetActor(wpn));
	ihaveup1 = CheckInventory(WeaponUpgrade_GetActor(wpn,0));
	ihaveup2 = CheckInventory(WeaponUpgrade_GetActor(wpn,1));
	rcywpn_vars[2] = rcywpn_vars[2] + (ihavewpn || ihaveup1 || ihaveup2);
	if (rcywpn_vars[1] >= RCYWPNPAGE_ITEMCAP || rcywpn_vars[2] <= rcywpn_vars[3]) return;
	// Skips the first offsetted weapons for some extra selections, and skips if already reached to the cap.
	int stat0, stat1, stat2, stat3;
	
	stat0 = Weapon_GetName(wpn);
	
	int price = Weapon_getPrice(wpn);
	int priceup1 = WeaponUpgrade_getRcyPrice(wpn,0);
	int priceup2 = WeaponUpgrade_getRcyPrice(wpn,1);
	
	if(WeaponUpgrade_getActor(wpn, 1) == -1){
		stat0 = cond(ihaveup1, WeaponUpgrade_getName(wpn, 0), Weapon_GetName(wpn));
		stat2 = cond(ihaveup1, priceup1, price);
		stat3 = cond(ihaveup1, 0, 255);
	}else{
		stat0 = cond(ihaveup1 || ihaveup2, cond(ihaveup1,WeaponUpgrade_getName(wpn, 0), WeaponUpgrade_getName(wpn, 1)), Weapon_GetName(wpn));
		stat2 = cond(ihaveup1 || ihaveup2, cond(ihaveup1, priceup1, priceup2), 			price);
		stat3 = cond(ihaveup1 || ihaveup2, cond(ihaveup1, 1, 2), 			255);
	}
	if(ihavewpn || ihaveup1 || ihaveup2){
		int color = RcyWpnPage_getColorCat(Weapon_getCat(wpn));
		int toppy = (rcywpn_vars[1] % 10) + 1;
		int col = (rcywpn_vars[1] / 10) + 1;
		
		Label_setText	(comp1, stat0);
		Label_setText	(comp2, strparam(s:"+ ",d:stat2,s:" $"));
		StrButton_setExeArgs(comp3, wpn, stat3, 0);
		
		Label_setColor	(comp1, color);
		Label_setColor	(comp2, color);
		StrButton_setColor(comp3, color);
		int offset = 100.0;
		Label_setPosToGridOff(comp1, rcywpn_vars[0], toppy, col, offset+125.0, 4.0);
		Label_setPosToGridOff(comp2, rcywpn_vars[0], toppy, col, offset+54.0, 24.0);
		StrButton_setPosToGridOff(comp3, rcywpn_vars[0], toppy, col, offset+0.0, -2.0);
		
		Label_setShow(comp1, true);
		Label_setShow(comp2, true);
		StrButton_setShow(comp3, true);
		
		rcywpn_vars[1]++;
	}
	
}
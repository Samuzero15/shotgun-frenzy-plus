
#define ITPAGE_TAG 0
#define ITPAGE_PAGE 1
#define ITPAGE_PANEL 2
#define ITPAGE_CURRENTPAGE 3
#define ITPAGE_MAXPAGE 4

#define ITPAGE_MAXITEMS_PERPAGE 32
#define ITPAGE_ITEMPROPS 3

#define ITPAGE_ITEM_IMGBUTTON 0
#define ITPAGE_ITEM_LABELPRICE 1
#define ITPAGE_ITEM_LABELCOUNT 2

int armitm_item[ITPAGE_MAXITEMS_PERPAGE][ITPAGE_ITEMPROPS];
int armitm_vars[10];

#define ArmItmPage_NCOMPGROUP 6
#define ArmItmPage_NPRIVARS 30

function void ArmItmPage_SaveGroup(int up, int id, int comp){
	ArmItm_vars[ArmItmPage_NCOMPGROUP * up + ArmItmPage_NPRIVARS + (id-1)] = comp;
}

function int ArmItmPage_LoadGroup(int up, int id){
	return ArmItm_vars[ArmItmPage_NCOMPGROUP * up + ArmItmPage_NPRIVARS + (id-1)];
}

function void ArmItmPage_Update(int pageTag){
	setPageTitle(pageTag, "More items", CR_GOLD);
	if(SamuTerminal_isOnSamePage(pageTag))
	{
		armitm_vars[ITPAGE_CURRENTPAGE] = NumInput_getValue(armitm_vars[ITPAGE_PAGE]);
		int start = ITPAGE_MAXITEMS_PERPAGE*(armitm_vars[ITPAGE_CURRENTPAGE]-1);

		// If we are on the last page, show the last range with the reminder of items, otherwise, show only what the ITMPAGE_MAXITEMS_PERPAGE says.
		int end_fullpage = ITPAGE_MAXITEMS_PERPAGE * armitm_vars[ITPAGE_CURRENTPAGE];

		int end = (armitm_vars[ITPAGE_CURRENTPAGE] == armitm_vars[ITPAGE_MAXPAGE]) ? fp_itemshop_last[ITEMSHOP_ARMORY] : end_fullpage;
		int slot = 0;
		for(int i = start; i < end; i++){
			ArmItmPage_UpdateItem(slot, i);
			slot++;
		}
		// Hide remaining buttons
		for(int j = slot; j < ITPAGE_MAXITEMS_PERPAGE; j++){
			ArmItmPage_UpdateItem(j, -1);
		}
	}
}


function void ArmItmPage_Init(int pageTag){
	//ArmItemsPage_InitGrid(285.0, 50.0);
	armitm_vars[ITPAGE_TAG] = pageTag;

	int i;

	armitm_vars[ITPAGE_CURRENTPAGE] = 1;
	armitm_vars[ITPAGE_MAXPAGE] = (fp_itemshop_last[ITEMSHOP_ARMORY] / ITPAGE_MAXITEMS_PERPAGE) + 1;
	//log(s:"Max pages for armory:", d:armitm_vars[ITPAGE_MAXPAGE]);
	i = NumInput_AddMid (320.0, 350.0);
	NumInput_setBtnDistance(i, 96.0);
	NumInput_SetLabelText(i, "{n}/{M}");
	NumInput_setValue(i, 1);
	NumInput_setMinValue(i, 1);
	NumInput_setMaxValue(i, armitm_vars[ITPAGE_MAXPAGE]);
	NumInput_setLoopValues(i, true);
	NumInput_setTag(i, armitm_vars[ITPAGE_TAG]);
	armitm_vars[ITPAGE_PAGE] = i;

	i = Panel_Add(75.0, 60.0, 60, 28);
	Panel_SetTitle(i, "Items");
	Panel_setColor(i, CR_GREEN);
	Panel_setTag(i, armitm_vars[ITPAGE_TAG]);
	Panel_setColumns(i, 8);
	Panel_setSpacing(i, 60.0, 56.0);
	Panel_setAnchorOffset(i, 12.0, 4.0);
	armitm_vars[ITPAGE_PANEL] = i;

	for(int j = 0; j < ITPAGE_MAXITEMS_PERPAGE; j++){
		ArmItmPage_AddItemButton(j);
	}
}

// TODO: Rewrite this to use Panels
function void ArmItmPage_AddItemButton(int slot){
	int p = armitm_vars[ITPAGE_PANEL];
	int btn_dims[2] = {32.0, 32.0};

	int i = ImgButton_AddToPanelPos(btn_dims[0], btn_dims[1], p, slot);
	//ImgButton_SetTag(i, armitm_vars[ITPAGE_TAG]);
	ImgButton_setExecute(i, STEXE_ITEMBUY);
	armitm_item[slot][ITPAGE_ITEM_IMGBUTTON] = i;
	/*
	ImgButton_SetExeHover(i, STEXE_UPGPAGEDESC);
	ImgButton_SetArgsHover(i, 0, slot, 0);
	*/

	i = Label_AddToPanelPosOff(p, slot, 16.0, 34.0);
	Label_SetText(i, "price $");
	//Label_SetTag(i, armitm_vars[ITPAGE_TAG]);
	Label_SetAligns(i, HUD_ALIGN_CENTER, HUD_ALIGN_TOP);
	Label_SetColor(i, CR_GOLD);
	armitm_item[slot][ITPAGE_ITEM_LABELPRICE] = i;

	int i2 = Label_DupToPanelPosOff(i, p, slot, 16.0, 42.0);
	Label_SetText(i2, "n / M");
	Label_SetColor(i2, CR_WHITE);
	armitm_item[slot][ITPAGE_ITEM_LABELCOUNT] = i2;
}

function void ArmItmPage_UpdateItem(int slot, int itemId){
	int itemid_data = fp_itemshop[ITEMSHOP_ARMORY][itemId];
	int imgbutton = armitm_item[slot][ITPAGE_ITEM_IMGBUTTON];
	int priceLabel = armitm_item[slot][ITPAGE_ITEM_LABELPRICE];
	int countLabel = armitm_item[slot][ITPAGE_ITEM_LABELCOUNT];

	if (itemId == -1 || Item_IsForClass(itemid_data) == false) {
		ImgButton_SetShow(imgbutton, false);
		Label_SetShow(priceLabel, false);
		Label_SetShow(countLabel, false);
		return;
	}

	ImgButton_SetShow(imgbutton, true);
	Label_SetShow(priceLabel, true);
	Label_SetShow(countLabel, true);
	
	str button = Item_getIBtnOrColor(itemid_data);
	int price = Item_getPrice(itemid_data);
	int caniafford = SFPlus_getPlayCredits() >= price;
	str actor = Item_getActor(itemid_data);
	int item_max = Item_getMax(itemid_data);
	int amount = strparam(d:Checkinventory(actor), s:" / ", d:item_max);

	ImgButton_SetImage(imgbutton, caniafford ? button : "BTNDEN");
	ImgButton_SetArgs(imgbutton, itemid_data, 1, 0);

	str tooltip_string = strparam(s:Item_GetType(itemid_data) == FP_ITEM_T_DEPLOY ? "\ci" : "\cf", s:Item_GetName(itemid_data), s:"\n\n", s:Item_GetDesc(itemid_data));
	ImgButton_SetTooltip(imgbutton, tooltip_string);
	Label_SetText(priceLabel, strparam(d:price, s:" $"));
	Label_SetColor(priceLabel, caniafford ? CR_GOLD : CR_RED);
	Label_SetText(countLabel, amount);
	Label_SetColor(countLabel, CheckInventory(actor) == item_max ? CR_ORANGE : CR_WHITE);
}

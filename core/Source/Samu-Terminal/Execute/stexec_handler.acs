
/**
*
*	stexec_handler.acs
* 	In this switch, you can expand it to whatever handlers you need.
*	Note: The arguments are limited to bytes. (0 - 255)
*
*/

function void SamuTerm_Execute(int cmd, int arg1, int arg2, int arg3)
{
	// Eitherway, this will list all of the functions about the executions.
	switch(cmd){
		
		case STEXE_PLAYUP_GET: STExecute_PlayUpGet(arg1); break;
		case STEXE_PLAYUP_SET: STExecute_PlayUpSet(arg1); break;
		case STEXE_PLAYUP_ASK: STExecute_PlayUpAsk(arg1); break;
		case STEXE_PLAYUP_SETDESC: STExecute_PlayUpSetDesc(arg1); break;
		case STEXE_PLAYUP_BTNHOVER: STExecute_PlayUpTitleHover(arg1, arg2); break;
		
		case STEXE_BUYWP_PSHOW: STExecute_BuyWepSetCat(arg1); break;
		case STEXE_BUYWP_PDESC: STExecute_BuyWepShowData(arg1); break;
		case STEXE_GETWP: STExecute_getWeapon(arg1); break;
		case STEXE_GIVEWP: STExecute_giveWeapon(arg1); break;
		case STEXE_BUYWP: STExecute_BuyWeapon(arg1); break;
	
		case STEXE_UPG1PAGEDESC: StExecute_Upg1PageDesc(arg1, arg2, arg3); break;
		case STEXE_UPG0PAGEDESC: StExecute_Upg0PageDesc(arg1, arg2, arg3); break;
		case STEXE_UPGPAGECAT: StExecute_UpgPageCat(arg1); break;
		
		case STEXE_CMDEVENT_CHECK: STExecute_CMDEvent_Check(arg1, arg2); break;
		case STEXE_CMDEVENT_DOIT: STExecute_CMDEvent_DoIt(arg1); break;
		case STEXE_CMDEXIT: StExecute_CMDExit(); break;
		case STEXE_CMDBTNDESC: StExecute_CMDBtnDesc(arg1, arg2, arg3); break;
		case STEXE_CMDCAT: STExecute_CMDGotToCat(arg1, arg2); break;
		
		case STEXE_BUYMECHTANK: StExecute_BuyMechTank(); break;
		case STEXE_GETMECHTANK: StExecute_GetMechTank(); break;
		case STEXE_UPGMECHTANK: StExecute_UpgradeMech(arg1); break;
		case STEXE_GETMECHUPG: StExecute_GetMechUpgrade(arg1); break;
		case STEXE_EnterMECHTANK: StExecute_EnterMechTank(); break;
		
		case STEXE_POWBUY: StExecute_BuyPowerup(arg1); break;
	
		case STEXE_ITEMBUY: StExecute_BuyItem(arg1); break;
		case STEXE_ITEMGET: StExecute_GetItem(arg1); break;
		
		case STEXE_WEPRC: StExecute_RecycleWeapon(arg1, arg2, arg3); break;
		case STEXE_MSGRC: StExecute_RecycleAccepted(arg1, arg2); break;
		case STEXE_ASKRC: StExecute_AskForRecycle(arg1, arg2); break;
		
		case STEXE_LUP_NEXTP: StExecute_LUPnextPage(); break;
		case STEXE_LUP_PREVP: StExecute_LUPprevPage(); break;
		case STEXE_GETUP: StExecute_UpgradeWeapon(arg1, arg2); break;
		case STEXE_MSGUP: StExecute_UpgradeAccepted(arg1, arg2); break;
		case STEXE_ASKUP: StExecute_AskForUpgrade(arg1, arg2); break;
		
		/*
		
		case STEXE_ShowBuyPage: STExecute_ShowBuyPage(arg1); break;
		*/
		
		case STEXE_HowKind: STExecute_AYesFun(); break;
		case STEXE_HowRude: STExecute_ANoFun(); break;
		case STEXE_YES: STExecute_YesAction(); break;
		case STEXE_NO: STExecute_NoAction(); break;
		case STEXE_OKAY: STExecute_OkayAction(); break;
		case STEXE_SAYHI: STExecute_SayHi(); break;
		case STEXE_ASK: STExecute_Ask(); break;
		case STEXE_CLOSE: STExecute_Close(); break;
		case STEXE_SYSOFF: STExecute_Shutdown(); break;
		case STEXE_OPEN: STExecute_Open(arg1); break;
		case STEXE_GTCAT: StExecute_GoToCategory(arg1, arg2); break;
		default: 
			Toaster_ShowToast(StrAddInt("Command not defined yet. ", cmd),CR_RED);
		break;
	}
}

/**
*
*	stexec_funs.acs
* 	What it's gonna happen when the handler calls a function.
* 	Get wild with the functions!
*	Note: The arguments are limited to bytes. (0 - 255)
*
*/

function void STExecute_OkayAction(void){
	localAmbientSound("SamuTerm/HopOut",127);
	Prompt_SetState(false);
	Input_ClearBinds();
	Input_BindDirections();
}

function void Samuterm_HelloPrompt(void){
	//Prompt_Resize(40,20);

	Panel_setVirtualSize(prompt_data[STPROMPT_DATA_PANEL],0.0,64.0);
	Panel_SetScrollAmount(prompt_data[STPROMPT_DATA_PANEL],0.0,8.0);
	Prompt_Notify("Something new!", 
	"Now, on prompts, you can \ciaccept or dismiss\c- this message with  the \cguse \c-key, and \cidecline or cancel\c- with either the \cgalt-fire or crouch\c- key!\n\n Try dismissing this message with the use key."
	, CR_GREEN);
	//Toaster_ShowToast("Holy shiet! I'm toast!", CR_RED);
}

function void STExecute_SayHi(void){
	//Prompt_Resize(40,20);

	Panel_setVirtualSize(prompt_data[STPROMPT_DATA_PANEL],0.0,128.0);
	Panel_SetScrollAmount(prompt_data[STPROMPT_DATA_PANEL],0.0,8.0);
	Prompt_Notify("Greetings", 
	" I am Amy, your computarizated voice, and welcome to the Systemic Advanced Monitored User-frendly Terminal. S.A.M.U. Terminal for short.\n\n My duty is to serve you for any needings you'd wish.\n\n Try interacting with the \cgPrimary Click \c-button to gain acesss for many functions for you.\n\n Now, tell me, what do you need this time?"
	, CR_GREEN);
	//Toaster_ShowToast("Holy shiet! I'm toast!", CR_RED);
}
function void STExecute_Ask(void){
	Prompt_Ask("A simple question", 
	"Do you love me?", 
	CR_BRICK);
	//Toaster_ShowToast("Holy shiet! I'm toast!", CR_RED);
}

function void STExecute_GoToCategory(int tagCategory, str title){
	pagetags[STTAGS_LAST] = pagetags[STTAGS_NOW];
	pagetags[STTAGS_NOW] = tagCategory; 
	
}

function void STExecute_AYesFun(void){
	int rand = random(0,2);
	//print(s:"Yes execute");
	switch(rand){
		case 0:
			Toaster_ShowToast("How kind of you.",CR_BLUE);
		break;
		case 1:
			Toaster_ShowToast("I'd love more, if you tell me what you need.",CR_BLUE);
		break;
		case 2:
			Toaster_ShowToast("I'd wish to be a human right now, to give you a hug.",CR_BLUE);
		break;
	}
	
}

function void STExecute_ANoFun(void){
	int rand = random(0,2);
	switch(rand){
		case 0:
			Toaster_ShowToast("It's because I'm a A.I.?",CR_RED);
		break;
		case 1:
			Toaster_ShowToast("I have programmed feelings you know.",CR_RED);
		break;
		case 2:
			Toaster_ShowToast("Well, I wish your worst too, idiot.",CR_RED);
		break;
	}
}

function void STExecute_YesAction(void){
	Prompt_SetValue(true);
	Prompt_SetState(false);
	Input_ClearBinds();
	Input_BindDirections();
	int cmd = Prompt_GetExecute_YesAction();
	int arg1 = Prompt_GetExeArg1_YesAction();
	int arg2 = Prompt_GetExeArg2_YesAction();
	int arg3 = Prompt_GetExeArg3_YesAction();
	//print(d:arg1);
	
	SamuTerm_CallOpExecute(cmd,arg1,arg2,arg3);
	localAmbientSound("SamuTerm/HopOut",127);
	
	//print(s: "Yes");
	//print(s:"Yes execute, completed.");
}

function void STExecute_NoAction(void){
	Prompt_SetValue(false);
	Prompt_SetState(false);
	Input_ClearBinds();
	Input_BindDirections();
	int cmd = Prompt_GetExecute_NoAction();
	int arg1 = Prompt_GetExeArg1_NoAction();
	int arg2 = Prompt_GetExeArg2_NoAction();
	int arg3 = Prompt_GetExeArg3_NoAction();
	
	SamuTerm_CallOpExecute(cmd,arg1,arg2,arg3);
	localAmbientSound("SamuTerm/HopOut",127);
	//print(s: "No");
	//print(s:"No execute, completed.");
}

function void STExecute_Shutdown(void){
	SetInventory("SamuTInv_UsingTerminal", 0);
	SetInventory("SamuTInv_HideSBAR", 0);
	SetInventory("SamuTInv_ForcedExit", 0);
	pagetags[STTAGS_ALPHA] = 0;
	pagetags[STTAGS_LAST] = 0;
	pagetags[STTAGS_NOW] = 0;
	cursor_hover[STCURSOR_HOVER_COMP] = -1;
	cursor_hover[STCURSOR_HOVER_COMPTYPE] = -1;
	cursor_hover[STCURSOR_HOVER_LAST] = -2;
	exitResult = -1;
}

function void STExecute_Close(void){
	SetInventory("SamuTInv_UsingTerminal", 0);
	SetInventory("SamuTInv_HideSBAR", 0);
	SetInventory("SamuTInv_ForcedExit", 0);
	pagetags[STTAGS_ALPHA] = 0;
	pagetags[STTAGS_LAST] = 0;
	pagetags[STTAGS_NOW] = 0;
	cursor_hover[STCURSOR_HOVER_COMP] = -1;
	cursor_hover[STCURSOR_HOVER_COMPTYPE] = -1;
	cursor_hover[STCURSOR_HOVER_LAST] = -2;
	exitResult = 0;
	//localambientsound("Amy/Farewell", 127);
}

function void STExecute_Open(int taggy){
	SetInventory("SamuTInv_UsingTerminal", 1);
	ACS_NamedExecuteAlways("SamuTerminal_Loop",0,taggy);
	//localambientsound("Amy/Welcome", 127);
	Samuterm_LockPlayer(playernumber());
}

function void STExecute_PanelScroll(int panel, int scrollx, int scrolly){
	int pan_offx = Panel_GetVirtualOffsetX(panel) + scrollx;
	int pan_offy = Panel_GetVirtualOffsetY(panel) + scrolly;
	if(pan_offx <= -Panel_GetVirtualWidth(panel)) pan_offx = -Panel_GetVirtualWidth(panel);
	if(pan_offx > 0) 						     pan_offx = 0.0;
	if(pan_offy <= -Panel_GetVirtualHeight(panel)) pan_offy = -Panel_GetVirtualHeight(panel);
	if(pan_offy > 0) 						      pan_offy = 0.0;
	Panel_SetVirtualOffset(panel, pan_offx, pan_offy);
	Panel_UpdateScrollButtons(panel);
}

function void STExecute_NumInputBtns(int npid, int dir){
	int maxvalue = NumInput_getMaxValue(npid);
	int minvalue = NumInput_getMinValue(npid);
	int value = NumInput_getValue(npid);
	int step = NumInput_getStepValue(npid);
	int loopvalues = NumInput_getLoopValues(npid);
	if(loopvalues) {
		if(value+(step*dir) > maxvalue) value = minvalue;
		else if (value+(step*dir) < minvalue) value = maxvalue;
		else value = value+(step*dir);
	}else value = clamp(value+(step*dir), minvalue, maxvalue);
	
	NumInput_setValue(npid, value);
}

function void StExecute_SelectComponent(int selectDirection, int y){
	Input_ClearSelectableComps();
	int i, p;
	// pick all the selectionable components, the ImgButton and StrButton.
	// Also calculate the distances between cursor and component.
	for(i = 0; i < comp_count[STCOMP_IBTN]; i++){
		p = ImgButton_GetParent(i);
		if(p!= -1){
			if(ImgButton_GetShow(i) && Panel_IntersectsImgButton(p, i) && Panel_GetShow(p)){
				Input_AddSelectableComponent(STCOMP_IBTN, i);
			}
		}else{
			if(ImgButton_GetShow(i)){
				Input_AddSelectableComponent(STCOMP_IBTN, i);
			}
		}
	}
	for(i = 0; i < comp_count[STCOMP_SBTN]; i++){
		p = StrButton_GetParent(i);
		if(p!= -1){
			if(StrButton_GetShow(i) && Panel_IntersectsStrButton(p, i) && Panel_GetShow(p)){
				Input_AddSelectableComponent(STCOMP_SBTN, i);
			}
		}else{
			if(StrButton_GetShow(i)){
				Input_AddSelectableComponent(STCOMP_SBTN, i);
			}
		}
	}
	// Now, get the current component position. If no component, then take the cursor position.
	// Take the center point of component.
	int hoveredcomp[2];
	hoveredcomp[0] = CursorX(); hoveredcomp[1] = CursorY(); 
	if(cursor_hover[STCURSOR_HOVER_COMP] != -1){
		if(cursor_hover[STCURSOR_HOVER_COMPTYPE] == STCOMP_IBTN) {
			hoveredcomp[0] = ImgButton_GetXMOffseted(cursor_hover[STCURSOR_HOVER_COMP]);
			hoveredcomp[1] = ImgButton_GetYMOffseted(cursor_hover[STCURSOR_HOVER_COMP]); 
		}else if(cursor_hover[STCURSOR_HOVER_COMPTYPE] == STCOMP_SBTN) {
			hoveredcomp[0] = StrButton_GetXMOffseted(cursor_hover[STCURSOR_HOVER_COMP]); 
			hoveredcomp[1] = StrButton_GetYMOffseted(cursor_hover[STCURSOR_HOVER_COMP]); 
		}
	}
	
	int comppos_selected[3];
	int pos_tomove[2];
	pos_tomove[0] = -1;
	pos_tomove[1] = -1;
	// Now Pick the closest component, depending on the orientation of the input.
	// 1) Check if the distance is shorter
	// 2) Check if the coordinate to check by input is less or more than what it's requested.
	// 3) Check if it's not the same component.
	// Buu 342: You want the distance of a rectangle (a menu item) to a point (the mouse x,y coordinate)
	// Alright got a formula for that. (Check second code).
	if(input_selectcomp[0][0] == STCOMP_IBTN) {
		pos_tomove[0] = ImgButton_GetXMOffseted(input_selectcomp[0][1]);
		pos_tomove[1] = ImgButton_GetYMOffseted(input_selectcomp[0][1]); 
	}else if(input_selectcomp[0][0] == STCOMP_SBTN) {
		pos_tomove[0] = StrButton_GetXMOffseted(input_selectcomp[0][1]); 
		pos_tomove[1] = StrButton_GetYMOffseted(input_selectcomp[0][1]); 
	}
	int distance_check = FIXED_MAX; // max float point.
	for(i = 0; i < input_selectcomp_count; i++){
		if(input_selectcomp[i][0] == STCOMP_IBTN) {
			comppos_selected[0] = ImgButton_GetXMOffseted(input_selectcomp[i][1]);
			comppos_selected[1] = ImgButton_GetYMOffseted(input_selectcomp[i][1]); 
		}else if(input_selectcomp[i][0] == STCOMP_SBTN) {
			comppos_selected[0] = StrButton_GetXMOffseted(input_selectcomp[i][1]); 
			comppos_selected[1] = StrButton_GetYMOffseted(input_selectcomp[i][1]); 
		}
		//log(s:"for button ", s:comppos_selected[2], s:", the distance is: ", f: input_selectcomp[i][2]);
		if(input_selectcomp[i][2] >= 0.0 && (distance_check > input_selectcomp[i][2])){ // The calcules will overflow, so, take only the positive results.
			if(selectDirection == 1 && (hoveredcomp[0] > comppos_selected[0])){
				pos_tomove[0] = comppos_selected[0];
				pos_tomove[1] = comppos_selected[1];
				distance_check = input_selectcomp[i][2];
			}
			if(selectDirection == 2 && (hoveredcomp[0] < comppos_selected[0])){
				pos_tomove[0] = comppos_selected[0];
				pos_tomove[1] = comppos_selected[1];
				distance_check = input_selectcomp[i][2];
			}
			if(selectDirection == 3 && (hoveredcomp[1] < comppos_selected[1])){
				pos_tomove[0] = comppos_selected[0];
				pos_tomove[1] = comppos_selected[1];
				distance_check = input_selectcomp[i][2];
			}
			if(selectDirection == 4 && (hoveredcomp[1] > comppos_selected[1])){
				pos_tomove[0] = comppos_selected[0];
				pos_tomove[1] = comppos_selected[1];
				distance_check = input_selectcomp[i][2];
			}
			/*log(s:"cursor: (", f:hoveredcomp[0], s:", ", f:hoveredcomp[1],
		 s:"), item ", d:i, s:", Comp. number: ", d:input_selectcomp[i][1], s:", Pos: (", f:comppos_selected[0], s:", ", f:comppos_selected[1], s:") ",
		 s:"shortest distance: ", f:distance_check, s:" Text: ", s:comppos_selected[2]);//*/
		 
		}
	}
	// Now, move the cursor to that button.
	if(pos_tomove[0] != -1 && pos_tomove[1] != -1) {
		SetCursorPosition(pos_tomove[0], pos_tomove[1]);
	}
}

#include "stexec_sfptermfuns.acs"
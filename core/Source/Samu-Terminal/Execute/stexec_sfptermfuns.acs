////////////////////////////////////////////////////////////////
//		Item buy functions
////////////////////////////////////////////////////////////////

function void StExecute_BuyPowerup(int which){
	int name = Item_getName(which);
	int price = Item_getPrice(which);
	int actor = Item_getActor(which);
	int maxamount = Item_getMax(which);
	
	if(SFPlus_getPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}else if(CheckInventory(actor) == maxamount){
		Toaster_ShowToast(stradd(stradd("You can't carry more ", name), "s!"), CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = which + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to buy a(n) ", name), "?"),CR_ORANGE);
		else{
			LocalAmbientSound("p/heal",128);
			Toaster_ShowToast(stradd(name," Pursached! Click for more!"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_ItemGet, which, 0, 0);
		}
		tmp[6] = tmp[5];
	}
}

function void StExecute_BuyItem(int which){
	int name = Item_getName(which);
	int price = Item_getPrice(which);
	int actor = Item_getActor(which);
	int maxamount = Item_getMax(which);
	
	if(SFPlus_getPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}else if(CheckInventory(actor) == maxamount){
		Toaster_ShowToast("You can't carry more of this!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = which + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to buy a(n) ", name), "?"),CR_ORANGE);
		else{
			LocalAmbientSound("p/upgrade",128);
			Toaster_ShowToast(StrParam(s:name, s:" Pursached! Click for more!"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_ItemGet, which, 0, 0);
		}
		tmp[6] = tmp[5];
	}
}

function void STExecute_GetItem(int which){
	int payprice = Item_getPrice(which);
	int actor = Item_getActor(which);
	sf_RemoveCredits(payprice, PlayerNumber());
	
	SetActivatorToPlayer(PlayerNumber());
	GiveInventory(actor, 1);
}

////////////////////////////////////////////////////////////////
//		Buy weapon functions
////////////////////////////////////////////////////////////////

function void STExecute_BuyWeapon(int which){
	
	int price = WeaponPack_getPrice(which);
	//print(d:which);
	if(SFPlus_getPlayCredits() < price)
	{	
		Toaster_ShowToast("Ya dont have enough!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		//SamuTerm_CallOpExecute (STEXE_GIVEWP, which, price,0);
		Prompt_Ask("Confirm", "Are you sure to buy this weapon pack?", CR_BRICK);
		Prompt_ExecuteOnTrue(STEXE_GETWP, which, 0, 0);
		//Toaster_ShowToast("Weapon pack equipped!",CR_GOLD);
	}
}

function void STExecute_GetWeapon(int which){
	Toaster_ShowToastLog("Weapon pack equipped!",CR_GOLD);
	buywpn_vars[25] = -99; // To let it update.
	SamuTerm_CallOpExecute(STEXE_GIVEWP, which, 0, 0);
	LocalAmbientSound("p/deploy",128);
}

function void STExecute_GiveWeapon(int which){
	int payprice = WeaponPack_getPrice(which);
	sf_RemoveCredits(payprice, PlayerNumber());
	
	WeaponPack_Give(which);
}

function void STExecute_BuyWepChangeWPPage(int dir){
	buywpn_vars[BWPAGE_CURRENT_PAGE] = 
		clamp(buywpn_vars[BWPAGE_CURRENT_PAGE] + dir,
		 0, (fp_WpCategoryStack[buywpn_vars[BWPAGE_SELECTED_CATEGORY]]/BWPAGE_WPPACK_PERPAGE));
	Panel_ResetVirtualOffset(buywpn_vars[BWPAGE_WPPACK_LISTPANEL]);
}

function void STExecute_BuyWepShowData(int which){
	buywpn_vars[BWPAGE_UPDATE_NOW] = buywpn_vars[BWPAGE_SELECTED_PACK];
	buywpn_vars[BWPAGE_SELECTED_PACK] = which;
	buywpn_vars[BWPAGE_SELECTED_WEAPON] = 0;
	NumInput_SetValue(buywpn_vars[BWPAGE_NUMINPUT_SELECTWP], 0);
}

function void STExecute_BuyWepSetCat(int which){
	buywpn_vars[BWPAGE_SELECTED_CATEGORY] = which;
	buywpn_vars[BWPAGE_CURRENT_PAGE] = 0;
	Panel_ResetVirtualOffset(buywpn_vars[BWPAGE_WPPACK_LISTPANEL]);
}

/*
function void STExecute_BuyWepChangeWeapon(int dir){
	buywpn_vars[BWPAGE_SELECTED_WEAPON] = clamp(buywpn_vars[BWPAGE_SELECTED_WEAPON] + dir, 1, 3);
	//log(s:"Indeed, im changing the weapon data, Weapon to show: ", d:buywpn_vars[BWPAGE_SELECTED_WEAPON]);
}*/

////////////////////////////////////////////////////////////////
//		Upgrade weapon functions
////////////////////////////////////////////////////////////////

function void StExecute_UpgPageDesc(int weapon, int uptype)
{
	str textd = WeaponUpgrade_GetDesc(weapon, uptype);
	str textt = WeaponUpgrade_GetName(weapon, uptype);
	/*
	log(s:"Weapon: \"", d:weapon, s:"\"");
	log(s:"Name: \"", s:textt, s:"\"");
	log(s:"Description: \"", s:textd, s:"\"");
	*/
	
	Label_setText(listup_vars[UWPAGE_LABEL_WEAPONNAME], textt);
	Label_setText(listup_vars[UWPAGE_LABEL_WEAPONDESC], textd);
	listup_vars[UWPAGE_VAR_HOVEREDUPTYPE] = uptype;
}

function void StExecute_UpgPageCat(int npid, int dir){
	STExecute_NumInputBtns(npid, dir);
	listup_vars[UWPAGE_VAR_CURRENTCATEGORY] = NumInput_getValue(npid);
	
	listup_vars[UWPAGE_VAR_CURRENTWEPPAGE] = 0;
	listup_vars[UWPAGE_VAR_SELECTEDWEP] = -1;
	listup_vars[UWPAGE_VAR_HOVEREDUPTYPE] = -1;
}

function void StExecute_UpPageOpenUps(int wep){
	listup_vars[UWPAGE_VAR_SELECTEDWEP] = wep;
}

function void STExecute_UpgradeWeapon(int which, int type){
	int payprice = WeaponUpgrade_getUpgPrice(which, type);
	
	sf_RemoveUpPoints(payprice, PlayerNumber());
	//Yes, even when upgrading, will crank up the difficulty too.
	fp_UpTrack += payprice;
	
	Weapon_Upgrade(which, type);
}

function void STExecute_UpgradeAccepted(int which, int type){
	listup_vars[UWPAGE_VAR_SELECTEDWEP] = -1;
	listup_vars[UWPAGE_VAR_HOVEREDUPTYPE] = -1;
	SamuTerm_CallOpExecute(STEXE_GETUP, which, type, 0);
	Toaster_ShowToastLog("Upgrade implemented sucessfully!", CR_GOLD);
	LocalAmbientSound("p/upgrade",128);
}

function void STExecute_AskForUpgrade(int which, int type){
	int price = WeaponUpgrade_getUpgPrice(which, type);
	
	if(SFPlus_getPlayUPts() < price){
		Toaster_ShowToast("You need more \cgUpgrade Points\c-!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
		} else {
		Prompt_Ask("Conf. Upgrade", 
			"Are you sure you want to apply this upgrade to your weapon?", CR_GREEN);
		Prompt_ExecuteOnTrue(STEXE_MSGUP, which, type, 0);
	}
}

////////////////////////////////////////////////////////////////
//		Recycle weapon functions
////////////////////////////////////////////////////////////////


function void STExecute_AskForRecycle(int weapon, int uptype){
	Prompt_Ask("Conf. Recycling", 
			"Are you sure you want to recycle this weapon?", CR_GREEN);
	Prompt_ExecuteOnTrue(STEXE_MSGRC, weapon, uptype, 0);
}

function void STExecute_RecycleAccepted(int which, int uptype){
	LocalAmbientSound("monies",128);
	SamuTerm_CallOpExecute(STEXE_WEPRC, which, uptype, playerNumber());
	Toaster_ShowToastLog("Recycling process completed!", CR_GOLD);
}

function void STExecute_RecycleWeapon(int weapon, int uptype, int play){	
	Weapon_Recycle(weapon, uptype, play);
}

function void StExecute_LabelWepRecycle(int wep, int up) {
	str weapon_name = Weapon_GetName(wep);
	str wepup_type_str = "\cjBase Weapon";
	int price = Weapon_GetPrice(wep);
	int color = term_catStyle[Weapon_GetCat(wep)][TERM_CATSTYLE_COLOR];
	if(up != -1){
		weapon_name = WeaponUpgrade_GetName(wep, up);
		wepup_type_str = strparam(s:"\cjWeapon Upgrade type ", d:up+1);
		price = WeaponUpgrade_GetRcyPrice(wep, up);
	} 
	Label_SetText(rcywpn_vars[RWPAGE_LABEL_WEAPONRCY], 
		strparam(s:wepup_type_str, s:"\n", s:weapon_name, s:"\n\cfRecycle Price: ", d:price, s:" Credits"));
	Label_SetColor(rcywpn_vars[RWPAGE_LABEL_WEAPONRCY], color);
}

////////////////////////////////////////////////////////////////
//		Mech Terminal functions
////////////////////////////////////////////////////////////////

function void StExecute_BuyMechTank(void){
	if(SFPlus_getPlayCredits() < Mech_GetPrice()){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}else{
		Toaster_ShowToastLog("The War Mech is yours to drive!",CR_GREEN);
		SamuTerm_CallOpExecute(STEXE_GetMechTank, 0, 0, 0);
	}
}

function void STExecute_GetMechTank(void){
	sf_RemoveCredits(Mech_GetPrice(), PlayerNumber());
	
	SetActivatorToPlayer(PlayerNumber());
	Acs_ExecuteAlways(305, 0);
}

function void STExecute_EnterMechTank(void){
	SetActivatorToPlayer(PlayerNumber());
	Acs_ExecuteAlways(306, 0);
	STExecute_Close();
}

function void STExecute_UpgradeMech(int which){
	int name = MechUp_getName(which);
	int actor = MechUp_getActor(which);
	int price = MechUp_getPrice(which);
	
	if(CheckInventory("Mech_State") == 99) {
		Toaster_ShowToast("You can't upgrade what its broken!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
		return;
		}
	
	if(SFPlus_getPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = which + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to apply the ", name), "?"),CR_ORANGE);
		else{
			localambientsound("vehicle/mechupgrade",128);
			Toaster_ShowToastLog(stradd(name," Installed! (click for more)"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_GETMECHUPG, which, 0, 0);
		}
		
		tmp[6] = tmp[5];
	}
}

function void STExecute_getMechUpgrade(int which){
	str actor = MechUp_getActor(which);
	int payprice = MechUp_getPrice(which);
	
	sf_RemoveCredits(payprice, PlayerNumber());

	MechUpTrack ++; 
	
	SetActivatorToPlayer(PlayerNumber());
	GiveInventory(actor, 1);
	ACS_NamedExecuteAlways("AnnounceMechUpgrade", 0, which);
}

////////////////////////////////////////////////////////////////
//		Player Upgrade functions
////////////////////////////////////////////////////////////////

function void STExecute_PlayUpTitleHover(int title, int btndata){
	bool alreadygot = PlayUp_CheckInv(PlayUp_getActor(btndata));
	bool canigetit = SFPlus_getPlayUPts() >= PlayUp_getPrice(btndata);
	
	int color = alreadygot ? CR_CYAN : (canigetit ? CR_WHITE : CR_ORANGE);
	Label_SetText(title, PlayUp_GetName(btndata));
	Label_setColor(title, color);
}

function void STExecute_PlayUpSetDesc(int up){
	playup_vars[6] = up;
	PlayUpPage_SetDetails(up);
}

function void STExecute_PlayUpGet(int which){
	int payprice;
	payprice = PlayUp_getPrice(which);
	
	sf_RemoveUpPoints(payprice, PlayerNumber());
	/*
	//Yes, even when upgrading, will crank up the difficulty too.
	*/
	fp_PlayUpTrack += payprice; 
	
	
	GiveInventory(PlayUp_getActor(which), 1);
}

function void STExecute_PlayUpSet(int which){
	SamuTerm_CallOpExecute(STEXE_PLAYUP_GET, which, 0, 0);
	Toaster_ShowToast("Upgrade implemented sucessfully!", CR_PURPLE);
	LocalAmbientSound("p/heal",128);
}

function void STExecute_PlayUpAsk(int up){
	int affordable = SFPlus_getPlayUPts() >= PlayUp_getPrice(up);
	
	if(!affordable){
		Toaster_ShowToast("You need more \cvUpgrade Points\c-!",CR_ORANGE);
		localAmbientSound("SamuTerm/Error",127);
		}
	else{
		Prompt_Ask("Conf. Upgrade", 
			"Are you sure you want to apply this upgrade to your unit?", CR_CYAN);
		Prompt_ExecuteOnTrue(STEXE_PLAYUP_SET, up, 0, 0);
	}
}

////////////////////////////////////////////////////////////////
//		Rune buy functions
////////////////////////////////////////////////////////////////

function void STExecute_RuneBuy(int r){
    int price = Rune_getPrice(r);
	//log(s:Rune_getPowerActor(r));
	if(SFPlus_getPlayCredits() < price)
	{	
		Toaster_ShowToast("You don't have enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}else if (CheckInventory(Rune_getPowerActor(r))){
        Toaster_ShowToast("You already have this rune linked!",CR_ORANGE);
		localAmbientSound("SamuTerm/Error",127);
    }
	else{
        str title = strparam(s:"Buy ", s:Rune_GetName(r) ,s:"?");
		Prompt_Ask(title, "\nAre you sure you want to buy this rune? \n\n\cfYour current rune will be replaced!", CR_CYAN);
		Prompt_ExecuteOnTrue(STEXE_RUNESHOP_GET, r, 0, 0);
		//Toaster_ShowToast("Weapon pack equipped!",CR_GOLD);
	}
}

function void STExecute_RuneGet(int r){
    str msg = strparam(s:Rune_GetName(r), s:" Rune linked!");
	Toaster_ShowToastLog(msg, CR_CYAN);
	SamuTerm_CallOpExecute(STEXE_RUNESHOP_GIVE, r, 0, 0);
	LocalAmbientSound("p/deploy",128);
}


function void STExecute_RuneGive(int r){
	sf_RemoveCredits(Rune_getPrice(r), PlayerNumber());

	SetActivatorToPlayer(PlayerNumber());
	GiveInventory(Rune_getActor(r), 1);
}

function void STExecute_RuneDesc(int r){
	/*
	log(s:Rune_GetName(r));
	log(s:Rune_GetDesc(r));
	*/
    Label_setText(runepage_vars[3], Rune_GetName(r));
	Label_setText(runepage_vars[4], Rune_GetDesc(r));
}

function void STExecute_RuneTierBuy(void){
	int tierup = CheckInventory("RuneTier");

    if(SFPlus_getPlayUPts() < Rune_getTierUnlockPrice(tierup+2)){
		Toaster_ShowToast("You need more \cvUpgrade Points\c-!",CR_ORANGE);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = tierup + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(strparam(s:"Sure to unlock the tier ", d:tierup+2, s:" of runes?"),CR_ORANGE);
		else{
			//localambientsound("vehicle/mechupgrade",128);
			Toaster_ShowToast(strparam(s:"Tier ",d:tierup+2,s:" unlocked! (click for more)"),CR_PURPLE);
			SamuTerm_CallOpExecute(STEXE_RUNESHOP_GIVETIER, 0, 0, 0);
		}
		
		tmp[6] = tmp[5];
	}
}

function void STExecute_RuneTierGive(void){
	int tierup = CheckInventory("RuneTier");
	
	RuneTrack++;
	sf_RemoveUpPoints(Rune_getTierUnlockPrice(tierup+2), PlayerNumber());

	SetActivatorToPlayer(PlayerNumber());
	GiveInventory("RuneTier", 1);
}

////////////////////////////////////////////////////////////////
//		Stimpack upgrades functions
////////////////////////////////////////////////////////////////

function void STExecute_StimUpBuy(int upgrade) {

    int name = StimUp_getName(upgrade);
	int actor = StimUp_getActor(upgrade);
	int price = StimUp_getPrice(upgrade);

    if(SFPlus_getPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = upgrade + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to apply the ", name), "?"),CR_ORANGE);
		else{
			localambientsound("vehicle/mechupgrade",128);
			Toaster_ShowToast(stradd(name," added! (click for more)"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_STIMUP_GIVE, upgrade, 0, 0);
		}
		
		tmp[6] = tmp[5];
	}
}
function void STExecute_StimUpGive(int upgrade) {
    str actor = StimUp_getActor(upgrade);
	int payprice = StimUp_getPrice(upgrade);

	sf_RemoveCredits(payprice, PlayerNumber());
	SetActivatorToPlayer(PlayerNumber());
	GiveInventory(actor, 1);
}

function void STExecute_StimUpDesc(int upgrade) {
    str desc = StimUp_GetDesc(upgrade);
    Label_SetText(stimpage_vars[2], desc);
}

////////////////////////////////////////////////////////////////
//		Commander terminal functions
////////////////////////////////////////////////////////////////

function void StExecute_CMDBtnDesc(int lbl_title, int lbl_desc, int btndata){
	
	if(btndata == -1) return;

	str name = CMDBut_getName(btndata);
	str desc = CMDBut_getDesc(btndata);
	int price = CMDBut_getPrice(btndata);
	bool acess = CMDBut_getAccessCond(btndata);
	//log(s:name);
	str reason_noacess = CMDBut_getNoAccessReason(btndata);

	if(!acess) name = strParam(s:name, s:" - Locked.");
	else if (price > 0) name = strParam(s:name, s:" - ", d:price, s:" $.");
	
	if(!acess){
		Label_SetText(lbl_desc, reason_noacess);
		Label_setColor(lbl_title, CR_BRICK);
	}else{
		Label_SetText(lbl_desc, desc);
		if(price != 0)
			Label_setColor(lbl_title, cond(SFPlus_getTeamCredits() >= price, CR_YELLOW, CR_ORANGE));
		else Label_setColor(lbl_title, CR_GREEN);
	}
	
	Label_SetText(lbl_title, name);
	
}

function void STExecute_CMDExecute(int command, int arg, int btndata){
	str scriptname; 
	int ignore = 	CMDBut_getIgnorePrice(btndata);
	int cost = 		CMDBut_getPrice(btndata);
	
	if(!ignore)	sf_RemoveTeamCredits(cost);
	switch(command){
		case 1: scriptname = "SFPlus_CMD_CallBuildScript"; break;
		case 2: scriptname = "SFPlus_CMD_CallUpgradeScript"; break;
		case 3: scriptname = "SFPlus_CMD_CallSpawnScript"; break;
		case 4: scriptname = "SFPlus_CMD_CallMarkScript"; break;
		case 5: scriptname = "SFPlus_CMD_CallSupportScript"; break;
	}
	ACS_NamedExecute(scriptname, 0, arg, cost);
}

function void STExecute_CMDEvent_DoIt(int btndata){
	int cost = 		CMDBut_getPrice(btndata);
	int e = 		CMDBut_getEvent(btndata);
	if(e != -1) 
		ACS_NamedExecute("SFPlus_CMDEvent", 0, e, cost);
}

function void STExecute_CMDEvent_Check(int plzdontuseme, int btndata){
	int ignore = 	CMDBut_getIgnorePrice(btndata);
	int cost = 		CMDBut_getPrice(btndata);
	int e = 		CMDBut_getEvent(btndata);
	if(e != -1) {
		if(CMDBut_GetAccessCond(btndata)){
			if(SFPlus_getTeamCredits() >= cost || ignore){
				SamuTerm_CallOpExecute(STEXE_CMDEVENT_DOIT, btndata, 0, 0);
			}else Toaster_ShowToast("Needs more credits to do this, Access Denied.", CR_RED);
		}
		else{
			Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
		}
	}else Toaster_ShowToast("This button does not contain a cmd event.", CR_RED);
}

function void STExecute_CMDGotToCat2(int dest, int btndata){

	if(!CMDBut_GetAccessCond(btndata))
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	else{
		//Toaster_ShowToast(strparam(s:"Going to category.", d:dest), CR_RED);
		CMDPage_SetButtonLayout(dest);
	}
}

function void STExecute_CMDGotToCat(int tagdest, int btndata){

	if(!CMDBut_GetAccessCond(btndata))
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	else{
		pagetags[STTAGS_LAST] = pagetags[STTAGS_NOW];
		pagetags[STTAGS_NOW] = tagdest;
	}
}

function void STExecute_CMDExit(void){
	c_Commander = 99;
	ACS_NamedExecute("SFPlus_CMDCleanup", 0); // Remove the left over markers from the air support.
	SamuTerm_Execute(STEXE_CLOSE, 0,0,0);
}

function void STExecute_CMDGoToCatExe(int tagdest, int execute){
	SamuTerm_Execute(execute, 0,0,0);
	pagetags[STTAGS_LAST] = pagetags[STTAGS_NOW];
	pagetags[STTAGS_NOW] = tagdest;
}

#library "fp_runes"
#include "zcommon.acs"
#import "fl_techs.acs"
#import "f_tip.acs"
#import "fl_runeDir.acs"

script "Rune_Events" (int type, int arg1, int arg2) Event {
    int hpold, hpnow;
    
    switch(type){
        case GAMEEVENT_ACTOR_DAMAGED:
            if(!stricmp(arg2, "Suicide")) terminate;
            hpold = getActorProperty(0, APROP_HEALTH);
            hpnow = hpold - arg1;
            if(playernumber() >= 0){
                SetResultValue(ACS_NamedExecuteWithResult("Runes_OnPlayerDamage", arg1, hpnow <= 0));
            }
        break;
        case GAMEEVENT_ACTOR_ARMORDAMAGED:
        //if(GetArmorInfo(ARMORINFO_CLASSNAME))log(s:GetArmorInfo(ARMORINFO_CLASSNAME));
            // Temperance will now add extra percentages to the saving amount
            int dmg = arg1;
            int percent;
            int direct_dmg;
            hpold = getActorProperty(0, APROP_HEALTH);
            hpnow = hpold - arg1;

            //log(s:arg2);
            if(!stricmp(arg2, "Suicide")) terminate;

            if(playernumber() >= 0){
                SetResultValue(ACS_NamedExecuteWithResult("Runes_OnPlayerDamage", arg1, hpnow <= 0));
            }

            if(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "TitaniumArmor") == 0){
                percent = 0.45 + 0.15 * checkinventory("RuneTemperance");
                dmg = (arg1 * (1.0 - percent)) >> 16;

               /*
                if(GameSkill() == 2 || GameSkill() == 5){
                    direct_dmg = (dmg*0.50) >> 16;
                    Thing_Damage2(0, direct_dmg, 0);
                }*/

                ArmorHitSFX(dmg);
                SetResultValue(dmg);
            }
            
             
            if(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "SteelPlatingArmor") == 0){
                percent = 0.175 + 0.16 * checkinventory("RuneTemperance");
                dmg = (arg1 * (1.0 - percent)) >> 16;

               /*
                if(GameSkill() == 2 || GameSkill() == 5){
                    direct_dmg = (dmg*0.50) >> 16;
                    Thing_Damage2(0, direct_dmg, 0);
                }*/

                ArmorHitSFX(dmg);
                SetResultValue(dmg);
            }

            if(stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "MegasphereArmor") == 0 ||
                stricmp(GetArmorInfo(ARMORINFO_CLASSNAME), "SuperMegasphere_Armor") == 0){
                percent = 0.30 + 0.20 * checkinventory("RuneTemperance");
                dmg = (arg1 * (1.0 - percent)) >> 16;

                /*
                if(GameSkill() == 2 || GameSkill() == 5){
                    direct_dmg = (dmg*0.50) >> 16;
                    Thing_Damage2(0, direct_dmg, 0);
                }*/
                
                ArmorHitSFX(dmg);
                SetResultValue(dmg);
            }
        break;
    }    
}

function void ArmorHitSFX(int dmg){
    if(CheckInventory("BasicArmor") <= dmg){
        LocalAmbientSound("runes/temperance/break", 127);
        GiveInventory("TemperanceRune_GuardBreak", 1);
        TakeInventory("Flag_RedArmor", 1);
        TakeInventory("Flag_BlueArmor", 1);
    }else {
        GiveInventory("TemperanceRune_GuardHit", 1);
        LocalAmbientSound("runes/temperance/hit", 127);
    }
}

Script "RuneSoul_Effect" (void) {
    while(checkinventory("RuneSoul")){
        If(CheckInventory("SoulRune_Kills") >= 100){
            GiveInventory("SoulRune_Reset", 1);
            GiveInventory("SoulRune_Soulsphere", 1);
        }
        delay(1);
    }
    GiveInventory("SoulRune_Reset", 1);
}

Script "RuneAmmunition_Effect" (void) {
    int tics;
    ACS_NamedExecuteAlways("Ammo_UpdateCaps", 0);
    while(checkinventory("RuneAmmunition")){
        if(tics == 1 && random(0, 100) < 30 && !CheckInventory("Inv_Power_Infinity")){
            GiveInventory("AmmunitionRune_Activate", 1);
            //log(s:"Infinite ammo.");
        }
        tics = (tics % 35) + 1;
        delay(1);
    }
    ACS_NamedExecuteAlways("Ammo_UpdateCaps", 0);
}

Script "RuneHealth_Effect" (void) {
    // Spread's triple ammo consumption.
    int health = GetActorProperty(0,APROP_HEALTH);
    bool bodyEnhance = CheckInventory("PlayUp_BodyEnhancement");
	bool health1 = Tech_IsDone(TECH_GENLAB_HEALTH1);
	bool health2 = Tech_IsDone(TECH_GENLAB_HEALTH2);
    int healthboost = 20*health1 + 20*health2 + 60*bodyEnhance;
    int stimul = CheckInventory("StimUp_Stimulant");
    int maxhp_normal;
    while(checkinventory("RuneHealth")){
        setactorproperty(0, APROP_SpawnHealth, maxhp_normal + 100);
        health = RuneEffect_ExtraHealth(health, 0.5); 
        maxhp_normal = 100 + healthboost + 20*stimul*CheckInventory("StimUp_StimulantPower");
        delay(1);
    }
    setactorproperty(0, APROP_SpawnHealth, maxhp_normal);
    TakeInventory("Health", PlayerHealth() - maxhp_normal);
}

Script "RuneSpread_Effect" (void) {
    // Spread's triple ammo consumption.
    int a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, i;
    a0 = CheckInventory("Clip");
    a1 = CheckInventory("ClipPistol");
    a2 = CheckInventory("Shell");
    a3 = CheckInventory("RocketAmmo");
    a4 = CheckInventory("Cell");
    a5 = CheckInventory("HeavyBullets");
    a6 = CheckInventory("Dualshot_Ammo");
    a7 = CheckInventory("GLauncher_Ammo");
    a8 = CheckInventory("Flinger_Ammo");
    a9 = CheckInventory("Gasoline");

    while(CheckInventory("RuneSpread")){
        a0 = RuneEffect_ConsumeMoreAmmo (a0, "Clip");
        a1 = RuneEffect_ConsumeMoreAmmo (a1, "ClipPistol");
        a2 = RuneEffect_ConsumeMoreAmmo (a2, "Shell");
        a3 = RuneEffect_ConsumeMoreAmmo (a3, "RocketAmmo");
        a4 = RuneEffect_ConsumeMoreAmmo (a4, "Cell");
        a5 = RuneEffect_ConsumeMoreAmmo (a5, "HeavyBullets");
        a6 = RuneEffect_ConsumeMoreAmmo (a6, "Dualshot_Ammo");
        a7 = RuneEffect_ConsumeMoreAmmo (a7, "GLauncher_Ammo");
        a8 = RuneEffect_ConsumeMoreAmmo (a8, "Flinger_Ammo");
        a9 = RuneEffect_ConsumeMoreAmmo (a9, "Gasoline");
        delay(1);
    }
}

function int RuneEffect_ConsumeMoreAmmo (int current_ammo, str ammo_type){
    int used_ammo;
    If(current_ammo != CheckInventory(ammo_type)) {
        used_ammo = current_ammo - CheckInventory(ammo_type);
        if(used_ammo > 0){
            TakeInventory(ammo_type, used_ammo*2);
        }
    }
    return CheckInventory(ammo_type);
}

function int RuneEffect_ExtraHealth(int last_health, int health_mult)
{
	int health = GetActorProperty(0, APROP_Health);
	int maxHealth = GetActorProperty(0, APROP_SpawnHealth);
	if(maxHealth == 0){ maxHealth = 100; /* default max */ }
	int left = maxHealth - health;
	if(left > 0 && last_health != health){
		int heal = health - last_health;
		if(heal >= left) heal = left; // Only gains, not loss
		// The difference between the health on the last tick and your current health is recived.
		GiveInventory("Health", (heal * health_mult) >> 16);
		//Print(s:"ExtraHealth: ", d:((heal * health_mult) >> 16));
	}
	last_health = GetActorProperty(0, APROP_Health);
	return last_health;
}

script "SFPlus_OnTeleport" (void) {
	// What happens to the teleported things?
	SetActivatorToTarget(0);
	delay(5);
    int tid = ActivatorTID();
	if(CheckActorClass(tid, "FrenzyPlayer")){
		// If a player was teleported, check if he got the spawn protection upgrade.
		if(CheckActorInventory(tid, "PlayUp_SpawnShield") && !CheckActorInventory(tid, "PlayUp_Spawnshield_Cooldown")){
            if(!CheckActorInventory(tid, "PlayUp_SpawnShield_Power")){
                giveActorinventory(tid,"PlayUp_SpawnShield_Activate", 1);
                
                delay(35*10); // 10 second's effect
                giveActorinventory(tid,"PlayUp_SpawnShield_Cooldown", 5);
                while(CheckActorInventory(tid, "PlayUp_Spawnshield_Cooldown")){
                    takeActorinventory(tid,"PlayUp_SpawnShield_Cooldown", 1);
                    delay(35);
                }
            }
		}
	}
}

script "Runes_OnPlayerDamage" (int dmg, int fatal){
    int TotalDmg = dmg;
    if(fatal){
        if(checkinventory("RuneResurrection")){
            GiveInventory("ResurrectionRune_Activate", 1);
            TotalDmg = 0; // Deny effective damage.
        }
        
        if(CheckInventory("PlayUp_Prometeo") && !CheckInventory("PlayUp_Prometeo_Used")){
            // Activate Prometeo Protocol effect.
            setactorproperty(0, APROP_SpawnHealth, 50);
            setactorproperty(0, APROP_Health, 51);
            giveinventory("PlayUp_Prometeo_Activate", 1);
            TotalDmg = 1; // Just to call the pain state.
        }
    }
    else{
        if(checkinventory("RuneDefense") && !CheckInventory("DefenseRune_Token")){
            ACS_NamedExecuteAlways("RuneDefense_Activate", 0);
        }

        if(checkinventory("RuneBlast")){
            GiveInventory("BlastRune_Activate", 1);
        }
    }
    SetResultValue(TotalDmg);
}

Script "RuneDefense_Activate" (void){
    if(CheckInventory("DefenseRune_Token") || CheckInventory("PowerInvulnerable")) Terminate;
    GiveInventory("DefenseRune_Token", 1);
    delay(1); // Take all the damage within this tic.
    GiveInventory("DefenseRune_Activate", 1);
    TakeInventory("DefenseRune_Token", 1);
}


script "Runes_OnMonsterKill" (int ischamp){
    if(checkinventory("RuneRampage") && GetActorPowerupTics(0, "RampageRune_Damage") < 350){ // limited to 10 seconds.
        GiveInventory("RampageRune_Activate", 1);
    }

    if(checkinventory("RuneSoul")){
        if(ischamp) GiveInventory("SoulRune_ChampCounter", 1);
        else        GiveInventory("SoulRune_Counter", 1);
    }
}

script "Runes_PickMessage" (int type){
    if(!CheckActorClass(0, "MechPlayer")){
        ACS_NamedExecuteAlways("Runes_ShowPickMessage", 0, type);
    }
    
}

script "Runes_ShowPickMessage" (int type) CLIENTSIDE{
    //SFPlus_DefineRunes();
    f_SmallTip_Runes (Strparam(s:"Hold \ci",k:"+use",s:"\c- to link the \cj",s:Rune_getName(type),s:" \c-rune!"), CR_CYAN, 0);
}

script "SFPlus_Dash" (void){
    int DASH_SPD = 40; // Speed defined by monster.
    int dashAngle = GetActorAngle(0);
    int speed_cap = (DASH_SPD * 10.0) >> 16;
    int factor_slide = 0.12;
    str str_speed = "";
    int a = "";
    int slidertime = 35;
    int i;
    int min_speed;
    for(i = 0; i < slidertime; i++)
    {
        if(GetActorZ(0) == GetActorFloorZ(0))
        {
            SetActorPosition(0, GetActorX(0), GetActorY(0), GetActorZ(0)+1.0, FALSE);
            SetActorVelocity(0, cos(dashAngle) * DASH_SPD, sin(dashAngle) * DASH_SPD, 0.0, FALSE, FALSE);
            //if(DASH_SPD < speed_cap) 
            if((DASH_SPD * factor_slide) < 1.0) min_speed = 1;
            else min_speed = (DASH_SPD * factor_slide >> 16);
            DASH_SPD = DASH_SPD - min_speed;// slow it down
            if(DASH_SPD < 0)SetActorVelocity(0, 0, 0, 0.0, FALSE, FALSE);
            a = strparam(s:" dash_speed: ", d:DASH_SPD, s:" \n");
            str_speed = strparam(s:str_speed, s:a);
            print(s:str_speed);
        }
        delay(4);
    }
}


//#include "weapon_funs.acs"
//#include "recycle_funs.acs"
#include "constants.acs"
#include "players_funs.acs"
#include "cside_scripts.acs"
#include "autouse_scripts.acs"

function void setupTerminals(void){
	Tech_Set(TECH_GENLAB, 		TECHF_DONE);
	Tech_Set(TECH_ARMORY, 		TECHF_DONE);
	Tech_Set(TECH_ARMORY_ARMS1, 	TECHF_DONE);
	Tech_Set(TECH_ARMORY_ARMS2, 	TECHF_DONE);
}

function bool IsActivatingClient(void){
	return ConsolePlayerNumber() == PlayerNumber(); 
}


function void sf_AddCredits(int howMuch, int who){
	p_Credits[who] += howMuch;
	ACS_NamedExecuteAlways("SF_CreditAddDisplay", 0, howmuch, CR_GOLD, 2);
}

function void sf_AddCredits_S(int howMuch, int who){
	p_Credits[who] += howMuch;
}

function void sf_AddDroneTips(int howMuch, int who){
	p_Credits[who] += howMuch;
	ACS_NamedExecuteAlways("SF_CreditAddDisplay", 0, howmuch, CR_BLUE, -1);
}

function void sf_AddTips(int howMuch, int who){
	p_Credits[who] += howMuch;
	ACS_NamedExecuteAlways("SF_CreditAddDisplay", 0, howmuch, CR_WHITE, -1);
}

function void sf_AddUpPoints(int howMuch, int who){
	p_EXP_Points[who] += howMuch;
	ACS_NamedExecuteAlways("SF_UPAddDisplay", 0, howmuch, CR_CYAN, true);
}

function void sf_RemoveUpPoints(int howMuch, int who){
	p_EXP_Points[who] -= howMuch;
	ACS_NamedExecuteAlways("SF_UPRemoveDisplay", 0, howmuch, CR_ORANGE, true);
}

function void sf_RemoveCredits(int howMuch, int who){
	p_Credits[who] -= howMuch;
	ACS_NamedExecuteAlways("SF_CreditRemoveDisplay", 0, howmuch, CR_BRICK, true);
}

function void sf_AddTeamCredits(int howMuch){
	c_Credits += howMuch;
}

function void sf_RemoveTeamCredits(int howMuch){
	c_Credits -= howMuch;
}

function bool Human(void){
	return playernumber() != -1;
}

function int sf_GetMonsterClass(int id){
	int res;
	// class 1

  switch (id)
    {
    
  // class 0 (1-50 hp) 5

      case 14: // Zombieman, 20 hp
      case 15: // Shotgun guy, 30 hp
      case 16: // FastZombie, 2 hp
      case 18: // SpiderImpHead, 15 hp
      case 31: // ChainsawZombie, 30 hp
        res = 0;
		break;

      // class 1 (50-100 hp) 10
      case 8: // Chaingun guy, 70 hp
      case 9: // Imp, 60 hp
      case 25: // Hellion, 70 hp
      case 27: // SSG Zombie, 90 hp
      case 39: // Zombie on a turbo segway, 60 hp
      case 40: // Slime Imp, 90 hp
        res = 1;
		break;

      
	  // class 2 (100-200 hp) 15
      case 1: // Demon, 150 hp
      case 11: // Lost soul, 100 hp
      case 17: // MeleeZombie, 100 hp
      case 26: // Nail Borg, 180 hp
      case 32: // Nami Dark Imp, 120 hp
      case 33: // Void Dark Imp, 130 hp
      case 34: // Devil, 120 hp
      case 35: // Double Chaingunner, 100 hp
      case 42: // Suicide Bomber, 120 hp
        res = 2;
		break;


      // class 3 (200-600 hp) 30
      case 2: // Arachnotron, 500 hp
      case 5: // Hell Knight, 500 hp
      case 6: // Cacodemon, 400 hp
      case 12: // Revenant, 300 hp
      case 29: // Mech-Demon, 300 hp
      case 30: // Bloodfiend, 250 hp
      case 36: // Hellhound, 300 hp
      case 37: // Nail Borg Commando, 230 hp
      case 38: // Zombie with a Repeater, 200 hp
      case 41: // Stone Demon, 400 hp
        res = 3;
        break;


      // class 4 (600-1000 hp) 100
      case 3: // Archvile, 700 hp
      case 4: // Baron of Hell, 1000 hp
      case 10: // Mancubus, 600 hp
      case 20: // Afrit, 800 hp
      case 22: // Cyber Baron, 800 hp
      case 24: // Fusion Spider, 600 hp
        res = 4;
        break;


      // class 5 (1000-5000 hp) 250
      case 7: // Cyberdemon, 4000 hp
      case 13: // Spiderdemon, 3000 hp
      case 21: // Archon Of Hell, 2000 hp
      case 23: // Cybruiser, 2000 hp
        res = 5;
        break;


      // class 6 (5000+ hp) 500
      case 19: // Cyber Annihilator, 7000 hp
      case 28: // Demolisher, 65000 hp
        res = 6;
        break;
    }
	return res;
}

function int btween(int a, int b, int x, int resyes, int resno){
	if(x >= a && x <= b) return resyes;
	return resno;
}

function int sf_GetMonsterClass_Health(void){
	int res = -1;
	bool des = false;
	
	int hp = GetActorProperty(0, AProp_SpawnHealth);
	
	res = btween(1, 	50, 	hp, 0, res);
	res = btween(51, 	100, 	hp, 1, res);
	res = btween(101, 	200, 	hp, 2, res);
	res = btween(201, 	600, 	hp, 3, res);
	res = btween(601, 	1000,  	hp, 4, res);
	res = btween(1001, 	5000, 	hp, 5, res);
	res = btween(5001, 	9999999, 	hp, 6, res);
	return res;
}
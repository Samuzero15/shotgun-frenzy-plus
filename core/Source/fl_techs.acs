///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fl_techs.acs
// Technologies directory

// All of the tech you need in this.

#library "fl_techs"
#include "zcommon.acs"
#include "acsutils.acs"

#libdefine FP_NUMBTECH 33
#libdefine TECHF_DONE 	1<<0
#libdefine TECHF_LOCK 	1<<1
#libdefine TECHF_LOAD 	1<<2

#libdefine TECH_GENLAB			0
#libdefine TECH_GENLAB_HEALTH1	1
#libdefine TECH_GENLAB_HEALTH2	2
#libdefine TECH_GENLAB_ARMOR	3
#libdefine TECH_GENLAB_SPEEDB	4
#libdefine TECH_GENLAB_RESISB	5
#libdefine TECH_GENLAB_REGENB	6
#libdefine TECH_ARMORY			7
#libdefine TECH_ARMORY_ARMS1	8
#libdefine TECH_ARMORY_ARMS2	9
#libdefine TECH_ARMORY_BOOMRN	10
#libdefine TECH_ARMORY_AMMOBP	11
#libdefine TECH_ARMORY_GNADES	12
#libdefine TECH_GENLAB_STIMPK	13
#libdefine TECH_REFINE			14
#libdefine TECH_REFINE_PUMP1	15
#libdefine TECH_REFINE_PUMP2	16
#libdefine TECH_MARCOM			17
#libdefine TECH_MARCOM_AIRSUP	18
#libdefine TECH_MARCOM_VETMER	19
#libdefine TECH_MARCOM_ADVSYS	20
#libdefine TECH_MARCOM_IONCAN	21
#libdefine TECH_MARCOM_CPULSE	22
#libdefine TECH_MECHFA			23
#libdefine TECH_NUKESY			24
#libdefine TECH_MARCOM_REPDRN   25
#libdefine TECH_MARCOM_GEARUP	26
#libdefine TECH_MARCOM_SOLIDG	27
#libdefine TECH_MARCOM_TARMOR	28
#libdefine TECH_REFINE_BOUNTY	29
#libdefine TECH_REFINE_DEEPER	30
#libdefine TECH_REFINE_FASTER	31
#libdefine TECH_GENLAB_RUSYNC	32
#libdefine TECH_MARCOM_CBOOST	33
#libdefine TECH_MARCOM_COPTIM	34
#libdefine TECH_REFINE_ENGINE	35
#libdefine TECH_REFINE_COINX5	36

int fp_techstate[99];
int fp_techflags[2][3];
// 32 * 2 = 64 flags.
function void SFPlus_DefineTechs(void){
	for(int i = 0; i < FP_NUMBTECH; i++){
		Tech_Set(i, 0);
	}
}

// Decorate call.
Script "SFPlus_SetTech" (int which, int value){
	if(which > 0 && which < FP_NUMBTECH)
		Tech_Set(which, value);
	else printbold(s:"Invalid tech");
}

Script "SFPlus_SyncTechs" ENTER{
	while(1){
		SetInventory("tech_doneflags", 	fp_techflags[0][0]);
		SetInventory("tech_lockflags", 	fp_techflags[0][1]);
		SetInventory("tech_loadflags", 	fp_techflags[0][2]);
		SetInventory("tech_doneflags2", fp_techflags[1][0]);
		SetInventory("tech_lockflags2", fp_techflags[1][1]);
		SetInventory("tech_loadflags2", fp_techflags[1][2]);
		delay(1);
		/*printbold(s:"tech_doneflags: ", d:checkinventory("tech_doneflags"), s:"\n",
		          s:"tech_doneflags2: ", d:checkinventory("tech_doneflags2"));*/
	}
}

function bool Tech_IsActivatedC(int flag){
	return Tech_IsDoneC(flag) || Tech_IsLockC(flag);
}

function bool Tech_IsDoneC(int flag){
	int res;
	switch(flag / 32){
		case 0: res = ((CheckInventory("tech_doneflags") & (1<<flag)) > 0); break;
		case 1: res = ((CheckInventory("tech_doneflags2") & (1<<flag)) > 0); break;
	}
	return res;
}

function bool Tech_IsLockC(int flag){
	int res;
	switch(flag / 32){
		case 0: res = ((CheckInventory("tech_lockflags") & (1<<flag)) > 0); break;
		case 1: res = ((CheckInventory("tech_lockflags2") & (1<<flag)) > 0); break;
	}
	return res;
}

function bool Tech_IsLoadC(int flag){
	int res;
	switch(flag / 32){
		case 0: res = ((CheckInventory("tech_loadflags") & (1<<flag)) > 0); break;
		case 1: res = ((CheckInventory("tech_loadflags2") & (1<<flag)) > 0); break; 
	} 
	return res;
}

function void Tech_ChangeFlags(int id, int flag, int value)
{
  int flag_group = flag / 32;
  int flags = fp_techflags[flag_group][id];
  int bit = flag % 32;
  if (value)
    flags |= 1<<bit; // set bit to 1
  else
    flags &= ~(1<<bit); // set bit to 0
  fp_techflags[flag_group][id] = flags;
}

function void Tech_ChangeDone(int flag, int value)
{
	Tech_ChangeFlags(0, flag, value);
}

function void Tech_ChangeLock(int flag, int value)
{
	Tech_ChangeFlags(1, flag, value);
}

function void Tech_ChangeLoad(int flag, int value)
{
	Tech_ChangeFlags(2, flag, value);
}


function int Tech_Get(int which){
	return fp_techstate[which];
}

function void Tech_SetDone(int which, int flags){
	Tech_Set(which, TECHF_DONE | flags);
}

function void Tech_Set(int which, int flags){
	
	if(flags & TECHF_DONE)
			Tech_ChangeDone(which, true);
	else 	Tech_ChangeDone(which, false);
	
	if(flags & TECHF_LOCK)
			Tech_ChangeLock(which, true);
	else 	Tech_ChangeLock(which, false);
	
	if(flags & TECHF_LOAD)
			Tech_ChangeLoad(which, true);
	else 	Tech_ChangeLoad(which, false);
	
	fp_techstate[which] = flags;
}

function bool Tech_IsDone(int which){
	return fp_techstate[which] & TECHF_DONE;
}

function bool Tech_IsLock(int which){
	return fp_techstate[which] & TECHF_LOCK;
}

function bool Tech_IsLoad(int which){
	return fp_techstate[which] & TECHF_LOAD;
}

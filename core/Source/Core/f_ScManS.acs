///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_SecMan.acs
// manages the sectors
#library "f_ScManS"

#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fp_AISet.acs"
#include "zcommon.acs"

function int m_CalcSector (void)
{
    // locals
    int l_Result;
    
    // check demon count (per sector)
    m_InSector[0] = thingcount(0, 111);
    m_InSector[1] = thingcount(0, 112);
    m_InSector[2] = thingcount(0, 113);
    m_InSector[3] = thingcount(0, 114);
    
    if (g_Status == 1)      l_Result = m_InSector[0];
    if (g_Status == 2)      l_Result = m_InSector[0] + m_InSector[1];
    if (g_Status == 3)      l_Result = m_InSector[1] + m_InSector[2];
    if (g_Status == 4)      l_Result = m_InSector[2] + m_InSector[3];
    
    return l_Result;
}

function int m_CalcTotal (void)
{
    // locals
    int l_Result;
    
    // count total demons
    l_Result = thingcount(0, 111) + thingcount(0, 112) + thingcount(0, 113) + thingcount(0, 114);
    
    return l_Result;
}

// setup comm cash and wait for players to enter the game
script 51 OPEN
{
    // setup default credits for the commander
    c_Credits = c_Startcash;
    
    while(playercount() == 0 || !g_Initialized) delay(1);
    g_Status = 4; 
}

// sector open
script 100 OPEN
{
    // define a container
    int l_RemainingMonsters = 0;
    
    // activate beginning lift
    floor_raisetonearest(105, 50);
    
    // locals
    int l_CurrentSector;
    int time, timecvar = GetCvar("sf_doorholdtime");
	int alarmsUsed = 0;
    // wait until the game is active
    while(g_Status == 0)
        delay(35);
    
    // setup current sector
    l_CurrentSector = g_Status;
    
    while(1)
    {

        // print centerscreen message
        sethudsize(800, 600, 0);
        setfont("STATBIGS");
        if (f_SurvivalLastLevel == m_SurvivalWave) {
        	hudmessage(s:"FINAL WAVE"; 2, 0, cr_red, 400.0, 200.0, 5.0); 
            setfont("CONFONT");
            hudmessage(s:"Final Wave", d:m_SurvivalWave; 2, 2, cr_white, 400.0, 45.0, 9999.0);
        }
        else {
        	hudmessage(s:"Wave ", d:m_SurvivalWave; 2, 0, cr_red, 400.0, 200.0, 5.0);
            setfont("CONFONT");
            hudmessage(s:"Wave ", d:m_SurvivalWave; 2, 2, cr_white, 400.0, 45.0, 9999.0);
        }
        g_MonstersLeft = 0;

        // heal core
        acs_execute(405, 0, 0, 0, 0);
		
		time = timecvar;
		acs_execute(129, 0, 1, time, 0);
		if(time != 30 || time != 15 || time != 5) Notify_Message("DEMON WAVE Spawning",strParam(d:time, s:" secs..."), "DEMONT", 0);
        
		while(time != 0){// The timer before opening a door.
			if(time == 10 || time == 5 || time == 30){
				Notify_Message("DEMON WAVE Spawning",strParam(d:time, s:" secs..."), "DEMONT", 0);
			}

			if(Time <= 5){
				if (alarmsUsed == 0){
					ambientsound("TIME", 125);
				}
			}
			delay(35);
			time--;
		}
		Notify_Message("DEMON WAVE is spawning!","Give'em Hell!", "DEMONT", 0);
        
		if (alarmsUsed == 0){
			ambientsound("ATTACK", 125);
		}
		alarmsUsed += 1;
		
		
                
        // remove first blocker
        thing_remove(50);
        
        // breached sound
        ambientsound("cv/sector4", 125);
        
        // reactivate script
        acs_execute(120, 0, 0, 0, 0);
        
        // remove first spawn blockers
        thing_remove(70);
        
        // start counting the waves (skill modifiers for less players ( =less demons))
        if (playercount() < 2) {
            while (f_AIDir_SpawnCount < demon_spawncount[m_SurvivalWave-1]/3){
                f_AIDir_SpawnCount ++;
	thing_hate(110, 104, 4);
                delay(35);
            }
        }
        else if (playercount() < 3) {
            while (f_AIDir_SpawnCount < demon_spawncount[m_SurvivalWave-1]/2){
                f_AIDir_SpawnCount ++;
	thing_hate(110, 104, 4);
                delay(35);
            }
        }
        else {
            while (f_AIDir_SpawnCount < demon_spawncount[m_SurvivalWave-1]){
                f_AIDir_SpawnCount ++;
	thing_hate(110, 104, 4);
                delay(35);
            }
        }
        
        // kill remaining demons
		Notify_Message("DEMON WAVE is flawing!", "Finish cleaning the remaining demons", "DEMONT", 0);
        acs_suspend(120, 0);
        
        // wait until most of the demons are dead
        GiveActorInventory(110, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(111, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(112, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(113, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(114, "MarkOnMap_ThisAsshole", 1);
        while(1)
        {
            // recount
            l_RemainingMonsters = thingcount(0, 110) + thingcount(0, 111) + thingcount(0, 112) + thingcount(0, 113) + thingcount(0, 114);
            g_MonstersLeft = l_RemainingMonsters;
			//f_SmallTipPlain (strparam(s:"Monsters remaining: ", d:l_RemainingMonsters), CR_BRICK, 4);
			
			//log(s:"l_RemainingMonsters = ", d:l_RemainingMonsters);
            if (l_RemainingMonsters < 5)     break;
            delay(1);
        }
        g_MonstersLeft =-1;
    
        // kill off the remaining demons
        thing_destroy(110, 0);
        thing_destroy(111, 0);
        thing_destroy(112, 0);
        thing_destroy(113, 0);
        thing_destroy(114, 0);
		delay(35 * 3);
        
        // proceed
        f_AIDir_SpawnCount = 0;
        
        delay(35 * 3);
        
        // last wave?
        if (f_SurvivalLastLevel == m_SurvivalWave) {
                acs_execute(125, 0, 2, 0, 0);
                break;
        }
        else {
                // goto next wave
                m_SurvivalWave ++;
        }
    }
}    

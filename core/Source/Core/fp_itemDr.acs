///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_itemdr.acs
// Item drops

// All the pool of items to be dropped after each kill!

#library "fp_itemDr"
#import "f_IntDB.acs"
#import "fl_runedir.acs"
#include "zcommon.acs"
//#include "samu_tools.acs"

// monster item rewards for different classes
#libdefine ITEMDROP_MAX 4
#libdefine ITEMDROP_PROPS 2
#libdefine ITEMDROP_ITEMS 10
#libdefine ITEMDROP_CLASSES 7

int ItemDr_stack;
int ItemDr_champStack;
int ItemDr_rewards[ITEMDROP_CLASSES][ITEMDROP_PROPS][ITEMDROP_ITEMS];
int ItemDr_championRewards[ITEMDROP_CLASSES][ITEMDROP_PROPS][ITEMDROP_ITEMS];

Script "ItemDr_InitRewards" open{
    //Initialize real quick.
    for (int i = 0; i < ITEMDROP_CLASSES; i++){
        for (int j = 0; j < ITEMDROP_PROPS; j++){
            for (int k = 0; k < ITEMDROP_ITEMS; k++){
                ItemDr_rewards[i][j][k] = 0;
                
            }
        }
    }

	int class = 0;
	ItemDr_Add_R(class,       "Inventory_Soulsphere", 6.0);
	ItemDr_Add(class,         "Fading_Medikit",      25.0);
    ItemDr_Add_Champ_R(class,   "SmallGem",           5.0);
	
	class = 1;
	ItemDr_Add_R(class, "Inventory_Megasphere",     10.0);
    ItemDr_Add(class,   "Fading_Medikit",                  25.0);
    ItemDr_Add_Champ_R(class,   "SmallGem",           10.0);
    ItemDr_Add_Champ_Rune(class, 1, 5.0);
	
	class = 2;
	ItemDr_Add_R(class, "Inventory_Soulsphere",     16.0);
	ItemDr_Add(class,   "Inventory_Megasphere",     8.0);
    ItemDr_Add(class,   "Fading_SteelPlatingArmor", 13.5);
    ItemDr_Add(class,   "Fading_Medikit",           25.0);
    ItemDr_Add_Champ_R(class,   "UpgradeCard",      0.5);
    ItemDr_Add_Champ_Rune(class, 2, 2.5);
    ItemDr_Add_Champ_Rune(class, 1, 7.5);
    ItemDr_Add_Champ(class,   "Fading_TitaniumArmor",   10.0);
    ItemDr_Add_Champ(class,   "SmallGem",               15.0);
	
	class = 3;
	ItemDr_Add_R(class, "Inventory_TurretBullet",   20.0);
    ItemDr_Add(class,   "Inventory_TurretShotgun",  10.0);
	ItemDr_Add(class,   "Inventory_Soulsphere",     12.0);
	ItemDr_Add(class,   "Inventory_Berserk2",       10.0);
    ItemDr_Add(class,   "Fading_SteelPlatingArmor", 13.5);
    ItemDr_Add(class,   "Fading_Medikit",                  25.0);
    ItemDr_Add_Champ_R(class,   "UpgradeCard",          1.5);
    ItemDr_Add_Champ_Rune(class, 3, 3.0);
    ItemDr_Add_Champ_Rune(class, 2, 4.0);
    ItemDr_Add_Champ_Rune(class, 1, 8.0);
    ItemDr_Add_Champ(class,   "Greedsphere",           7.5);
    ItemDr_Add_Champ(class,   "Fading_TitaniumArmor",   15.0);
    ItemDr_Add_Champ(class,   "SmallGem",           20.0);
    
	
	class = 4;
	ItemDr_Add_R(class, "Inventory_TeslaCoil",      12.0);
	ItemDr_Add(class,   "Inventory_TurretBullet",   8.0);
    ItemDr_Add(class,   "Inventory_TurretShotgun",  4.0);
	ItemDr_Add(class,   "Inventory_Berserk2",       6.0);
	ItemDr_Add(class,   "Inventory_Godsphere",      10.0);
    ItemDr_Add(class,   "Fading_SteelPlatingArmor", 13.5);
    ItemDr_Add(class,   "Fading_Medikit",           25.0);
    ItemDr_Add_Champ_R(class,   "UpgradeCard",          2.5);
    ItemDr_Add_Champ_Rune(class, 4, 3.0);
    ItemDr_Add_Champ_Rune(class, 3, 4.0);
    ItemDr_Add_Champ_Rune(class, 2, 8.0);
    ItemDr_Add_Champ(class,   "Greedsphere",           7.5);
    ItemDr_Add_Champ(class,   "Fading_TitaniumArmor",   20.0);
    ItemDr_Add_Champ(class,   "BigGem",             15.0);
    ItemDr_Add_Champ(class,   "SmallGem",           25.0);
	
	class = 5;
	ItemDr_Add_R(class, "Inventory_Berserk2",       12.0);
	ItemDr_Add(class,   "Inventory_Megasphere",     10.0);
	ItemDr_Add(class,   "Inventory_Godsphere",      6.0);
	ItemDr_Add(class,   "Inventory_Ammogiver",      6.0);
    ItemDr_Add(class,   "Inventory_TurretChaingun",  11.0);
    ItemDr_Add(class,   "Inventory_TurretShotgun",  13.5);
    ItemDr_Add(class,   "Fading_SteelPlatingArmor", 13.5);
    ItemDr_Add(class,   "Fading_Medikit",           25.0);
    ItemDr_Add_Champ_R(class,   "UpgradeCard",      3.5);
    ItemDr_Add_Champ_Rune(class, 4, 4.0);
    ItemDr_Add_Champ_Rune(class, 3, 6.0);
    ItemDr_Add_Champ_Rune(class, 2, 10.0);
    ItemDr_Add_Champ(class,   "Greedsphere",           7.5);
    ItemDr_Add_Champ(class,   "Fading_TitaniumArmor",   25.0);
    ItemDr_Add_Champ(class,   "BigGem",             17.5);
    ItemDr_Add_Champ(class,   "SmallGem",           30.0);
	
	class = 6;
	ItemDr_Add_R(class, "Inventory_Berserk2",       20.0);
	ItemDr_Add(class,   "Inventory_Megasphere",     16.0);
	ItemDr_Add(class,   "Inventory_Godsphere",      8.0);
	ItemDr_Add(class,   "Inventory_Ammogiver",      8.0);
    ItemDr_Add(class,   "Inventory_TurretChaingun", 11.0);
    ItemDr_Add(class,   "Fading_SteelPlatingArmor", 13.5);
    ItemDr_Add(class,   "Fading_Medikit",           25.0);
    ItemDr_Add_Champ_R(class,   "UpgradeCard",          5.0);
    ItemDr_Add_Champ_Rune(class, 4, 6.0);
    ItemDr_Add_Champ_Rune(class, 3, 7.0);
    ItemDr_Add_Champ_Rune(class, 2, 12.0);
    ItemDr_Add_Champ(class,   "Greedsphere",           7.5);
    ItemDr_Add_Champ(class,   "Fading_TitaniumArmor",   30.0);
    ItemDr_Add_Champ(class,   "BigGem",             20.0);
    ItemDr_Add_Champ(class,   "SmallGem",           35.0);
    
}

function void ItemDr_Add_Champ_R(int class, str item, int dropChance){
	ItemDr_champStack = 0;
	ItemDr_Add_Champ(class,item,dropChance);
}

function void ItemDr_Add_Champ(int class, str item, int dropChance){
	ItemDr_championRewards[class][0][ItemDr_champStack] = item;
	ItemDr_championRewards[class][1][ItemDr_champStack] = dropChance;
	ItemDr_champStack++;
}

function void ItemDr_Add_Champ_Rune(int class, int tier, int dropChance){
	ItemDr_championRewards[class][0][ItemDr_champStack] = tier*-1;
	ItemDr_championRewards[class][1][ItemDr_champStack] = dropChance;
	ItemDr_champStack++;
}

function void ItemDr_Add_R(int class, str item, int dropChance){
    ItemDr_stack = 0;
	ItemDr_Add(class,item,dropChance);
}

function void ItemDr_Add(int class, str item, int dropChance){
	ItemDr_rewards[class][0][ItemDr_stack] = item;
	ItemDr_rewards[class][1][ItemDr_stack] = dropChance;
	ItemDr_stack++;
}

function int ItemDr_getItem(int class,int nitem){
	return ItemDr_rewards[class][0][nitem];
}

function int ItemDr_Dice(int chance){
    bool fixed_d100 = random(0.0, 100.0);
    bool res = (fixed_d100 <= chance);
    /*
    log(s:"(ItemDr) Dice Chance: ", f:chance);
    log(s:"(ItemDr) Dice Random: ", f:fixed_d100);
    log(s:"(ItemDr) Dice Result: ", d:res);
    */
    return res;
}

function int ItemDr_getChance(int class,int nitem){
	return ItemDr_rewards[class][1][nitem];
}

// mmm: drop reward item on monster death

function void ItemDr_Spawn(str item){
    if(item == 0) return;
    //printbold(s:item, s:" was spawned.");
    SpawnForced("ItemFog",
            GetActorX(0) + random(0, 10.0),
            GetActorY(0) + random(0, 10.0),
            GetActorFloorZ(0) + 10.0);
    SpawnForced(item,
            GetActorX(0) + random(0, 10.0),
            GetActorY(0) + random(0, 10.0),
            GetActorFloorZ(0) + 10.0);
}

function void ItemDr_ChampionDrop(int monsterClass){
    bool spawn_fx = false;
    int chance;
    for(int i; i < ItemDr_champStack; i++){
        chance = ItemDr_championRewards[monsterClass][1][i];
        int item = ItemDr_championRewards[monsterClass][0][i];

        if(CheckActorInventory(GetActorProperty(ActivatorTID(), APROP_TargetTID), "RuneFortune")){
            chance = chance + 5.0;
        }

        if(ItemDr_Dice(chance)){
            if(item <= 0){
                str rune = Rune_Pick(item*-1);
                //log(s:"Rune Tier: ", d:(item*-1), s:" Spawning a rune: ", d:rune);
                ItemDr_Spawn(strparam(s:Rune_GetActor(rune), s:"_Drop"));
            }  
            else           ItemDr_Spawn(item);
            break; // Only 1 champion item can be spawned.
        }
    }
    
    spawn_fx = ItemDr_RuneDrops("RuneHealth", "HealthRune_BloodDrip", 2, 5, monsterClass);
    spawn_fx = ItemDr_RuneDrops("RuneAmmunition", "AmmunitionRune_Satchel", 1, 3, monsterClass);
    spawn_fx = ItemDr_RuneDrops("RuneTemperance", "ArmorShard", 3, 6, monsterClass);
    if(spawn_fx)    PlaySound(ActivatorTID(), "misc/spawn");

}

function void ItemDr_MonsterDrop(int monsterClass)
{
    // probability of dropping item
	//[Samu] Alright, im doing this just for the sake of refactoring!
	
  int chance = p_MonsterItem[monsterClass];

  if(CheckActorInventory(GetActorProperty(ActivatorTID(), APROP_TargetTID), "RuneFortune")){
      chance = chance + 10.0;
  }

  int dropped = 0;
  int spawn_fx = false; 
  if ((ItemDr_Dice(chance))){
    //log(s:"(ItemDr) Success, trying to drop stuff.");
    for (int i = 0; i < ITEMDROP_ITEMS && dropped < ITEMDROP_MAX; i++){
        chance = ItemDr_getChance(monsterClass, i);
        if(chance != 0.0){
            if (ItemDr_Dice(chance)){
                //log(s:"(ItemDr) An item has been dropped!.");
                ItemDr_Spawn(ItemDr_getItem(monsterClass, i));
                spawn_fx = true;
                dropped++;
            }
        }
        
    }
  }
  
    spawn_fx = ItemDr_RuneDrops("RuneHealth", "HealthRune_BloodDrip", 2, 5, monsterClass);
    spawn_fx = ItemDr_RuneDrops("RuneAmmunition", "AmmunitionRune_Satchel", 1, 3, monsterClass);
    spawn_fx = ItemDr_RuneDrops("RuneTemperance", "ArmorShard", 3, 6, monsterClass);
    if(spawn_fx)    PlaySound(ActivatorTID(), "misc/spawn");
}


function int ItemDr_RuneDrops(str rune, str drop, int min, int max, int monsterClass) {

    if(GameSkill() == 0) return 0;

    bool spawn_fx = 0;
    int chance = (5 + monsterClass*2) * 1.0;
    if(CheckActorInventory(GetActorProperty(ActivatorTID(), APROP_TargetTID), "RuneFortune")){
      chance = chance + 10.0;
    }
    if(CheckActorInventory(GetActorProperty(ActivatorTID(), APROP_TargetTID), rune)){
        if(ItemDr_Dice(chance)){
            for(int id = 0; id < random(min,max); id++){
                ItemDr_Spawn(drop);
            }
            spawn_fx = true;
        }
    }
    return spawn_fx;
}
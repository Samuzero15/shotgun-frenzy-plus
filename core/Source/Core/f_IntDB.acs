///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_IntDB.acs
// manages the sectors

// USEABLE NAMING CONVENTIONS
// f - Frenzy - Script related, or General Purpose
// g - Game - Important stuff involving the game functions
// p - Player - Player interaction
// c - Commander - Commander interaction
// m - Monster - Monster interaction
// l - Local - Locally used values
// s - Settings - Global game settings, mainly used for screen resolutions

// g_Status reminders:
// 0 = Games not active
// 1 = Game active, sector 1 under attack
// 2 = Sector 2 under attack
// 3 = Sector 3 under attack
// 4 = Standard Active

#library "f_IntDB"
#import "fl_price.acs"
#import "fl_WDir.acs"
#import "fl_IDir.acs"
#import "fl_MUpDir.acs"
#import "fl_StUpDir.acs"
#import "fl_PUpDir.acs"
#import "fl_techs.acs"
#import "fp_kshud.acs"
#import "fp_ptdir.acs"
#include "zcommon.acs"
#include "acsutils.acs"

#libdefine INTDB_MAXPLAYERS 32
#libdefine INTDB_GUARDIANSTATE_STANDBY 1 // In game timer, before guardian timer.
#libdefine INTDB_GUARDIANSTATE_PREPARED 2 // In guardian timer.
#libdefine INTDB_GUARDIANSTATE_ATTACK 3 // Spawning guardians.
#libdefine INTDB_GUARDIANSTATE_DEFEAT 4 // After spawning, waiting for defeat
#libdefine INTDB_GAMETYPE_COMBATFRENZY 0
#libdefine INTDB_GAMETYPE_SHOTGUNFRENZY 1
#libdefine INTDB_GAMETYPE_SURVIVALDEFENDER 5

// game
int g_Status;
int g_SkillScore;
int g_SpecialPortal;
int g_GuardianState;
int g_MonstersLeft;
int g_GameStarted;
//int g_AIDirector_TrackRockets;
//int g_AIDirector_TrackPlasma;
//int g_AIDirector_TrackFlamer;

/*	[Samu]
	Weapon trackers, for the AIDirector.
	They will crank up the difficulty.
	0 = Shotgun
	1 = Assault
	2 = Nails n Saws
	3 = Rockets
	4 = Plasma
	5 = Flamer
	6 = BFG
*/  int g_AID_WepTracker[7];

/*	[Samu]
	Each time you upgrade weapons, will crank up the difficulty too.
*/  int g_AID_UpsTracker;

int f_AIDir_SpawnCount;
int f_Gametype;
int g_TenMinMark;
int g_RecapCount;
int g_GameOver;
int g_GameEnding;
int g_GameTimer;
int g_GuardianTimer;
int f_GuardianLength;

// For Samu Terminal
int g_TechFlags = 0;
int g_BuildFlags = 0;
int c_BuildState[8];

int aiSubtract;

// test variable
int playercountReplicate = 0;

// game settings
int f_UseScoreSystem;	// automatic research, used in CF and SD maps
int f_Startcash;                   // player starting cash, 2500 is the default
int c_Startcash;                      // starting cash for the commander (SF maps only)
int f_Doortype;                      // 0 is a normal door, 1 is a floor based door
int f_Doorspeed;                     // speed of the door opening, 50 is the default
int f_GameLength;                     // Gametime in minutes, +2 min after guardian warning, 28 default (30 min gametime)
int f_AISkillMultiplier;               // increase in levels, higher means harder (aka: the RapeFactor variable)
int f_SurvivalLastLevel;
int f_PercentFast = 0;                 // what percentage of enemies are randomly made fast

int f_Cacodemons;
int f_AdaptiveSpawning;

int f_AllowNuke;
int f_AllowIon;

// player
int p_Credits[INTDB_MAXPLAYERS];
int p_Exp[INTDB_MAXPLAYERS];
int p_Exp_Points[INTDB_MAXPLAYERS];
int p_Rank[INTDB_MAXPLAYERS];
int p_MenuSelection[INTDB_MAXPLAYERS];
int p_MenuSelection_Active[INTDB_MAXPLAYERS];
int p_MenuSelection_Category[INTDB_MAXPLAYERS];
int p_MenuSelection_Limit[INTDB_MAXPLAYERS];
int p_Streak[INTDB_MAXPLAYERS];
int p_StreakHi[INTDB_MAXPLAYERS];
int p_StreakLevel[INTDB_MAXPLAYERS];
int p_EliteMode[INTDB_MAXPLAYERS];
int p_DmgtoExp[INTDB_MAXPLAYERS];
int p_KSHUD[INTDB_MAXPLAYERS];
int p_TipQue[10];
int p_TipProcess[10];// Timer signal (True if the tip is using a timed or process script)

int p_TotalPlayerDeaths;
//int p_Combo[INTDB_MAXPLAYERS]; Eh, ks are cooler :)
int p_TankSlot[INTDB_MAXPLAYERS];             // player tank status
int p_KickSlot[INTDB_MAXPLAYERS];
int p_LastWeap[INTDB_MAXPLAYERS];//for the autowep switching feature
int p_MechTimer[INTDB_MAXPLAYERS];

// commander
int c_Commander = 99;
int c_Credits;
int c_MoneyDropped;
int c_Techflag[99];
int c_ButtonSel;        // selected button
int c_ButtonCat;        // current category
int c_ButtonClick;
int c_ConstructSpeed = 50;
int c_NukeLaunched;
int c_BridgeStatus_1;
int c_BridgeStatus_2;
int c_BridgeStatus_3;
int c_BridgeStatus_4;
int c_BridgeStatus_5;
int c_BridgeStatus_6;
int c_KickVotes;
int c_KickVotesNeeded;
int c_HaltSpawning;
int c_ManualClick;
int c_allow_moneybag = 1;
int c_allow_turret;

int c_Onscreen_Time = 15.0;
int c_Onscreen_Type = 1;

// monster
int m_InSector[4];
int m_SpawnRate = 1;
int m_Wave = 1;
int m_WaveSub;
int m_SurvivalWave = 1;

int m_RecapMin = 0; // The minimum monster amount for sector re-capturing.
int m_AIDCap = 250; // The maximum monster count.

int p_dmgmult = 0.0;
int m_hpmult = 0.0;
int m_hpolv20 = 0.0;

// settings
int s_ScreenSize[3] = {800, 600, 1};
#libdefine SFHUD_WIDTH 800
#libdefine SFHUD_HEIGHT 600

// exp needed to get rank
#libdefine INTDB_NUM_RANKS 21 //[Samu] the Execute Always make the game more farmable! need to raise the ranks!
#libdefine INTDB_ELITERANK 10
int p_RankExp[INTDB_NUM_RANKS] = { 
	0, // Rookie
	50, 
	125, 
	190, 
	230, 
	300, 
	500, 
	1000, 
	2000, 
	3000, //Commander
	// Elite ranks
	4250, // 10th Elite Commander
	5750, // 9th Elite Commander
	6900, // 8th Elite Commander
	8100, // 7th Elite Commander
	9500, // 6th Elite Commander
	11000, // 5th Elite Commander
	12500, // 4th Elite Commander
	13750, // 3rd Elite Commander
	14900, // 2nd Elite Commander
	16000, 0 // 1st Elite Commander // Dunno, im out of ideas on the elite ranks xd
};

// amount of credits given for killing monster by class
int p_MonsterCredits[7] = { 2, 10, 22, 27, 65, 90, 200 };       // { 2, 10, 20, 25, 60, 90, 200 };

// chance of dropping item on monster death
int p_MonsterItem[7] = { 2.0, 6.0, 8.0, 10.0, 13.0, 20.0, 25.0};//{ 5, 10, 15, 25, 50, 75, 99 };


function int getNextStreakMilestone(void){
	int milestonebase = 70;
	return clamp(milestonebase * ipow(2, p_StreakLevel[playernumber()]), milestonebase, milestonebase * ipow(2, 9));
}

function int InitDB_getHighestKillstreak(int prop){
	int high = 0, res_i, res = -1;
	for(int i = 0; i < INTDB_MAXPLAYERS; i++){
		if(high < p_Streak[i] || high < p_StreakHi[i]){
			high = p_Streak[i];
			if(high < p_StreakHi[i])	high = p_StreakHi[i];
			res_i = i;
		}
	}	
	if(prop == 1)		res = res_i;
	else if (prop == 0) res = high;
	return res;
}

#libdefine TURRET_DELAY 70

function int allow_turret_C(void)
{
    if((checkinventory("c_timer") - checkinventory("c_timer_turret")) >= TURRET_DELAY) return 1;
    return 0;
}

function int allow_turret(void)
{
    if((Timer() - c_allow_turret) >= TURRET_DELAY) return 1;
    return 0;
}

function void InitDB_ReadConsole(void)
{
	int sf_startcash = GetCVar("sf_startcash");
	int sf_teamcash = GetCVar("sf_teamcash");
	int sf_gamelength = GetCVar("sf_gamelength");
	int sf_guardianlength = GetCVar("sf_guardianlength");
	int sf_skillmult = GetCVar("sf_skillmult");
	int sf_adaptivespawn = GetCVar("sf_adaptivespawn");
	int sf_cacodemons = GetCVar("sf_cacodemons");
    int sf_percentfast = GetCVar("sf_percentfast");
	int sfp_recapmin = GetCvar("sfp_recapmin");
	int sfp_maxmonsters = GetCvar("sfp_maxmonsters");
	int sfp_playerdmgmult = GetCvar("sfp_playerdmgmult");
	int sfp_monsterhpmult = GetCvar("sfp_monsterhpmult");
	int sfp_monsolv20hpmult = GetCvar("sfp_monsolv20hpmult");

	if (sf_startcash)  f_Startcash 	  = InitDB_Clamp(sf_startcash, 1000,  20000, 2500);
	if (sf_teamcash)   c_Startcash 	  = InitDB_Clamp(sf_teamcash, 	500,  20000, 5000);
	
	if (sf_gamelength) 		f_Gamelength = sf_gamelength;
	if (sf_guardianlength) 	f_GuardianLength = InitDB_Clamp(sf_guardianlength, 	0,  3, 0);
	if (sf_skillmult)		f_AISkillMultiplier = sf_skillmult;
	if (sf_adaptivespawn)	f_AdaptiveSpawning = sf_adaptivespawn;
	if (sf_cacodemons)		f_Cacodemons = sf_cacodemons;
	
	if(sf_percentfast)  	f_PercentFast 	= InitDB_Clamp(sf_percentfast,  1,  50, 0);
	if(sfp_recapmin) 		m_RecapMin    	= InitDB_Clamp(sfp_recapmin, 	  0,  10, 0);
	if(sfp_maxmonsters) 	m_AIDCap 	  	= InitDB_Clamp(sfp_maxmonsters, 50, 500, 250);
	if(sfp_playerdmgmult)	p_dmgmult		= InitDB_Clamp(sfp_playerdmgmult, 1.00, 200.0, 0.0);
	if(sfp_monsterhpmult)	m_hpmult		= InitDB_Clamp(sfp_monsterhpmult, 1.00, 200.0, 0.0);
	if(sfp_monsolv20hpmult)	m_hpolv20		= InitDB_Clamp(sfp_monsolv20hpmult, 1.00, 200.0, 0.0);
	//log(d:35 * 60 * f_GameLength, s:" tics");
}

function int InitDB_Clamp(int var, int min_v, int max_v, int def){
	if(var >= min_v && var <= max_v) return var;
	return def;
}

bool g_Initialized = false;
script "SFPlus_InitializeEverything" OPEN{
	SetCvarString("sfp_scordata_status", "none");
	SetCvar("sfp_scordata_timemin", 0);
	SetCvar("sfp_scordata_timesec", 0);
	SFPlus_DefineTechs();
	IntDB_LoadStuff();
	ProgTip_Init();
	delay(1); // give this tic to the map default variables.
	
	
	InitDB_ReadConsole(); // Read the console if the server needs customized variables.
	g_Initialized = true;
}

function void IntDB_LoadStuff(void){
	//Acs_NamedExecuteAlways("SfPlus_DefinePrices", 0);
	SFPlus_DefineWeapons(); 
	SFPlus_DefineItems(); 
	If(GameSkill() != 0){
		SFPlus_DefineStimUps();
		SFPlus_DefineRunes();
		SFPlus_DefinePlayUps();
	}
	SFPlus_DefineMechUps();
}

int debug_var = 0;

script "SFPlus_DebugVar" (int i){
	debug_var = i;
}

Function void InitDB_Debug(void){
	log(s:"====== Debug ======");
	/*
	InitDB_Log("f_Startcash", f_Startcash);
	InitDB_Log("c_Startcash",c_Startcash);
	
	InitDB_Log("f_Gamelength",f_Gamelength);
	InitDB_Log("f_AISkillMultiplier",f_AISkillMultiplier);
	InitDB_Log("f_AdaptiveSpawning",f_AdaptiveSpawning);
	InitDB_Log("f_Cacodemons",f_Cacodemons);
	
	InitDB_Log("f_PercentFast",f_PercentFast);
	InitDB_Log("m_RecapMin",m_RecapMin );
	InitDB_Log("m_AIDCap",m_AIDCap);
	InitDB_Log("f_AllowIon",f_AllowIon);
	InitDB_Log("f_AllowNuke",f_AllowNuke);
	InitDB_Log("p_dmgmult", p_dmgmult);
	InitDB_Log("m_hpmult", m_hpmult);
	*/
	log(s:"====== Debug ======");	
}

function void InitDB_Log(str name, str var){
	log(s:name, s:" = ", d:var);
}

// Thanks Zerbepal! uwu
function bool ClientExist (int PlayerNum){
	bool Res;
	if (PlayerInGame(PlayerNum) | (PlayerIsSpectator(PlayerNum) > 0))    Res = TRUE;
	return Res;
}

function int GetPlayerTopIndex (void) {
	int res;
	for (int i = 0; i < INTDB_MAXPLAYERS; i++)
		if (ClientExist (i))    res = i;
	return res;
}

// String functions for language defs.
function str LangString0(str lang){
	return LangStringEx(lang, "", "", "", "");
}
function str LangStringV1(str lang, int var1){
	return LangStringEx(lang, var1, "", "", "");
}

function str LangStringV2(str lang, int var1, int var2){
	return LangStringEx(lang, var1, var2, "", "");
}

function str LangStringV3(str lang, int var1, int var2, int var3){
	return LangStringEx(lang, var1, var2, var3, "");
}

function str LangStringV4(str lang, int var1, int var2, int var3, int var4){
	return LangStringEx(lang, var1, var2, var3, var4);
}

function str LangStringEx(str lang, int var1, int var2, int var3, int var4){
	int string;
	string = StrParam(l:lang);

	string = StrReplace(string, "%p", StrParam(n:Playername(playerNumber())));
	string = StrReplace(string, "%1", var1);
	string = StrReplace(string, "%2", var2);
	string = StrReplace(string, "%3", var3);
	string = StrReplace(string, "%4", var4);
	return string;
}
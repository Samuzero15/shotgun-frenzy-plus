///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_IntDB.acs
// manages the sectors

// USEABLE NAMING CONVENTIONS
// f - Frenzy - Script related, or General Purpose
// g - Game - Important stuff involving the game functions
// p - Player - Player interaction
// c - Commander - Commander interaction
// m - Monster - Monster interaction
// l - Local - Locally used values
// s - Settings - Global game settings, mainly used for screen resolutions

// g_Status reminders:
// 0 = Games not active
// 1 = Game active, sector 1 under attack
// 2 = Sector 2 under attack
// 3 = Sector 3 under attack
// 4 = Standard Active

#library "f_IntDB"
#import "fl_price.acs"
#import "fl_WDir.acs"
#import "fl_IDir.acs"
#import "fl_MUpDir.acs"
#import "fl_PUpDir.acs"
#import "fl_techs.acs"
#import "fp_kshud.acs"
#import "fp_ptdir.acs"
#include "zcommon.acs"
#include "acsutils.acs"

// game
int g_Status;
int g_SkillScore;
int g_SpecialPortal;
int g_GuardianWave;
//int g_AIDirector_TrackRockets;
//int g_AIDirector_TrackPlasma;
//int g_AIDirector_TrackFlamer;

/*	[Samu]
	Weapon trackers, for the AIDirector.
	They will crank up the difficulty.
	0 = Shotgun
	1 = Assault
	2 = Nails n Saws
	3 = Rockets
	4 = Plasma
	5 = Flamer
	6 = BFG
*/  int g_AID_WepTracker[7];

/*	[Samu]
	Each time you upgrade weapons, will crank up the difficulty too.
*/  int g_AID_UpsTracker;

int f_AIDir_SpawnCount;
int f_Gametype;
int g_TenMinMark;
int g_GuardianMode;
int g_GameOver;
int g_GameEnding;

// For Samu Terminal
int g_TechFlags = 0;
int g_BuildFlags = 0;
int c_BuildState[8];

int aiSubtract;

// test variable
int playercountReplicate = 0;

// game settings
int f_UseScoreSystem;	// automatic research, used in CF and SD maps
int f_Startcash;                   // player starting cash, 2500 is the default
int c_Startcash;                      // starting cash for the commander (SF maps only)
int f_Doortype;                      // 0 is a normal door, 1 is a floor based door
int f_Doorspeed;                     // speed of the door opening, 50 is the default
int f_GameLength;                     // Gametime in minutes, +2 min after guardian warning, 28 default (30 min gametime)
int f_AISkillMultiplier;               // increase in levels, higher means harder (aka: the RapeFactor variable)
int f_SurvivalLastLevel;
int f_PercentFast = 0;                 // what percentage of enemies are randomly made fast

int f_Cacodemons;
int f_AdaptiveSpawning;

int f_AllowNuke;
int f_AllowIon;

// player
int p_Credits[31];
int p_Exp[31];
int p_Exp_Points[31];
int p_Rank[31];
int p_MenuSelection[31];
int p_MenuSelection_Active[31];
int p_MenuSelection_Category[31];
int p_MenuSelection_Limit[31];
int p_Streak[31];
int p_StreakHi[31];
int p_StreakLevel[31];
int p_TipQue[10];
int p_TipProcess[10];// Timer signal (True if the tip is using a timed or process script)

int p_TotalPlayerDeaths;
int p_Combo[31];
int p_SplatCombo[31];
int p_UpgradeStack[31];         // soon to be redundant
int p_TankSlot[31];             // player tank status
int p_KickSlot[31];
int p_LastWeap[31];//for the autowep switching feature
int p_MechTimer[32];

// commander
int c_Commander = 99;
int c_Credits;
int c_MoneyDropped;
int c_Techflag[99];
int c_ButtonSel;        // selected button
int c_ButtonCat;        // current category
int c_ButtonClick;
int c_ConstructSpeed = 50;
int c_NukeLaunched;
int c_BridgeStatus_1;
int c_BridgeStatus_2;
int c_BridgeStatus_3;
int c_BridgeStatus_4;
int c_BridgeStatus_5;
int c_BridgeStatus_6;
int c_KickVotes;
int c_KickVotesNeeded;
int c_HaltSpawning;
int c_ManualClick;
int c_allow_moneybag = 1;
int c_allow_turret;

int c_Onscreen_Time = 15.0;
int c_Onscreen_Type = 1;

// monster
int m_InSector[4];
int m_SpawnRate = 1;
int m_Wave = 1;
int m_WaveSub;
int m_SurvivalWave = 1;

int m_RecapMin = 0; // The minimum monster amount for sector re-capturing.
int m_AIDCap = 250; // The maximum monster count.

int p_dmgmult = 0.0;
int m_hpmult = 0.0;

// settings
int s_ScreenSize[3] = {800, 600, 1};
#libdefine SFHUD_WIDTH 800
#libdefine SFHUD_HEIGHT 600

// exp needed to get rank
#libdefine NUM_RANKS 11 //[Samu] the Execute Always make the game more farmable! need to raise the ranks!
int p_RankExp[NUM_RANKS] = { 0, 50, 125, 190, 230, 300, 500, 1000, 2000, 3000, 0 };

// amount of credits given for killing monster by class
int p_MonsterCredits[7] = { 2, 10, 22, 27, 65, 90, 200 };       // { 2, 10, 20, 25, 60, 90, 200 };

// chance of dropping item on monster death
int p_MonsterItem[7] = { 2, 6, 8, 10, 13, 20, 25 };//{ 5, 10, 15, 25, 50, 75, 99 };

// monster item rewards for different classes
#libdefine NUM_MONSTER_REWARDS 4
#libdefine SFP_MONSTER_REWARD_Props 2
#libdefine SFP_MONSTER_REWARD_Items 4
#libdefine SFP_MONSTER_REWARD_Class 6

int m_rewardStack;
int m_rewards[SFP_MONSTER_REWARD_Class][SFP_MONSTER_REWARD_Props][SFP_MONSTER_REWARD_Items];

Script "IntDB_InitRewards" open{
	int class = 0;
	addMonsterReward(class, "Rnd_Inventory_Soulsphere", 15);
	addMonsterReward(class, "Medikit", 25);
	m_rewardStack = 0;
	
	class = 1;
	addMonsterReward(class, "Rnd_Inventory_Megasphere", 25);
	m_rewardStack = 0;
	
	class = 2;
	addMonsterReward(class, "Rnd_Inventory_Soulsphere", 40);
	addMonsterReward(class, "Rnd_Inventory_Megasphere", 20);
	m_rewardStack = 0;
	
	class = 3;
	addMonsterReward(class, "Rnd_Inventory_TurretBullet", 50);
	addMonsterReward(class, "Rnd_Inventory_Soulsphere", 30);
	addMonsterReward(class, "Rnd_Inventory_Berserk2", 10);
	m_rewardStack = 0;
	
	class = 4;
	addMonsterReward(class, "Rnd_Inventory_TeslaCoil", 30);
	addMonsterReward(class, "Rnd_Inventory_TurretBullet", 20);
	addMonsterReward(class, "Rnd_Inventory_Berserk2", 15);
	addMonsterReward(class, "Rnd_Inventory_Godsphere", 10);
	m_rewardStack = 0;
	
	class = 5;
	addMonsterReward(class, "Rnd_Inventory_Berserk2", 30);
	addMonsterReward(class, "Rnd_Inventory_Megasphere", 25);
	addMonsterReward(class, "Rnd_Inventory_Godsphere", 15);
	addMonsterReward(class, "Rnd_Inventory_Ammogiver", 15);
	m_rewardStack = 0;
	
	class = 6;
	addMonsterReward(class, "Rnd_Inventory_Berserk2", 50);
	addMonsterReward(class, "Rnd_Inventory_Megasphere", 40);
	addMonsterReward(class, "Rnd_Inventory_Godsphere", 20);
	addMonsterReward(class, "Rnd_Inventory_Ammogiver", 20);
	m_rewardStack = 0;
}

function void addMonsterReward(int class, str item, int dropChance){
	m_rewards[class][0][m_rewardStack] = item;
	m_rewards[class][1][m_rewardStack] = dropChance;
	m_rewardStack++;
}

function int getNextStreakMilestone(void){
	int milestonebase = 70;
	return clamp(milestonebase * ipow(2, p_StreakLevel[playernumber()]), milestonebase, milestonebase * ipow(2, 9));
}

function int getMonsterChanceToDrop(int class,int nitem){
	return m_rewards[class][1][nitem];
}

function int getMonsterItem(int class,int nitem){
	return m_rewards[class][0][nitem];
}

#libdefine TURRET_DELAY 70

function int allow_turret_C(void)
{
    if((checkinventory("c_timer") - checkinventory("c_timer_turret")) >= TURRET_DELAY) return 1;
    return 0;
}

function int allow_turret(void)
{
    if((Timer() - c_allow_turret) >= TURRET_DELAY) return 1;
    return 0;
}

function void InitDB_ReadConsole(void)
{
	int sf_startcash = GetCVar("sf_startcash");
	int sf_teamcash = GetCVar("sf_teamcash");
	int sf_gamelength = GetCVar("sf_gamelength");
	int sf_skillmult = GetCVar("sf_skillmult");
	int sf_adaptivespawn = GetCVar("sf_adaptivespawn");
	int sf_cacodemons = GetCVar("sf_cacodemons");
    int sf_percentfast = GetCVar("sf_percentfast");
	int sfp_recapmin = GetCvar("sfp_recapmin");
	int sfp_maxmonsters = GetCvar("sfp_maxmonsters");
	int sfp_playerdmgmult = GetCvar("sfp_playerdmgmult");
	int sfp_monsterhpmult = GetCvar("sfp_monsterhpmult");

	if (sf_startcash)  f_Startcash 	  = InitDB_Clamp(sf_startcash, 1000,  20000, 2500);
	if (sf_teamcash)   c_Startcash 	  = InitDB_Clamp(sf_teamcash, 	500,  20000, 5000);
	
	if (sf_gamelength) f_Gamelength = sf_gamelength;
	if (sf_skillmult)f_AISkillMultiplier = sf_skillmult;
	if (sf_adaptivespawn)f_AdaptiveSpawning = sf_adaptivespawn;
	if (sf_cacodemons)f_Cacodemons = sf_cacodemons;
	
	if(sf_percentfast)  	f_PercentFast 	= InitDB_Clamp(sf_percentfast,  1,  50, 0);
	if(sfp_recapmin) 		m_RecapMin    	= InitDB_Clamp(sfp_recapmin, 	  1,  10, 0);
	if(sfp_maxmonsters) 	m_AIDCap 	  	= InitDB_Clamp(sfp_maxmonsters, 50, 500, 250);
	if(sfp_playerdmgmult)	p_dmgmult		= InitDB_Clamp(sfp_playerdmgmult, 1.00, 200.0, 0.0);
	if(sfp_monsterhpmult)	m_hpmult		= InitDB_Clamp(sfp_monsterhpmult, 1.00, 200.0, 0.0);
}

function int InitDB_Clamp(int var, int min_v, int max_v, int def){
	if(var >= min_v && var <= max_v) return var;
	return def;
}

bool g_Initialized = false;
script "SFPlus_InitializeEverything" OPEN{
	
	Acs_NamedExecuteAlways("SfPlus_DefinePrices", 0);
	SFPlus_DefineWeapons();
	SFPlus_DefineItems();
	SFPlus_DefineTechs();
	
	ProgTip_Init();
	delay(1); // give this tic to the map default variables.
	SFPlus_DefineMechUps();
	SFPlus_DefinePlayUps();
	InitDB_ReadConsole(); // Read the console if the server needs customized variables.
	g_Initialized = true;
}

int debug_var = 0;

script "SFPlus_DebugVar" (int i){
	debug_var = i;
}

Function void InitDB_Debug(void){
	log(s:"====== Debug ======");
	/*
	InitDB_Log("f_Startcash", f_Startcash);
	InitDB_Log("c_Startcash",c_Startcash);
	
	InitDB_Log("f_Gamelength",f_Gamelength);
	InitDB_Log("f_AISkillMultiplier",f_AISkillMultiplier);
	InitDB_Log("f_AdaptiveSpawning",f_AdaptiveSpawning);
	InitDB_Log("f_Cacodemons",f_Cacodemons);
	
	InitDB_Log("f_PercentFast",f_PercentFast);
	InitDB_Log("m_RecapMin",m_RecapMin );
	InitDB_Log("m_AIDCap",m_AIDCap);
	InitDB_Log("f_AllowIon",f_AllowIon);
	InitDB_Log("f_AllowNuke",f_AllowNuke);
	*/
	InitDB_Log("p_dmgmult", p_dmgmult);
	InitDB_Log("m_hpmult", m_hpmult);
	log(s:"====== Debug ======");	
}

function void InitDB_Log(str name, str var){
	log(s:name, s:" = ", d:var);
}
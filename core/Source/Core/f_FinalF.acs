///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_FinalF.acs
// the battle before the end
#library "f_FinalF"

#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "f_AIDir.acs"
#import "fl_techs.acs"
#include "zcommon.acs"
#include "acsutils.acs"
#include "samu_tools.acs"


// define a useful variable (for dev purposes only, use to instantly goto the boss)
int instant_guardian = 0;
int guardianActive = 0;

script 231 (void)
{
	// Moved to fp_spawn.acs
}

// final fight
script 107 OPEN
{
    // define a local container
    int l_RemainingMonsters;
	
    // wait until the game is active
    while(g_Status == 0)
        delay(35);
	
	//log(d:35 * 60 * f_GameLength, s:" tics");
	g_GameTimer = 35 * 60 * f_GameLength;
	g_GuardianTimer = 35 * 60 * f_GuardianLength;
	//InitDB_Debug();
    
    if(f_Gametype == 5){ // survival?
         acs_terminate(107,0);
    }
    if (instant_guardian == 0)
    {
        // wait desired time minutes
        //log(d:g_GameTimer, s:" tics");
		while(g_GameTimer > 0){ // [Samu] Here it is the game timer.
			delay(1);
			g_GameTimer--;
		}
        
        // guardian time warning
		Notify_Message("GUARDIAN WAVE", strparam(s:"Incoming in ",d:f_GuardianLength, s:" minutes!"), "DEMONT", 0);
		g_GuardianState = INTDB_GUARDIANSTATE_STANDBY;
		
        
        // wait guardian length minutes
        while(g_GuardianTimer > 0){ // [Samu] Here it is the game timer.
			delay(1);
			g_GuardianTimer--;
		}			// [Samu] Here it is the guardian timer.
    }
	g_GuardianState = INTDB_GUARDIANSTATE_PREPARED;
    
    acs_execute(108, 0, l_RemainingMonsters, 0, 0);
    
}

script "SFPlus_TestMeUp" (void){
	int dx = fixedMul(128.0, cos(GetActorAngle(0)));
	int dy = fixedMul(128.0, sin(GetActorAngle(0)));
	int testid = 9999;
	Spawn("ZombieFodder", GetActorX(0) + dx, GetActorY(0) + dy, GetActorFloorZ(0), testid);
	SetActivator(testid);
	log(s:"MyTID: ", d:testid);
	
}

script 108 (int l_RemainingMonsters)
{
	if(c_NukeLaunched) Terminate; // Don't execute this if we're nuking the map.

	int bonusPoints;
    // collect AI director information and turn it off
    g_SkillScore = 0;
	//log(s:"Score catched: ", d:g_SkillScore);
	// [Samu] Give it some bonus credits and ups.
	if(g_Status == 1){
		bonusPoints += 30;
		f_BigCenterTipBold ("The batteries 1, 2 and 3 are safe!", CR_WHITE);
		giveCashToPlayers(25000);
		giveUPToPlayers(4);
	}
	if(g_Status == 2){
		bonusPoints += 20; 
		f_BigCenterTipBold ("The batteries 2 and 3 are safe!", CR_WHITE);
		giveCashToPlayers(10000);
		giveUPToPlayers(2);
	}
	if(g_Status == 3){
		bonusPoints += 10;
		f_BigCenterTipBold ("The battery 3 is safe!",CR_WHITE);
		giveCashToPlayers(5000);
		giveUPToPlayers(1);
		
	}
	
	g_SkillScore += bonusPoints;
	
	//log(s:"Score before the guardian wave: ", d:g_SkillScore);
    acs_terminate(13, 0);
    acs_terminate(120, 0); // Shuts The core-rambling.
	ACS_NamedTerminate("SFPlus_SecManMainLoop", 0); // Shuts the sector main loop.
	
    acs_terminate(102, 0); // Shuts The loss sector script if already executed.
    acs_terminate(103, 0); // Shuts The reclaiming sector script if already executed.
	
	//[Samu] To shut up the counter.
	acs_terminate(129, 0);
	
    g_Status = 4;
    thing_remove(101);
    thing_remove(102);
    thing_remove(103);
	
    //f_TipShow ("DEMONT", "Guardian Appearence", "Kill the remaining demons!", 0);
    Notify_Message("GUARDIAN WAVE", "Kill the remaining demons!", "DEMONT", 0);
	
	
    // open doors/gates
    if (f_Doortype == 0)
    {
        door_open(101, f_Doorspeed);
        door_open(102, f_Doorspeed);
        door_open(103, f_Doorspeed);
        door_open(104, f_Doorspeed);
    }
    else
    {
        floor_lowertonearest(101, f_Doorspeed);
        floor_lowertonearest(102, f_Doorspeed);
        floor_lowertonearest(103, f_Doorspeed);
        floor_lowertonearest(104, f_Doorspeed);
    }
    
    // one last hate command
    delay(35);

    //Try to open the doors again -- sometimes if a sector
    // is recaptured at just the right time, a door will stick
    if (f_Doortype == 0)
    {
        door_open(101, f_Doorspeed);
        door_open(102, f_Doorspeed);
        door_open(103, f_Doorspeed);
        door_open(104, f_Doorspeed);
    }
    else
    {
        floor_lowertonearest(101, f_Doorspeed);
        floor_lowertonearest(102, f_Doorspeed);
        floor_lowertonearest(103, f_Doorspeed);
        floor_lowertonearest(104, f_Doorspeed);
    }
    
	thing_activate(104); // If the last core was de-activated...
	delay(1);
        thing_hate(110, 104, 0);
        thing_hate(111, 104, 0);
        thing_hate(112, 104, 0);
        thing_hate(113, 104, 0);
        thing_hate(114, 104, 0);
		
	
	
	int mtotal, mkilled;
        
    // wait until most of the demons are dead
    while(1)
    {
		GiveActorInventory(110, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(111, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(112, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(113, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(114, "MarkOnMap_ThisAsshole", 1);

		//[Samu] I've always hated zandronum for these broken fuctions.
		mtotal = GetLevelInfo (LEVELINFO_TOTAL_MONSTERS),
        mkilled = GetLevelInfo (LEVELINFO_KILLED_MONSTERS);
		// There is the -n monster count bug, so to counter that. 
		// We're gonna ignore the "5 monsters to guardian" rule.
		
        // recount
		/*
		f_SmallTipPlain (strparam(s:"Monsters remaining: ", d:l_RemainingMonsters), CR_BRICK, 4);
		*/
        l_RemainingMonsters = thingcount(0, 111) + thingcount(0, 112) + thingcount(0, 113) + thingcount(0, 114) + thingcount(0, 110);
		
        g_MonstersLeft = l_RemainingMonsters;
		
        if (l_RemainingMonsters < 5 || mKilled >= mTotal)     break;
		// And maybe, analize this quickly, to evade missupdates.
        delay(5);
    }

    // kill off the remaining demons
    thing_destroy(110, 0);
    thing_destroy(111, 0);
    thing_destroy(112, 0);
    thing_destroy(113, 0);
    thing_destroy(114, 0);
    
    delay(35);
    
    // display message
	Notify_Message("GUARDIAN WAVE", "Incoming!", "DEMONT", 0);
	g_GuardianState = INTDB_GUARDIANSTATE_ATTACK;
	
	g_Status = 4;
	
    // spawn boss script
    if(c_NukeLaunched != 1){
    acs_execute(90, 0, 0, 0, 0);}
	
}

function bool GuardianWave_LoopCond(int surv){
	bool cond_1 = thingcount(0, 118) > surv;
	bool cond_2 = thingcount(0, 110) > surv;
	bool cond_3 = thingcount(0, 111) > surv;
	bool cond_4 = thingcount(0, 112) > surv;
	bool cond_5 = thingcount(0, 113) > surv;
	bool cond_6 = thingcount(0, 114) > surv;
	bool win_cond = (cond_1 + cond_2 + cond_3 + cond_4 + cond_5 + cond_6) < 1;

	return (thingcount(0, 118) > surv || 
			thingcount(0, 110) > surv || 
			thingcount(0, 111) > surv || 
			thingcount(0, 112) > surv || 
			thingcount(0, 113) > surv || 
			thingcount(0, 114) > surv) && !win_cond;
}

Script "SFPlus_GuardianWaveChecker" (int surv){
	// Re-hate just in case. 
		thing_hate(118, 104, 0);
		thing_hate(110, 104, 0);
		thing_hate(111, 104, 0);
		thing_hate(112, 104, 0);
		thing_hate(113, 104, 0);
		thing_hate(114, 104, 0);
		
	int mkilled, mTotal; 
	int timeout = 300; // 5 Minutes (in secs) before moving to next map.
	//if(g_GameOver) Terminate;
	g_GuardianState = INTDB_GUARDIANSTATE_DEFEAT;

    while(GuardianWave_LoopCond(surv) && timeout > 0){
		GiveActorInventory(111, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(112, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(113, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(114, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(110, "MarkOnMap_ThisAsshole", 1);
		GiveActorInventory(118, "MarkOnMap_ThisAsshole", 1);
       //[Samu] Zandronum is dumb counting monsters.
		
		g_MonstersLeft = thingcount(0, 118) + thingcount(0, 110) + thingcount(0, 111) + thingcount(0, 112) + thingcount(0, 113) + thingcount(0, 114) - surv;
		
		/*
		f_BigCenterTipBold(strparam(s:"Monsters remaining: ", d:g_MonstersLeft), CR_BRICK);
		*/
		if(g_GameOver) Terminate;
		// Keep hatin'
		thing_hate(118, 104, 4);
		thing_hate(110, 104, 4);
		thing_hate(111, 104, 4);
		thing_hate(112, 104, 4);
		thing_hate(113, 104, 4);
		thing_hate(114, 104, 4);
		delay(35 * 1);
		timeout--;
		thing_remove(7777);
	}
	if(timeout == 0) 
		Notify_Message("Demon Re-threat!","They're leaving where they came!","DEMONT", 0);
	if(g_GameOver) Terminate;
	// Good, time's over, kill the left overs.
	//g_GuardianState = INTDB_GUARDIANSTATE_DEFEAT;
	ACS_NamedExecute("SFPlus_KillnEnd", 0, 2);
}

Script "SFPlus_KillnEnd" (int reason){
	thing_destroy(118, 0);
	thing_destroy(110, 0);
    thing_destroy(111, 0);
    thing_destroy(112, 0);
    thing_destroy(113, 0);
    thing_destroy(114, 0);

	delay(35);
	thing_remove(118);
	thing_remove(110);
	thing_remove(111);
	thing_remove(112);
	thing_remove(113);
	thing_remove(114);
    
    // endgame
    acs_execute(125, 0, reason, 0, 0);
}

// game over
// 1 = Nuked
// 2 = All killed
// 3 = Demonic Core destroyed
// 4 = Marine Core destroyed

script 125 (int l_Condition)
{
    // define some local containers
    int l_MonstersKilled = -1;
    int l_PlayerDeaths = -1;
    int l_SkillLevel = -1;
    int g_FinalSkillScore = 0;
	int n_players = PlayerCount();
	
    
	ACS_Terminate(100,0); // Kill the sector management survival script if used at all.
	acs_Terminate(129,0); // Kill the timer counter.
	
	g_GameOver = true; // Stops the guardian checker loop.
	g_GameEnding = l_Condition;
	
    // display center message
    setfont("STATBIGS");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    
	/*
    if(l_Condition != 2)g_SkillScore = f_AIDir_Check();
    g_FinalSkillScore = g_SkillScore / (2+(PlayerCount()/2));
	*/

	if (l_Condition < 1 || l_condition > 4){
		hudmessagebold(s:"No Count!"; 1, 150, CR_RED, s_ScreenSize[0] * 0.5 + 0.0, s_ScreenSize[1] * 0.5 + 0.0, 5.0);
		delay(35*6);
		ResetMap();
	}
    else if (l_Condition == 4)       {
	hudmessagebold(s:"Defeat!"; 1, 150, CR_RED, s_ScreenSize[0] * 0.5 + 0.0, s_ScreenSize[1] * 0.5 + 0.0, 5.0);
	Notify_Message("GAME OVER", "Mission Failed!", "DEATH", 3);
	}
    else                {        
	hudmessagebold(s:"Victory!"; 1, 150, CR_RED, s_ScreenSize[0] * 0.5 + 0.0, s_ScreenSize[1] * 0.5 + 0.0, 5.0);
	Notify_Message("GAME OVER", "Mission Complete!", "PLAYER", 1);
	}
    
    delay(35 * 6);
    // change camera and remove huds (and exit mechs)
    changecamera(40, 0, 0);
    g_Status = 299;
    
    
    // display endpic
    if (l_Condition == 1)       setfont("HCON1");
    if (l_Condition == 2)       setfont("HCON2");
    if (l_Condition == 3)       setfont("HCON4");
    if (l_Condition == 4)       setfont("HCON3");
    if (l_Condition == 5)
    {
        setfont("HCON4");
        g_FinalSkillScore = 100;
    }
    hudmessagebold(s:"a"; 0, 160, 0, 0.1, 0.1, 900.0);
    
    // add or subtract bonus points
	/*
    if (l_Condition == 1)       g_FinalSkillScore += 20;
    if (l_Condition == 2)       g_FinalSkillScore += 15;
    if (l_Condition == 3)       g_FinalSkillScore += 10;
	*/
    
    
	str msg;
	switch(l_Condition){
		case 1: msg = "Nukes sloves everything"; break;
		case 2: msg = "Rip and tear until it's done"; break;
		case 3: msg = "Jokes on you demons"; break;
		case 4: msg = "Soon, ashes will remain..."; break;
	}
	
	//[Samu] you think you can get a good score by dying a lot!?
	// collect final score
	int average_kpm_percent;
	int lastwave_percent;
	if(n_players != 0){
		average_kpm_percent = FixedMul(FixedDiv(getlevelinfo(LEVELINFO_KILLED_MONSTERS)<<16, AIDir_AverageKPM(n_players)<<16), 70.0)>>16;
		if(average_kpm_percent > 70) average_kpm_percent = 70;
		
		// 70% of skill score depends on the number of monsters killed, and 30% depending on the gametype.
		// If any other game type (CF or SF) 10% per each surviving core.
		// else (SD) 30% proportional to the last wave reached.

		if(f_Gametype == 5){
			lastwave_percent = FixedMul(FixedDiv(m_SurvivalWave<<16, f_SurvivalLastLevel<<16), 30.0)>>16;
			g_FinalSkillScore = average_kpm_percent + lastwave_percent;
		}else{
			g_FinalSkillScore = average_kpm_percent + g_SkillScore + g_RecapCount*5;
		}

		int death_skill_discount = 0;
		if (l_Condition == 4)       g_FinalSkillScore -= 20; // Substract if defeated.
		else{
			if(p_TotalPlayerDeaths == 0 && l_Condition != 4) g_FinalSkillScore += 30; // Perfection bonus.
			else g_FinalSkillScore -= death_skill_discount;// Substract player deaths too.
		} 
		death_skill_discount = ((p_TotalPlayerDeaths / n_players) / 3)*2;

		// Debug info.
		log(s:"Game kills: ", d:getlevelinfo(LEVELINFO_KILLED_MONSTERS), s:" / ", d:AIDir_AverageKPM(n_players), s:" kills. +", d:average_kpm_percent, s:"%");
		if(f_Gametype == 5) log(s:"Waves completed: ", d:m_SurvivalWave, s:" / ", d:f_SurvivalLastLevel,s:" waves. +", d:lastwave_percent, s:" %");
		else{
			if(g_RecapCount > 0){
				log(s:"Sector Recaptures: ", d:g_RecapCount, s:" Times, Bonus: +", d:(g_RecapCount*5), s:" %");
			}
			log(s:"Core protection Bonus: +", d:g_SkillScore, s:" %");
		}
		if(p_TotalPlayerDeaths == 0) log(s:"No deaths! +", d:30, s:"%");
		else log(s:"Players Died: ", d:p_TotalPlayerDeaths, s:" times. ", s:"-", d:((p_TotalPlayerDeaths / n_players)*2), s:"%");
		log(s:"Skill Percent: ", d:g_finalSkillScore, s:" %");
	} else {
		g_FinalSkillScore = 0;
		death_skill_discount = 100;
	}
	
	// check limits
    if (g_FinalSkillScore > 100)     g_FinalSkillScore = 100;
    if (g_FinalSkillScore < 0)       g_FinalSkillScore = 0;
    
    // display killed demons
    setfont("STATBIGS");
	hudmessagebold(s:msg; 0, 150, CR_WHITE, s_ScreenSize[0] * 0.5 + 10.0, s_ScreenSize[1] * 0.5 + 35.0, 0.0);

	int LevelKilledMonsters = getlevelinfo(LEVELINFO_KILLED_MONSTERS);

    while(l_PlayerDeaths < p_TotalPlayerDeaths || l_MonstersKilled < LevelKilledMonsters)
    {
        
        ambientsound("weapons/pistol", 20);
		
		if(l_PlayerDeaths < p_TotalPlayerDeaths) l_PlayerDeaths ++;

		if(l_MonstersKilled < LevelKilledMonsters - 10000)
			l_MonstersKilled += 100;
		if(l_MonstersKilled < LevelKilledMonsters - 1000)
			l_MonstersKilled += 50;
		else if(l_MonstersKilled < LevelKilledMonsters - 100)
			l_MonstersKilled += 25;
        else l_MonstersKilled ++;

		if(l_MonstersKilled >= LevelKilledMonsters) l_MonstersKilled = LevelKilledMonsters;

		FinalFight_ScoreString(0, "You killed", l_MonstersKilled, " \cgdemons");
		if(p_TotalPlayerDeaths == 0)  
			FinalFight_ScoreString(1, "No player deaths!", -1, "");
		else 						
			FinalFight_ScoreString(1, "Players died", l_PlayerDeaths, " \cgtimes");
		
		if(f_Gametype == 5)
			FinalFight_ScoreString(2, "Cleaned", m_SurvivalWave, " \cgwaves");
		else				
			FinalFight_ScoreString(2, "Protected", g_SkillScore/10, " \cgcores");
        delay(2);
    }
	if(g_RecapCount){
		delay(15);
		int recap_counter = 0;
		while(recap_counter < g_RecapCount)
		{
			ambientsound("weapons/pistol", 20);
			recap_counter++;
			FinalFight_ClearString(0);
			FinalFight_ScoreString(1, "Sector Recaptures", recap_counter, " \cgtimes");
			FinalFight_ClearString(2);
			
			delay(2);
		}
	}
	
    delay(35);
	
	while(l_SkillLevel < g_FinalSkillScore)
    {
        setfont("STATBIGS");
        ambientsound("weapons/pistol", 20);
        l_SkillLevel ++;
		setfont("BIGFONT");
		FinalFight_ScoreString(2, "Skill level: ", l_SkillLevel, "%");
        delay(2);
    }
    
    delay(35 * 1);
	setfont("confont");	
	msg = "";
	//[Samu] I got bored lol.
	if(l_Condition == 4){
		if (g_FinalSkillScore < 0)         msg = "You suck so much, that you broke the limit of the game.";
		else if (g_FinalSkillScore < 10)   msg = "Your skill is not enough!";
		else if (g_FinalSkillScore < 20)   msg = "You failed it!";
		else if (g_FinalSkillScore < 30)   msg = "Let this be lesson for you";
		else if (g_FinalSkillScore < 40)   msg = "At least you got a decent score";
		else if (g_FinalSkillScore < 50)   msg = "Focus more on the core next time"; 
		else if (g_FinalSkillScore < 60)   msg = "And that's why the teamwork exists";
		else if (g_FinalSkillScore < 70)   msg = "Damn... And you were rocking the map";
		else if (g_FinalSkillScore < 80)   msg = "How did you lost the game again?";
		else if (g_FinalSkillScore < 90)   msg = "You can't read this, ha-ha! oh wait you could?"; 
		else if (g_FinalSkillScore < 100)  msg = "Don't you have anything better to do?";
		else if (g_FinalSkillScore == 100) msg = "... Nut enough cheats ...";
	}else{
		if (g_FinalSkillScore < 0)         msg = "You cheaty motherfuckers";
		else if (g_FinalSkillScore < 10)   msg = "It's a miracle that you won this.";
		else if (g_FinalSkillScore < 20)   msg = "Try to do not die a lot next time.";
		else if (g_FinalSkillScore < 30)   msg = "You will get it someday";
		else if (g_FinalSkillScore < 40)   msg = "I think you can do it better.";
		else if (g_FinalSkillScore < 50)   msg = "Not bad, not bad at all"; 
		else if (g_FinalSkillScore < 60)   msg = "Nice work, but still you can do it better.";
		else if (g_FinalSkillScore < 70)   msg = "Good job! not anyone reaches to this level";
		else if (g_FinalSkillScore < 80)   msg = "Great job! Now pat yourself in the back!";
		else if (g_FinalSkillScore < 90)   msg = "Excelent (team)work!"; 
		else if (g_FinalSkillScore < 100)  msg = "That was an amazing game!";
		else if (g_FinalSkillScore == 100) msg = "You mastered the hell itself!";
    }
	hudmessagebold(s:msg; 0, 158, CR_GOLD, s_ScreenSize[0] * 0.5 + 0.0, s_ScreenSize[1] * 0.5 + 43.0, 6.0);
	
    delay(35 * 6);

    exit_normal(0);
}

function void FinalFight_ClearString(int id){
	hudmessagebold(s:""; 0, 151+id, CR_RED, s_ScreenSize[0] * 0.5 - 150.1, s_ScreenSize[1] * 0.5 + 55.0 + 15.0*id, 0.0);
	hudmessagebold(s:""; 0, 154+id, CR_WHITE, s_ScreenSize[0] * 0.5 + 180.2, s_ScreenSize[1] * 0.5 + 55.0 + 15.0*id, 0.0);
}

function void FinalFight_ScoreString(int id, str label, int number, str label_number){
	setfont("STATBIGS");
	hudmessagebold(s:label; 0, 151+id, CR_RED, s_ScreenSize[0] * 0.5 - 150.1, s_ScreenSize[1] * 0.5 + 55.0 + 15.0*id, 0.0);
	setfont("BIGFONT");
	if(number != -1)
	hudmessagebold(d:number, s:label_number; 0, 154+id, CR_WHITE, s_ScreenSize[0] * 0.5 + 180.2, s_ScreenSize[1] * 0.5 + 55.0 + 15.0*id, 0.0);
}

// cheatz
script 999 (void)
{
	p_Credits[playernumber()] = 99999;
	c_Credits = 99999;
}  

///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_AIDir.acs
// the almighty Peter Jackson of Doom! "STAND BACK LAD, THIS CALLS FOR DIVINE INTERVENTION"

// include the custom levels
#library "f_AIDir"
#import "f_IntDB.acs"
#import "fl_WDir.acs"
#import "fl_PupDir.acs"
#import "fl_MupDir.acs"
#import "fl_IDir.acs"
#import "fp_AISet.acs"
#include "zcommon.acs"

// check function
function int f_AIDir_Check (void)
{
    // setup a return container
    int l_Score;
    
    // gather score information
    
    // phase 1 - killed monsters
    l_Score += getlevelinfo(LEVELINFO_KILLED_MONSTERS)*f_AISkillMultiplier/2/35;
    
    // phase 2 - count players
    l_Score += playercount() * 2;
    //l_Score += playercountReplicate * 2;
    
    // [Samu] mind the players and the extra gap between levels
    int extra_gap = AIDir_ExtraLevelGap();

    // phase 3 - check current sector
    if (g_Status == 1)      l_Score += 15 + extra_gap;
    if (g_Status == 2)      l_Score += 0 + extra_gap;
    if (g_Status == 3)      l_Score -= 5 + extra_gap;
    if (g_Status == 4)      l_Score -= 25 + extra_gap;
    
    // phase 4 - if a commander based game, then count credits too
    if (f_Gametype == 1)
    {
        if (c_Credits < 100)            l_Score -= 5;
        else if (c_Credits < 500)       l_Score -= 10;
        else if (c_Credits >= 1000)
        {
            // [Samu] one less loop out of the way
            if(c_Credits < 100000)
                l_Score += (c_Credits / 2000) * extra_gap;
        }
    }
    
    // phase 6 *NEW* - track powerful weapon purchase
	// [Samu] fl_WDir Has a pair of variable trackers, so lets use them to crank up difficulty too!
	l_Score += WPTrack_GetScore(); 
	
	//[Samu] The more and expensier upgrades, the harder it gets!
	l_Score += UPTrack_GetScore();
	l_Score += PUTrack_GetScore();
    l_Score += MechUp_GetScore();
    l_Score += Rune_GetScore();

    // Track the recap counter! the more you recap, the faster the wave.
    l_Score += g_RecapCount*12; // Speed up upon recap!
	//print(d:aiSubstract);
	if (l_Score < 5){ l_Score = 30; }
	
	
    // return the score
    if (f_Gametype != 5)
    {
        return l_Score;
    }
    
	if (PlayerCount() < 6){
   		 return m_SurvivalWave * 10 + 1;
	}
	else if (PlayerCount() < 14){
   		 return m_SurvivalWave * 13 + 1;
	}
   	return m_SurvivalWave * 15 + 1;
}

function int AIDir_AverageKPM(int num_players){
    // Average kills per minute. Considers player count and game length (+ guardian wave). Used for measuring the skill issue.
    int res;
    int spawn_amount = m_AIDCap;

    if (f_Gametype == 5) { // In case of survival defender maps.
        res = m_AIDCap*(num_players)*(m_SurvivalWave);
    }else {
        res = m_AIDCap + ((m_AIDCap/2)*num_players)*(f_Gamelength+f_GuardianLength);
    }
    return res;
}

function int AIDir_ExtraLevelGap(void){
    // Adds some extra gap, allowing the lower monsters fight a bit longer.
    if(playercount() > 2) return (PlayerCount()/2);
    return 0;
} 

function int AIDir_CurrentLevel(void){
    // The short of f_AIDir_Check() / 10
    // Determines the monster levelset to spawn.
    return (f_AIDir_Check() / (10 + AIDir_ExtraLevelGap()));
}

// the ai director debugger
script 269 (void)
{
	str msg;
    while(1)
    {
		msg = strParam(
		s:"Players in game: ", d:PlayerCount(),
		s:"\nWDir Packs Score: ", d:WPTrack_GetScore(),
		s:"\nWDir Upgrades Score: ", d:UpTrack_GetScore(),
		s:"\nPupDir Upgrades Score: ", d:PUTrack_GetScore(),
        s:"\nRune Upgrades Score: ", d:Rune_GetScore(),
        s:"\nMech Upgrades Score: ", d:MechUp_GetScore(),
		s:"\nSector recapture score: ", d:(g_RecapCount*12),
        s:"\nAI Director status: ", d:f_AIDir_Check(),
		s:"\nAI Spawn Level: ", d:(AIDir_CurrentLevel() + 1),
        s:"\nAverage Kills per minute: ", d:AIDir_AverageKPM(Playercount()));
        hudmessagebold(s:msg;0, 66, cr_gold, 0.3, 0.2, 1.0);
        delay(1);
		
    }
}  
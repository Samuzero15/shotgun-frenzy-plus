///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_mSpwn.acs
// The main spawn script! (Thank you GAME EVENTS! YEEEE)

#library "fp_mSpwn"

#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "f_AIDir.acs"
#import "fl_techs.acs"
#include "zcommon.acs"
#include "acsutils.acs"
#include "samu_tools.acs"

#include "champ_core.acs" // The whole champion making stuff. Just to do not overwhelm this script.
#include "champ_make.acs"
#include "champ_constfx.acs"
#include "champ_deathfx.acs"
#include "champ_onhitfx.acs"


#define SPAWN_EXCLUDEMONS 4
int exclude_monsters_from_script[SPAWN_EXCLUDEMONS] = {
	"DemonTurret",
	"DemonWall",
	"DemonCore",
	"DemonVein"
};

function bool MonsterSpawn_IsExcluded(void) {
	str actor = GetActorClass(0);
	for(int i = 0; i < SPAWN_EXCLUDEMONS; i++){
		if(StrCmp(actor, exclude_monsters_from_script[i]) == 0) return true;
	}
	return false;
}

script "SFPlus_MonsterSpawn" (int type, int arg1, int arg2) EVENT
{
    if(type != GAMEEVENT_ACTOR_SPAWNED ||
	 (type == GAMEEVENT_ACTOR_SPAWNED && CheckFlag(0, "DORMANT")) || 
	 (type == GAMEEVENT_ACTOR_SPAWNED && CheckFlag(0, "FRIENDLY")) ||
	 MonsterSpawn_IsExcluded() ){
		 if(CheckInventory("Monster_MaxHealth") == 0 && Playernumber() != 1){
			 GiveInventory("Monster_MaxHealth", getactorproperty(0, APROP_Health));
		 }	
		 terminate; 
	 }
	 // Make sure the event is Spawned and not anything else
	 // Also, make sure we are not modifying dormant actors, and if
	 // It's not an actor we want to championize or hp modify ever
	delay(1); // Just in case bro.

	if(CheckInventory("ChampSplit_SkipSpawnScript")) terminate;

	// get current attributes
	int health = getactorproperty(0, APROP_Health);
	if(health <= 0) terminate;
	int alpha = getactorproperty(0, APROP_Alpha);
	int damage_factor = 1.0;
	//int adjustedCount = PlayerCount()/2;
	int extrahealth = 0;
	int percent = 0;
	int player_treshold = PlayerCount() > 2;
	int l_Level;
	
	// auto adjust monsters based on player count
	if (alpha != 0.9 && player_treshold){
		//log(s:"Adjusting health");
		int player_diff = PlayerCount()-2;
		l_Level = AIDir_CurrentLevel();

		percent = m_hpmult>>16;
		extrahealth = (player_diff)*((health*percent)/100);
		if(l_Level >= 20){
			percent = m_hpolv20>>16;
			extrahealth += (l_Level - 19)*(player_diff)*((health*percent)/100);
			//log(s:"Extra health added after 20 levels = ",d:(l_Level - 19)*(player_diff)*((health*percent)/100));
		} 
		damage_factor = 1.0 + (player_diff)*fixedDiv(p_dmgmult, 100.0);
		setactorproperty(0, APROP_Health, health + extrahealth);
		setactorproperty(0, APROP_DamageFactor, damage_factor);
		setactorproperty(0, APROP_Alpha, 0.9);
		//log(s:"Health adjusted.");
	}else if (alpha != 0.9){ 
		// In almost single player games, add the extra health after level 20
		l_Level = AIDir_CurrentLevel();
		if(l_Level >= 20){
			percent = m_hpolv20>>16;
			extrahealth += (l_Level - 19)*((health*percent)/100);
			//log(s:"Extra health added after 20 levels = ", d:(l_Level - 19)*((health*percent)/100));
		} 
		damage_factor = 1.0 + (player_diff)*fixedDiv(p_dmgmult, 100.0);
		setactorproperty(0, APROP_Health, health + extrahealth);
		setactorproperty(0, APROP_Alpha, 0.9);
	}
	if(GameSkill() != 0)Champ_Make(); // Lookup champ_make.acs inside champions folder.
	// After all the health modifications, set the max health, for champion effects pruposes.
	GiveInventory("Monster_MaxHealth", getactorproperty(0, APROP_Health));
	ACS_NamedExecuteAlways("SFPlus_AutoBalanceDmg", 0);
	ACS_NamedExecuteAlways("SFPlus_MonsterTarget", 0);
}

Script "SFPlus_MonsterTarget" (void){
	delay(random(5, 35));
	int hp = GetActorProperty(0, APROP_Health);
	int target_id = -1;
	int last_target_id = 0;
	int current_status = g_status;
	int latest_battery = 100 + g_status;
	str monsterClass = GetActorClass(0);
	int five_ticks = 0;
	while(hp > 0){
		hp = GetActorProperty(0, APROP_Health);
		latest_battery = 100 + g_status;
		target_id = GetActorTargetTID(0);
		int build_target = false;

		if(getActorHealth(target_id) <= 0 || current_status != g_status){
			TakeMaxInventory("Building_AttackFirst");
			five_ticks = 0;
		}

		if(five_ticks == 28){ // Each 4* seconds
			if(CheckInventory("Building_AttackFirst") >= 1){
				thing_hate(0, 666, 4);
			} else if(ThingCount(0, latest_battery) >= 1){
				Thing_Hate(0, 100 + g_status, 4);
			} else if(ThingCount(0, 104) >= 1){ // for Suirvival defender
				Thing_Hate(0, 104, 4);
			} else {
				Thing_Hate(0, 0, 4);
			}
			five_ticks = 0;
		}
		current_status = g_status;
		five_ticks++;
		delay(5);
	}
}

Script "SFPlus_AutoBalanceDmg" (void){
	//Low or raise the damage factor took by players.
	int hp = getActorProperty(0, APROP_Health);
	int playercount_last = -1;
	int damage_factor = 0.0;
	int pdmg_mult = a_GetCvarFixed("sfp_playerdmgmult");
	do{
		hp = getActorProperty(0, APROP_Health);
			if(playercount_last != PlayerCount()){
				damage_factor = (PlayerCount() - 2)*fixedDiv(p_dmgmult, 100.0);
				if(damage_factor > 0)
					setactorproperty(0, APROP_DamageFactor, 1.0 + damage_factor);
				else 
					setactorproperty(0, APROP_DamageFactor, 1.0);
				/*log(s:"Player Count (debug-var): ", d:debug_var,
				s:"\nCurrent DMG Factor: ", f:getActorProperty(0, APROP_DamageFactor));*/
			}
		playercount_last = PlayerCount();
		delay(1);
	}while(hp > 0);
}
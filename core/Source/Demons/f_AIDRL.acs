///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_AIDRL.acs
// demon levels (can be customised, in a diff way.)
#library "f_AIDRL"

#import "f_AIDir.acs"
#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fp_AISet.acs"
#import "fa_SetList.acs"
#include "zcommon.acs"

int AIDirector_Demonlimit = 250; // 250 = default


// AI Director 1.5 - Programmed by Tribeam
// to change the flow of demons, use this

#libdefine DIFF_EASY 0
#libdefine DIFF_MED 1
#libdefine DIFF_HARD 2

#libdefine AIDRL_REPEATLASTLEVELS 5

int last_spawner[3]; 
int spawnspot_in_map[3]; 

// *NEW* boss level
int g_BossLevel = 0;

/*
script "SFPlus_SpawnBossWave" (int l_Level) {
	int btid = 3000;
	int bhealth;
	SpawnSpot(boss_levels[l_Level], 199, btid);
	delay(1);
	bhealth = getactorproperty(btid, APROP_Health);
	GiveActorInventory(btid, "FPMToken_Hard", 1); 
	SetActorState(btid,"BeHard");
	SetActorProperty(btid,APROP_Health, bhealth + ((bhealth*0.5)>>16));
	//log(s:"Original Health: ", d:bhealth, s:", Buffed Health: ", d:getactorproperty(btid,APROP_Health));
	//Thing_ChangeTID(btid, 110);
}
*/

script 120 OPEN
{
	//[Samu] Same script, but refactorized, for readablity pruposes.
	
	int l_Level;
    int l_GameStopped;
	int l_MonDiff;
	int l_BossAmount;
	
    l_GameStopped = 0;
    
    int l_RemainingMonsters;
    g_TenMinMark = 0;
	bool l_CacoCond;
	bool l_BossCond;
	bool l_BossRespawn;
	int btid = 3000;
	int bhealth;
    int levelrepeater = AIDRL_REPEATLASTLEVELS;

	// Don't spawn anything if the game did'nt started.
	while(g_Status == 0)
        delay(35);
    
    // Check the current set to use.
    int cvar = GetCVar("sfp_monsterset");
	if(cvar < -1 || cvar >= aiset_stack) AISet_SetMonsterSet(0);
	if(cvar == -1) 	AISet_SetMonsterSet(random(0, aiset_stack-1));
	else			AISet_SetMonsterSet(cvar);

    // skip the spawning function for the difficulty if the thing count of the things spawned is 0.
    spawnspot_in_map[DIFF_EASY] = ThingCount(0, 115) > 0;
    spawnspot_in_map[DIFF_MED] = ThingCount(0, 116) > 0;
    spawnspot_in_map[DIFF_HARD] = ThingCount(0, 117) > 0;

    //Establish the last spawner.
    last_spawner[DIFF_EASY] = AIDir_Spawn(DIFF_EASY, 0);
    last_spawner[DIFF_MED] = AIDir_Spawn(DIFF_MED, 0);
    last_spawner[DIFF_HARD] = AIDir_Spawn(DIFF_HARD, 0);

    if(last_spawner[DIFF_EASY] == 0 || last_spawner[DIFF_MED] == 0 || last_spawner[DIFF_HARD] == 0){
        log(s:"(AI_DIR): The first Spawner for easy, medium or hard is undefined, using default spawner.");
        AISet_SetMonsterSet(0);
    }
	
	AIDirector_Demonlimit = m_AIDCap; // Check the user's defined cap amount.
    while(l_GameStopped == 0)
    {
	l_Level = AIDir_CurrentLevel();
	l_CacoCond = f_Cacodemons == 1 && l_Level >= 4;
	l_BossCond = l_Level >= boss_starting_level && g_BossLevel <= l_Level;
	
	l_MonDiff = getlevelinfo(LEVELINFO_TOTAL_MONSTERS) - getlevelinfo(LEVELINFO_KILLED_MONSTERS);
	//print (d:l_MonDiff);
		if (c_HaltSpawning == 0)
		{
			if(l_Level >= 20){
                if(levelrepeater == 0) levelrepeater = AIDRL_REPEATLASTLEVELS;
                l_Level = 19 - levelrepeater;
                levelrepeater--;
            }
			if(l_Level < 0) l_Level = 0;
			
			if(l_Mondiff < AIDirector_Demonlimit)
			{
				if (l_BossCond){
					l_BossAmount = SpawnSpot(boss_levels[l_Level], 199, btid);
					/* Smoll buffs.
					delay(1);
					bhealth = getactorproperty(btid, APROP_Health);
					GiveActorInventory(btid, "FPMToken_Hard", 1); 
					SetActorState(btid,"BeHard");
					SetActorProperty(btid,APROP_Health, bhealth + ((bhealth*0.5)>>16));
					*/
					Thing_ChangeTID(btid, 110);
					g_BossLevel ++;
				}
				if (f_AdaptiveSpawning <= 0 || g_Status < 2)
				{
					AIDir_SpawnSpot(DIFF_EASY, l_Level, 115, 110);
					AIDir_SpawnSpot(DIFF_MED,  l_Level, 116, 110);
					if (f_Cacodemons == 0)      
						 AIDir_SpawnSpot(DIFF_HARD, l_Level, 117, 110);
					else SpawnSpot("sfCacodemon", 117, 110);
				}
				else if (f_AdaptiveSpawning == 1)
				{    
					if (g_Status == 2){
						AIDir_SpawnSpot(DIFF_EASY, l_Level, 201, 109 + g_Status);
						AIDir_SpawnSpot(DIFF_MED,  l_Level, 202, 109 + g_Status);
						if (!l_CacoCond) 
							 AIDir_SpawnSpot(DIFF_HARD, l_Level, 203, 109 + g_Status);
						else SpawnSpot("sfCacodemon", 	203, 109 + g_Status); 
					}
					
					if (g_Status == 3){     
						AIDir_SpawnSpot(DIFF_EASY, l_Level, 204, 109 + g_Status);
						AIDir_SpawnSpot(DIFF_MED,  l_Level, 205, 109 + g_Status);
						if (!l_CacoCond)      
							 AIDir_SpawnSpot(DIFF_HARD, l_Level, 206, 109 + g_Status);
						else SpawnSpot("sfCacodemon", 	206, 109 + g_Status); 
					}
					
					if (g_Status == 4){
						AIDir_SpawnSpot(DIFF_EASY, l_Level, 207, 109 + g_Status);
						AIDir_SpawnSpot(DIFF_MED,  l_Level, 208, 109 + g_Status);
						if (!l_CacoCond)      
							 AIDir_SpawnSpot(DIFF_HARD, l_Level, 209, 109 + g_Status);
						else SpawnSpot("sfCacodemon", 	209, 109 + g_Status); 
					}
				}
			}
		}
            
        delay(1);
           
           
        // make demons hate the sectors core
        thing_hate(109, g_Status + 100, 4);
        thing_hate(110, g_Status + 100, 4);
        //thing_hate(111, g_Status + 100, 4);
        //thing_hate(112, g_Status + 100, 4);
        //thing_hate(113, g_Status + 100, 4);
        //thing_hate(114, g_Status + 100, 4);
	
		// Hope this fixes the infinite wave's bug.
		if(g_GuardianState == INTDB_GUARDIANSTATE_PREPARED) break;
        delay(35 * 5);
    }
}  

function void AIDir_SpawnSpot(int diff, int lvl, int tag, int tid){
    if(!spawnspot_in_map[diff]){
        //log(s:"No spawnspot for difficulty:", d:diff);
        return;
    }
    str spawn_actor = AIDir_Spawn(diff, lvl);
    //log(s:"Spawning, ", s:spawn_actor);
    int n_monsters = SpawnSpot(spawn_actor, tag, tid);
    if(n_monsters == 0){
        //log(s:"Spawn failed, spawning last spawner", s:last_spawner[diff]);
        SpawnSpot(last_spawner[diff], tag, tid);
    } else {
        //log(s:"Spawn sucessful, last spawner updated");
        last_spawner[diff] = spawn_actor;
    }
}

function str AIDir_Spawn(int diff, int lvl){
	return enemy_levels[diff][lvl]; 
}

Script "Monster_HPBar" (int height){
	// This is a health bar for the hard-boss monsters!
	int hp = GetActorProperty(0, APROP_HEALTH);
	int max_hp = hp;
	int x = getactorx(0);
	int y = getactory(0);
	int zoff = height<<16 + 4.0;
	int z = getactorz(0) + zoff;
	int id = UniqueTID(3001);
	spawn("Turret_HealthBar", x, y, z, id);
	/*
	log(
	s:"Height: ", f:zoff, 
	s:" Health: ", d:hp, 
	s:" Health(GetActorProperty): ",d:GetActorProperty(0, APROP_HEALTH));
	*/
	while (hp > 0){
		x = getactorx(0);
		y = getactory(0);
		z = getactorz(0) + zoff;
		hp = GetActorProperty(0, APROP_HEALTH);
		
		setactorposition(id, x, y, z, 0);
		Bar2_State(id, hp, max_hp);
		//Bar_Color(id, hp, max_hp); // Damn you zandronum!
		delay(1);
	}
	setActorState(id, "HP_0");
	delay(20);
	Thing_Remove(id);
}

function void Bar2_State(int id, int var, int max_val){
	// Quick division function to show sprite.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int bar_state_num = bar_amount / 5;
	if(bar_state_num >= 20) bar_state_num = 20;
	setActorState(id, Strparam(s:"HP_", d:bar_state_num));
} 

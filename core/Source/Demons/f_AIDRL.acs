///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_AIDRL.acs
// demon levels (can be customised)
#library "f_AIDRL"

#import "f_AIDir.acs"
#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fp_AISet.acs"
#import "fa_SetList.acs"
#include "zcommon.acs"

int AIDirector_Demonlimit = 250; // 250 = default


// AI Director 1.5 - Programmed by Tribeam
// to change the flow of demons, use this

#libdefine DIFF_EASY 0
#libdefine DIFF_MED 1
#libdefine DIFF_HARD 2

#libdefine AIDRL_REPEATLASTLEVELS 5


// *NEW* boss level
int g_BossLevel = 0;

// AI spawning time
/*
//Process the clusterfuck of bit-packed string pointers
function void copywave(int w00, int i0, int i1)
{
    int i2 = 0;
    int iw00 = w00 & (0x0000003f);
    Print(s:set_list[iw00]);
    enemy_levels[i0][i1][i2++] = set_list[iw00];
    int iw01 = w00 & (0x00000fc0);
    iw01 >>= 6;
    Print(s:set_list[iw01]);
    enemy_levels[i0][i1][i2++] = set_list[iw01];
    int iw02 = w00 & (0x0003f000);
    iw02 >>= 12;
    Print(s:set_list[iw02]);
    enemy_levels[i0][i1][i2++] = set_list[iw02];
    int iw03 = w00 & (0x00fc0000);
    iw03 >>= 18;
    Print(s:set_list[iw03]);
    enemy_levels[i0][i1][i2++] = set_list[iw03];
    int iw04 = w00 & (0x3f000000);
    iw04 >>= 24;
    Print(s:set_list[iw04]);
    enemy_levels[i0][i1][i2++] = set_list[iw04];
}

//Read waves from console
function void readwaves(void)
{
//Fucking hell...
//Easy
    int w00;
    w00 = GetCVar("sf_easywave01");
    if (w00) {
        copywave(w00,0,0);
    }
    w00 = GetCVar("sf_easywave02");
    if (w00) {
        copywave(w00,0,1);
    }
    w00 = GetCVar("sf_easywave03");
    if (w00) {
        copywave(w00,0,2);
    }
    w00 = GetCVar("sf_easywave04");
    if (w00) {
        copywave(w00,0,3);
    }
    w00 = GetCVar("sf_easywave05");
    if (w00) {
        copywave(w00,0,4);
    }
    w00 = GetCVar("sf_easywave06");
    if (w00) {
        copywave(w00,0,5);
    }
    w00 = GetCVar("sf_easywave07");
    if (w00) {
        copywave(w00,0,6);
    }
    w00 = GetCVar("sf_easywave08");
    if (w00) {
        copywave(w00,0,7);
    }
    w00 = GetCVar("sf_easywave09");
    if (w00) {
        copywave(w00,0,8);
    }
    w00 = GetCVar("sf_easywave10");
    if (w00) {
        copywave(w00,0,9);
    }
    w00 = GetCVar("sf_easywave11");
    if (w00) {
        copywave(w00,0,10);
    }
    w00 = GetCVar("sf_easywave12");
    if (w00) {
        copywave(w00,0,11);
    }
    w00 = GetCVar("sf_easywave13");
    if (w00) {
        copywave(w00,0,12);
    }
    w00 = GetCVar("sf_easywave14");
    if (w00) {
        copywave(w00,0,13);
    }
    w00 = GetCVar("sf_easywave15");
    if (w00) {
        copywave(w00,0,14);
    }
    w00 = GetCVar("sf_easywave16");
    if (w00) {
        copywave(w00,0,15);
    }
    w00 = GetCVar("sf_easywave17");
    if (w00) {
        copywave(w00,0,16);
    }
    w00 = GetCVar("sf_easywave18");
    if (w00) {
        copywave(w00,0,17);
    }
    w00 = GetCVar("sf_easywave19");
    if (w00) {
        copywave(w00,0,18);
    }
    w00 = GetCVar("sf_easywave20");
    if (w00) {
        copywave(w00,0,19);
    }

//Medium
    w00 = GetCVar("sf_medwave01");
    if (w00) {
        copywave(w00,1,0);
    }
    w00 = GetCVar("sf_medwave02");
    if (w00) {
        copywave(w00,1,1);
    }
    w00 = GetCVar("sf_medwave03");
    if (w00) {
        copywave(w00,1,2);
    }
    w00 = GetCVar("sf_medwave04");
    if (w00) {
        copywave(w00,1,3);
    }
    w00 = GetCVar("sf_medwave05");
    if (w00) {
        copywave(w00,1,4);
    }
    w00 = GetCVar("sf_medwave06");
    if (w00) {
        copywave(w00,1,5);
    }
    w00 = GetCVar("sf_medwave07");
    if (w00) {
        copywave(w00,1,6);
    }
    w00 = GetCVar("sf_medwave08");
    if (w00) {
        copywave(w00,1,7);
    }
    w00 = GetCVar("sf_medwave09");
    if (w00) {
        copywave(w00,1,8);
    }
    w00 = GetCVar("sf_medwave10");
    if (w00) {
        copywave(w00,1,9);
    }
    w00 = GetCVar("sf_medwave11");
    if (w00) {
        copywave(w00,1,10);
    }
    w00 = GetCVar("sf_medwave12");
    if (w00) {
        copywave(w00,1,11);
    }
    w00 = GetCVar("sf_medwave13");
    if (w00) {
        copywave(w00,1,12);
    }
    w00 = GetCVar("sf_medwave14");
    if (w00) {
        copywave(w00,1,13);
    }
    w00 = GetCVar("sf_medwave15");
    if (w00) {
        copywave(w00,1,14);
    }
    w00 = GetCVar("sf_medwave16");
    if (w00) {
        copywave(w00,1,15);
    }
    w00 = GetCVar("sf_medwave17");
    if (w00) {
        copywave(w00,1,16);
    }
    w00 = GetCVar("sf_medwave18");
    if (w00) {
        copywave(w00,1,17);
    }
    w00 = GetCVar("sf_medwave19");
    if (w00) {
        copywave(w00,1,18);
    }
    w00 = GetCVar("sf_medwave20");
    if (w00) {
        copywave(w00,1,19);
    }

//Hard
    w00 = GetCVar("sf_hardwave01");
    if (w00) {
        copywave(w00,2,0);
    }
    w00 = GetCVar("sf_hardwave02");
    if (w00) {
        copywave(w00,2,1);
    }
    w00 = GetCVar("sf_hardwave03");
    if (w00) {
        copywave(w00,2,2);
    }
    w00 = GetCVar("sf_hardwave04");
    if (w00) {
        copywave(w00,2,3);
    }
    w00 = GetCVar("sf_hardwave05");
    if (w00) {
        copywave(w00,2,4);
    }
    w00 = GetCVar("sf_hardwave06");
    if (w00) {
        copywave(w00,2,5);
    }
    w00 = GetCVar("sf_hardwave07");
    if (w00) {
        copywave(w00,2,6);
    }
    w00 = GetCVar("sf_hardwave08");
    if (w00) {
        copywave(w00,2,7);
    }
    w00 = GetCVar("sf_hardwave09");
    if (w00) {
        copywave(w00,2,8);
    }
    w00 = GetCVar("sf_hardwave10");
    if (w00) {
        copywave(w00,2,9);
    }
    w00 = GetCVar("sf_hardwave11");
    if (w00) {
        copywave(w00,2,10);
    }
    w00 = GetCVar("sf_hardwave12");
    if (w00) {
        copywave(w00,2,11);
    }
    w00 = GetCVar("sf_hardwave13");
    if (w00) {
        copywave(w00,2,12);
    }
    w00 = GetCVar("sf_hardwave14");
    if (w00) {
        copywave(w00,2,13);
    }
    w00 = GetCVar("sf_hardwave15");
    if (w00) {
        copywave(w00,2,14);
    }
    w00 = GetCVar("sf_hardwave16");
    if (w00) {
        copywave(w00,2,15);
    }
    w00 = GetCVar("sf_hardwave17");
    if (w00) {
        copywave(w00,2,16);
    }
    w00 = GetCVar("sf_hardwave18");
    if (w00) {
        copywave(w00,2,17);
    }
    w00 = GetCVar("sf_hardwave19");
    if (w00) {
        copywave(w00,2,18);
    }
    w00 = GetCVar("sf_hardwave20");
    if (w00) {
        copywave(w00,2,19);
    }
}
*/
/*
script "SFPlus_SpawnBossWave" (int l_Level) {
	int btid = 3000;
	int bhealth;
	SpawnSpot(boss_levels[l_Level], 199, btid);
	delay(1);
	bhealth = getactorproperty(btid, APROP_Health);
	GiveActorInventory(btid, "FPMToken_Hard", 1); 
	SetActorState(btid,"BeHard");
	SetActorProperty(btid,APROP_Health, bhealth + ((bhealth*0.5)>>16));
	//log(s:"Original Health: ", d:bhealth, s:", Buffed Health: ", d:getactorproperty(btid,APROP_Health));
	//Thing_ChangeTID(btid, 110);
}
*/

script 120 OPEN
{
    // define some local containers
	
	//[Samu] Same script, but refactorized, for readablity pruposes.
	
	int l_Level;
    int l_GameStopped;
	int l_MonDiff;
	int l_BossAmount;
	
    l_GameStopped = 0;
    
    int l_RemainingMonsters;
    g_TenMinMark = 0;
	bool l_CacoCond;
	bool l_BossCond;
	bool l_BossRespawn;
	int btid = 3000;
	int bhealth;
    int levelrepeater = AIDRL_REPEATLASTLEVELS;

	//Check if the server wants modified waves
    //readwaves();
	
	// Don't spawn anything if the game did'nt started.
	while(g_Status == 0)
        delay(35);
	
	AIDirector_Demonlimit = m_AIDCap; // Check the user's defined cap amount.
    while(l_GameStopped == 0)
    {
	l_Level = AIDir_CurrentLevel();
	l_CacoCond = f_Cacodemons == 1 && l_Level >= 4;
	l_BossCond = l_Level >= boss_starting_level && g_BossLevel <= l_Level;
	
	l_MonDiff = getlevelinfo(LEVELINFO_TOTAL_MONSTERS) - getlevelinfo(LEVELINFO_KILLED_MONSTERS);
	//print (d:l_MonDiff);
		if (c_HaltSpawning == 0)
		{
			if(l_Level > 20){
                if(levelrepeater == 0) levelrepeater = AIDRL_REPEATLASTLEVELS;
                l_Level = 19 - levelrepeater;
                levelrepeater--;
            }
			if(l_Level < 0) l_Level = 0;
			
			if(l_Mondiff < AIDirector_Demonlimit)
			{
				if (l_BossCond){
					l_BossAmount = SpawnSpot(boss_levels[l_Level], 199, btid);
					/* Smoll buffs.
					delay(1);
					bhealth = getactorproperty(btid, APROP_Health);
					GiveActorInventory(btid, "FPMToken_Hard", 1); 
					SetActorState(btid,"BeHard");
					SetActorProperty(btid,APROP_Health, bhealth + ((bhealth*0.5)>>16));
					*/
					Thing_ChangeTID(btid, 110);
					g_BossLevel ++;
				}
				if (f_AdaptiveSpawning <= 0 || g_Status < 2)
				{
					SpawnSpot(AIDir_Spawn(DIFF_EASY, l_Level), 		115, 110);
					SpawnSpot(AIDir_Spawn(DIFF_MED,  l_Level), 		116, 110);
					if (f_Cacodemons == 0)      
						 SpawnSpot(AIDir_Spawn(DIFF_HARD, l_Level), 	117, 110);
					else SpawnSpot("sfCacodemon", 117, 110);
				}
				else if (f_AdaptiveSpawning == 1)
				{    
					if (g_Status == 2){
						SpawnSpot(AIDir_Spawn(DIFF_EASY, l_Level), 		201, 109 + g_Status);
						SpawnSpot(AIDir_Spawn(DIFF_MED,  l_Level), 		202, 109 + g_Status);
						if (!l_CacoCond) 
							 SpawnSpot(AIDir_Spawn(DIFF_HARD, l_Level), 	203, 109 + g_Status);
						else SpawnSpot("sfCacodemon", 						203, 109 + g_Status); 
					}
					
					if (g_Status == 3){     
						SpawnSpot(AIDir_Spawn(DIFF_EASY, l_Level), 		204, 109 + g_Status);
						SpawnSpot(AIDir_Spawn(DIFF_MED,  l_Level), 		205, 109 + g_Status);
						if (!l_CacoCond)      
							 SpawnSpot(AIDir_Spawn(DIFF_HARD, l_Level), 	206, 109 + g_Status);
						else SpawnSpot("sfCacodemon", 						206, 109 + g_Status); 
					}
					
					if (g_Status == 4){
						SpawnSpot(AIDir_Spawn(DIFF_EASY, l_Level), 		207, 109 + g_Status);
						SpawnSpot(AIDir_Spawn(DIFF_MED,  l_Level), 		208, 109 + g_Status);
						if (!l_CacoCond)      
							 SpawnSpot(AIDir_Spawn(DIFF_HARD, l_Level), 	209, 109 + g_Status);
						else SpawnSpot("sfCacodemon", 						209, 109 + g_Status); 
					}
				}
			}
		}
            
        delay(1);
           
           
        // make demons hate the sectors core
        thing_hate(109, g_Status + 100, 4);
        thing_hate(110, g_Status + 100, 4);
        //thing_hate(111, g_Status + 100, 4);
        //thing_hate(112, g_Status + 100, 4);
        //thing_hate(113, g_Status + 100, 4);
        //thing_hate(114, g_Status + 100, 4);
	
		// Hope this fixes the infinite wave's bug.
		if(g_GuardianState == INTDB_GUARDIANSTATE_PREPARED) break;
        delay(35 * 5);
    }
}  

function str AIDir_Spawn(int diff, int lvl){
	return enemy_levels[diff][lvl]; 
}

function void MList_SetBoss(int lvl, str m){
	boss_levels[lvl] = m;
}

function void MList_SetSpawner(int diff, int lvl, str spawner){
	enemy_levels[diff][lvl-1] = spawner;
}


Script "Monster_HPBar" (int height){
	// This is a health bar for the hard-boss monsters!
	int hp = GetActorProperty(0, APROP_HEALTH);
	int max_hp = hp;
	int x = getactorx(0);
	int y = getactory(0);
	int zoff = height<<16 + 4.0;
	int z = getactorz(0) + zoff;
	int id = UniqueTID(3001);
	spawn("Turret_HealthBar", x, y, z, id);
	/*
	log(
	s:"Height: ", f:zoff, 
	s:" Health: ", d:hp, 
	s:" Health(GetActorProperty): ",d:GetActorProperty(0, APROP_HEALTH));
	*/
	while (hp > 0){
		x = getactorx(0);
		y = getactory(0);
		z = getactorz(0) + zoff;
		hp = GetActorProperty(0, APROP_HEALTH);
		
		setactorposition(id, x, y, z, 0);
		Bar2_State(id, hp, max_hp);
		//Bar_Color(id, hp, max_hp); // Damn you zandronum!
		delay(1);
	}
	setActorState(id, "HP_0");
	delay(20);
	Thing_Remove(id);
}

function void Bar2_State(int id, int var, int max_val){
	// Quick division function to show sprite.
	int bar_amount = FixedMul(FixedDiv(var, max_val), 100.0) >> 16;
	int bar_state_num = bar_amount / 5;
	if(bar_state_num >= 20) bar_state_num = 20;
	setActorState(id, Strparam(s:"HP_", d:bar_state_num));
} 

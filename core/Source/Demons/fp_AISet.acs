///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_AISet.acs
// Ai call set.

#library "fp_AISet"
#import "f_AIDRL.acs"
#import "fp_lumpread.acs"
#include "zcommon.acs"
#include "acsutils.acs"

#define AISET_MAX 50
#define AISET_LEVELS 20

// boss characters that appear per round


// for survival mode only, the amount of spawns per round
int demon_spawncount[AISET_LEVELS] = {
	 60, 60, 60, 
	 80, 80, 80, 
	 90, 90, 90, 
	 100, 100, 100, 
	 130, 130, 130, 
	 160, 160, 180, 220, 500 
};

int enemy_levels[AISET_MAX][AISET_LEVELS];
int boss_levels[AISET_LEVELS];
int boss_starting_level;

str enemy_sets[AISET_MAX][3];
int aiset_stack = 0;

Script "SFPlus_LoadDefaultEnemySets" Open
{
	aiset_stack = 0;
	/*AISet_Add("D", "Default", 6);
	AISet_Add("R", "Rusher", 3);
	AISet_Add("S", "Survival", 1);
	AISet_Add("Z", "Zombies", 20);
	*/
	ACS_NamedExecuteWithResult("LumpRead_LoadFile", "SFMWAVES", "SFPlus_AISet_SFMWAVESReadLine");
}

Script "AISet_Add" (int index, int name, int boss){
	AISet_Add(index, name, boss);
}

Script "SFPlus_ListEnemySetsClientsided" (int set) CLIENTSIDE{
	int selected = set;
	AISet_Log("\cfRemember: sfp_monsterset <index> to change the monster set, and it requires a restart to take effect.");
	str string;
	for(int i = 0; i < aiset_stack; i++){
		str string_setentry = strparam(d:i,s:") ",s:enemy_sets[i][1],
		s:", Index: ",s:enemy_sets[i][0],
		s:", Spawn bosses on level:", d:enemy_sets[i][2]);
		if(selected == i){
			string = strparam(s:string, s:"\n", s:"\cf", s:string_setentry);
			continue;
		} 
		string = strparam(s:string, s:"\n", s:"\c-", s:string_setentry);
	}
	AISet_Log(string);
}

Script "SFPlus_ListEnemySets" (void){
	NamedExecuteClientScript("SFPlus_ListEnemySetsClientsided", PlayerNumber(), GetCvar("sfp_monsterset"));
}

Script "SFPlus_AISet_SFMWAVESReadLine" (int line) {
	//log(s:"\"", s:line, s:"\"");
	if(!LumpRead_CountArgs (line, 3, 3, "MWaves")) terminate;
	str index = LumpRead_NextArg (line,LUMPR_VALUE_STR);
	str name = 	LumpRead_NextArg (line,LUMPR_VALUE_STR);
	str boss_level_start = 	LumpRead_NextArg (line, LUMPR_VALUE_INT);
	boss_level_start = clamp(boss_level_start, 0, 20);
	AISet_Add(index, name, boss_level_start);
}

function void AISet_Add(str index, str name, int boss_level_start){
	if(aiset_stack >= AISET_MAX) {
		log(s:"(FP_AISET.acs):", s:" Monster set maxed out.");
		return;
	}  else{
		if(boss_level_start == 0) boss_level_start = -1;
		enemy_sets[aiset_stack][0] = index;
		enemy_sets[aiset_stack][1] = name;
		enemy_sets[aiset_stack][2] = boss_level_start;
		aiset_stack ++;
	}
	
}

function str AISet_GetMonsterSet_Name(int i){
	/*
	switch(i){
		case 0: return "Default"; break;
		case 1: return "Rusher"; break;
		case 2: return "Survival"; break;
	}
	*/
	if(enemy_sets[aiset_stack][1] == 0) return "Null";
	return enemy_sets[aiset_stack][1];
}


function void AISet_SetMonsterSet(int i){
	int boss_levels_on;
	/*
	switch (i){
		case 0: boss_levels_on = 6; break;
		case 1: boss_levels_on = 3; break;
		case 2: boss_levels_on = 1; break;
		default: i = 0; boss_levels_on = 6;
	}*/
	AISet_SetSpawnList(enemy_sets[i][0]);
	SetCVarString("sfp_monstersetname", enemy_sets[i][1]);
	boss_starting_level = enemy_sets[i][2];
}

function void AISet_SetSpawnList(str initial){
	str string;
	for(int i = 0; i < 4; i++){
		for(int j = 1; j <=AISET_LEVELS; j++){
			string = 
				strparam(s:"FPSpawn_", s:initial, s:AISet_GetMonsterDiff(i), d:j);
			if(i == 3) 	AISet_SetBoss	 (j,    string);
			else 		AISet_SetSpawner (i, j, string);
		}
	}
}

function void AISet_Log(str what){
	HudMessage(s:what; HUDMSG_LOG | HUDMSG_PLAIN | HUDMSG_NOTWITH3DVIEW | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP, 0, CR_WHITE, 0.0, 0.0, 0.1);
}

function void AISet_SetBoss(int lvl, str m){
	boss_levels[lvl] = m;
}

function void AISet_SetSpawner(int diff, int lvl, str spawner){
	enemy_levels[diff][lvl-1] = spawner;
}

function str AISet_GetMonsterSet(int index){
	if(index < 0 || index >= 3){
		log(s:"AISET: Index error. Default Set Selected.");
		return enemy_sets[0][0];
	} 
	return enemy_sets[index][0];
}

function str AISet_GetSpawnActor(int set, int diff, int lvl){
	return strparam(s:"FPSpawn_", s:AISet_GetMonsterSet(set), s:AISet_GetMonsterDiff(diff), d:lvl);
}

function str AISet_GetMonsterDiff(int i){
	switch(i){
		case 0: return "E"; break;
		case 1: return "M"; break;
		case 2: return "H"; break;
		case 3: return "B"; break;
		default: 
			log(s:"AISET: Difficulty Index error. Easy set selected.");
	}
	return "N";
}

function str AISet_GetMonsterDiff_Name(int i){
	switch(i){
		case 0: return "Easy"; break;
		case 1: return "Medium"; break;
		case 2: return "Hard"; break;
		case 3: return "Boss"; break;
	}
	return "Not defined";
}
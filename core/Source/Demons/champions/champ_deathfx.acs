
Script "SFPlus_ChampionDeath" (void){
	if(CheckInventory("Champ_Type") >= 1){
		
		int x = GetActorX(0);
		int y = GetActorY(0);
		int z = GetActorFloorZ(0);
		int angle = GetActorAngle(0);
		int tid = ActivatorTID();
		
		if(CheckInventory("ChampZombie_SkipDeathScript")){
			int dice = random(0,99);
			int lives = CheckInventory("ChampZombie_LivesLeft");
			//log(d:Tid);
			//log(s:"ChampZombie death again, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
			if(dice < 35*lives){
				ACS_NamedExecuteAlways("SFPlus_ChampZombie_Raise", 0);
			}
			else {
				//log(s:"ChampZombie raise again failed, deleting, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
				GiveInventory("ChampZombie_ReallyDead", 1);
				delay(35);
				SpawnForced("splatEmitter_Lite", x, y, z, 0, 0);
				SpawnForced("splatEmitter_Lite", x, y, z, 0, 0);
				SpawnForced("splatEmitter_Lite", x, y, z, 0, 0);
				Thing_Remove(0);
			}
			terminate;
		}
		if(Champ_IsType(CHAMP_EXPLOSIVE) || Champ_IsType(CHAMP_PRIDEFUL)){ // In matter of a second, explodes!
			delay(5);
			SpawnForced("ChampExplosive_Kaboom", x, y, z, 0,  angle);
			SpawnForced("ChampExplosive_Kaboom", x, y, z + getActorProperty(0, APROP_HEIGHT), 0,  angle);
		}
		if(Champ_IsType(CHAMP_GOLDEN) || Champ_IsType(CHAMP_PRIDEFUL)){ // Spawn some extra money on death!
			SpawnForced("ChampGolden_MoneySplash", x, y, z, 0, angle);
			//SpawnForced("BigGem", x, y, z, 0, angle);
		}
		if(Champ_IsType(CHAMP_ZOMBIE) || Champ_IsType(CHAMP_PRIDEFUL)){ // It does'nt care if it's dead, it will come back. 
			//log(s:"ChampZombie death");
			//log(d:Tid);
			GiveInventory("ChampZombie_SkipDeathScript", 1);
			ACS_NamedExecuteAlways("SFPlus_ChampZombie_Raise", 0);
		}
		if(Champ_IsType(CHAMP_SPLIT)){ // Spawns 2 copies of the same monster!
			int who = GetActorClass(0);
			int r = GetActorProperty(0, APROP_RADIUS) + 5.0;
			int temptid = UniqueTID();
			delay(15);
			Spawn("TeleportFog", x+FixedMul(r, (cos(angle + 0.25))), y+FixedMul(r, (sin(angle + 0.25))), z, temptid, angle >> 8);
			Spawn("TeleportFog", x+FixedMul(r, (cos(angle + 0.75))), y+FixedMul(r, (sin(angle + 0.75))), z, temptid, angle >> 8);
			SpawnForced(who, x+FixedMul(r, (cos(angle + 0.25))), y+FixedMul(r, (sin(angle + 0.25))), z, temptid, angle >> 8);
			SpawnForced(who, x+FixedMul(r, (cos(angle + 0.75))), y+FixedMul(r, (sin(angle + 0.75))), z, temptid, angle >> 8);
			GiveActorInventory(temptid, "ChampSplit_SkipSpawnScript", 1); 
			// Splited enemies are not champions, and not hp recalculated.
			int splittedHealth = FixedMul(CheckInventory("Monster_MaxHealth")<<16, 0.5)>>16;
			// The max health of the dead monster, will be split in 2 (50% each monster.)
			Thing_Remove(0); // Remove the splitter monster.
			SetActorProperty(temptid, APROP_Health, splittedHealth);
			Thing_ChangeTID(temptid, tid);
			// Give it back the TID of the dead monster, 
		}
	}
}

Script "SFPlus_ChampZombie_Raise" (void){
	//log(s:"ChampionZombie is trying to raise up randomly, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
	int random_delay = random(35*2, 35*5);
	int counter = 0;
	int old_tid = ActivatorTid();
	int uni_tid = UniqueTID();
	Thing_ChangeTID(0, uni_tid);
	while(counter < random_delay && !CheckInventory("ChampZombie_ReallyDead") && GetActorProperty(uni_tid, APROP_HEALTH) <= 0){
		// Check if i am resurrected by an archvile.
		delay(1);
		counter ++;
	}
	if(GetActorProperty(uni_tid, APROP_HEALTH) > 0){
		
		TakeInventory("ChampZombie_LivesLeft", 1);
		//log(s:"ChampionZombie rised again by an archvile, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
		SetActorProperty(uni_tid, APROP_Health, CheckInventory("Monster_MaxHealth"));
		delay(5);
		//thing_hate(uni_tid, g_Status + 100, 4);
		ACS_NamedExecuteAlways("SFPlus_MonsterTarget", 0);
		Thing_ChangeTID(uni_tid, old_tid);
		terminate;
	}
	if(CheckInventory("ChampZombie_ReallyDead") || (CheckInventory("ChampZombie_LivesLeft") == 0)){
		//log(s:"ChampionZombie is dead, really dead, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
		terminate;
	}
	//log(s:"ChampionZombie is trying to raise up forcefully, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
	while(GetActorProperty(uni_tid, APROP_HEALTH) <= 0 && !CheckInventory("ChampZombie_ReallyDead")){
		// Now, Try raising.
		delay(1);
		if(CheckInventory("ChampZombie_LivesLeft")) Thing_Raise(uni_tid, 1);
		else{
			//log(s:"ChampionZombie is being blocked, cannot rise, it's dead.");
			int x = GetActorX(uni_tid);
			int y = GetActorY(uni_tid);
			int z = GetActorFloorZ(uni_tid);
			SpawnForced("splatEmitter_Lite", x, y, z, 0, 0);
			SpawnForced("splatEmitter_Lite", x, y, z, 0, 0);
			SpawnForced("splatEmitter_Lite", x, y, z, 0, 0);
			terminate;
		}
		// Even if checked already, check again if the actor is not deleted of the game yet. if deleted this var must be 0.
	}
	TakeInventory("ChampZombie_LivesLeft", 1);
	//log(s:"ChampionZombie rised again, Lives:", d:CheckInventory("ChampZombie_LivesLeft"));
	SetActorProperty(uni_tid, APROP_Health, CheckInventory("Monster_MaxHealth"));
	delay(35);
	thing_hate(uni_tid, g_Status + 100, 4);
	Thing_ChangeTID(uni_tid, old_tid);
}
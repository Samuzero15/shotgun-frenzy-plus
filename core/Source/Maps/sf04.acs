///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// SF04_ACS
// map script
#library "sf04"

// top priority
#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fl_techs.acs"
#import "f_AIDRL.acs"

#import "fp_sf.acs" // Modulize that crap!

#include "zcommon.acs"

int activateTurrets=0;

script 88 OPEN
{
	SFPlus_DefaultVars();
	// game settings
	f_AllowNuke =   0;
	f_AISkillMultiplier = 8;
	f_Cacodemons = 1;

	delay(35 * 10);
	activateTurrets = 1;
}

script 90 (void)
{
    int ticker;
    while(ticker < PlayerCount() + 5)
    {
        spawnspot("Annihilator", 115, 118, 0);
        spawnspot("sfArchVile", 116, 118, 0);
        //spawnspot("CyberBaron", 117, 118, 0);
        spawnspot("CyberBaron", 199, 118, 0);
        ticker++;
        thing_hate(118, 104, 0);
        thing_hate(110, 104, 0);
        thing_hate(111, 104, 0);
        thing_hate(112, 104, 0);
        thing_hate(113, 104, 0);
        thing_hate(114, 104, 0);
        delay(35 * 10);
    }
    ticker = 0;
    ACS_NamedExecute("SFPlus_GuardianWaveChecker", 0, 8);
}

script 92 (void)
{
    spawnspot("InfernoDemon", 5, 55, 0);
    
    delay(35);
    while(thingcount(0, 55) > 0 || thingcount(0, 110) > 0 || thingcount(0, 111) > 0 || thingcount(0, 112) > 0 || thingcount(0, 113) > 0 || thingcount(0, 114) > 0)
    {
        thing_hate(54, 104, 4);
        thing_hate(110, 104, 4);
        thing_hate(111, 104, 4);
        thing_hate(112, 104, 4);
        thing_hate(113, 104, 4);
        thing_hate(114, 104, 4);
        delay(35);
    }
    delay(35 * 6);
    
    // double check
    while(thingcount(0, 55) > 0 || thingcount(0, 110) > 0 || thingcount(0, 111) > 0 || thingcount(0, 112) > 0 || thingcount(0, 113) > 0 || thingcount(0, 114) > 0)
    {
        thing_hate(54, 104, 4);
        thing_hate(110, 104, 4);
        thing_hate(111, 104, 4);
        thing_hate(112, 104, 4);
        thing_hate(113, 104, 4);
        thing_hate(114, 104, 4);
        delay(35);
    }
    delay(35 * 6);
    // end
    acs_execute(125, 0, 2, 0, 0);	// victory
}

script 91 (void)
{
    thing_changetid(0, 55);
}

// stationary turret use
int p_MapTurret_Return[32];
int f_MapTurret_OnUse[99];

function void SF04_UseMapTurret(int returnpoint){
	p_MapTurret_Return[playernumber()] = returnpoint;
	f_MapTurret_OnUse[returnpoint] = 1;
}

function void SF04_FreeMapTurret(void){
	f_MapTurret_OnUse[p_MapTurret_Return[playernumber()]] = 0;
	p_MapTurret_Return[playernumber()] = 0;
}

script 55 Death
{
    if (activateTurrets == 1) {
	  if (p_MapTurret_Return[playernumber()] > 0)
  	  {
		SF04_FreeMapTurret();
  	  }
   }
}

script 95 (void)
{
    //if (p_StarionaryTurret_Status[playernumber()] > 0)
	if(p_MapTurret_Return[playernumber()] > 0)
    {
        takeinventory("BoomerCannon", 1);
		takeinventory("Boomer_Resister", 1);
        takeinventory("IAmUsingATurretTower", 1);
		teleport(p_MapTurret_Return[playernumber()]);
        SetPlayerProperty(0, 0, PROP_FROZEN);
		
		SF04_FreeMapTurret();
    }
}

script 61 (int l_TurretSpawn, int l_TurretReturn)
{
    if (f_MapTurret_OnUse[l_TurretReturn] > 0)
	{
        setfont("SMALLFNT");
        print(s:"Already in use...");
        terminate;
    }
	
	SF04_UseMapTurret(l_TurretReturn);
	
	teleport(l_TurretSpawn);
    SetPlayerProperty(0, 1, PROP_FROZEN);
    giveinventory("IAmUsingATurretTower", 1);
    giveinventory("BoomerCannon", 1);
    
	while(p_MapTurret_Return[playernumber()] == l_TurretReturn)
	{
        if (!getactorproperty(0, APROP_Health) > 0)
        {
            acs_execute(95, 0, 0, 0, 0);
        }
        
        giveinventory("Boomer_Resister", 1);
        
        setweapon("BoomerCannon");
        delay(5);
    }
	SF04_FreeMapTurret();
}

// turret tower
script 1 (void)
{
    spawnspot("TurretPlasma", 1, 2, 0);
    door_open(1, 3);
    while(ThingCount(0, 2) > 0)     delay(35);
    door_close(1, 3);
    
    delay(35 * 5);
}

// map setup
script 2 OPEN
{
    // spawn dispensers
    spawnspot("AmmoDispenser", 2, 0, 0);
    spawnspot("HealthDispenser", 3, 0, 0);
    spawnspot("TurretRocket", 6, 0, 0);
}

// crusher
script 3 (void)
{
    ceiling_lowerandcrush(15, 100, 2);
    delay(35);
    spawnspot("seekerRocket_ForCrusher", 20, 0, 0);
    delay(35 * 2);
    spawnspot("seekerRocket_ForCrusher", 20, 0, 0);
    delay(35 * 2);
    spawnspot("seekerRocket_ForCrusher", 20, 0, 0);
    delay(35 * 2);
    spawnspot("seekerRocket_ForCrusher", 20, 0, 0);
    delay(35 * 2);
    spawnspot("seekerRocket_ForCrusher", 20, 0, 0);
    delay(35 * 2);
    spawnspot("seekerRocket_ForCrusher", 20, 0, 0);
    delay(35 * 2);
    
    door_open(15, 100);
    
    setfont("INFO");
    f_TipShow("DEMONT", "DEMON OVEN", "0 Percent...", 0);
    delay(35 * 15);
    f_TipShow("DEMONT", "DEMON OVEN", "20 Percent...", 0);
    delay(35 * 15);
    f_TipShow("DEMONT", "DEMON OVEN", "50 Percent...", 0);
    delay(35 * 15);
    f_TipShow("DEMONT", "DEMON OVEN", "80 Percent...", 0);
    delay(35 * 15);
    f_TipShow("DEMONT", "DEMON OVEN", "90 Percent...", 0);
    delay(35 * 15);
    f_TipShow("DEMONT", "DEMON OVEN", "Complete!", 0);
    //delay(35 * 10);
}

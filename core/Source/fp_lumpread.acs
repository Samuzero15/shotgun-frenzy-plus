
///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fl_lumpread.acs
// The library for lump-reading, 
// a new thing for Zandronum 3.2 that ease us the addon creation for mods, like this one!
// TDRR, you absolute madlad.

#library "fp_lumpread"
#include "zcommon.acs"
#include "acsutils.acs"
#import "fl_WDir.acs"

#libdefine LUMPR_VALUE_NULL     0
#libdefine LUMPR_VALUE_INT      1
#libdefine LUMPR_VALUE_FIXED    2
#libdefine LUMPR_VALUE_STR      3
#libdefine LUMPR_VALUE_BOOL     4
#libdefine LUMPR_VALUE_LANGSTR  5

function bool LumpRead_ParseBool (str string){
    bool res = false;
    if(StrIEquals(string, "true") || StrIEquals(string, "1")) res = true;
    else if (StrIEquals(string, "false") || StrIEquals(string, "0")) res = false;
    return res;
}

function int LumpRead_ParseValue (str string_value, int value_type){
    int value = -1;
    switch(value_type){
        case LUMPR_VALUE_INT: value = atoi(string_value); break;
        case LUMPR_VALUE_FIXED: value = atof(string_value); break;
        case LUMPR_VALUE_STR: value = StrReplace(string_value, "\\n", strparam(c:'\n')); break;
        case LUMPR_VALUE_BOOL: value = LumpRead_ParseBool(string_value); break;
        case LUMPR_VALUE_LANGSTR: value = StrReplace(strparam(l:string_value), "\\n", strparam(c:'\n')); break;
        default:
            //log(s:"command: ", d:tokenid);
    }
    return value;
}

int res1, res2;

Script "LumpRead_LoadFile" (int lumpfile, int lineread_script){
// For some reason i don't really friggin explain, why does this crashes in the 32bit version!? 
//function void LumpRead_LoadFile(str lumpfile, int lineread_script){
    //Grab all your lumps and read them all.
	int lump = -1;
	while (true){
		lump = LumpOpen(lumpfile, lump);
        //Log(s:"LumpOpen: ", d:lump, s:".");
		if(lump == -1) {
            break;
        }
        //Log(s:"Next ", s:lumpfile, s:" lump was found at index ", d:lump, s:".");
        str file_text = LumpReadString(lump, 0);
        ACS_NamedExecuteWithResult("LumpRead_ReadFile", file_text, lineread_script);
        
        //Log(s:"Finished processing ", s:lumpfile, s:" lump. Index: ", d:lump, s:".");
        LumpClose(lump);
	}
}

Script "LumpRead_ReadFile" (int file_text, int lineread_script){
    //Now let's read this file, comments with '//' or in '/**/' will be skipped.
    //str file_text = LumpReadString(lump, 0);
    //log(s:file_text);
    int tex_len = StrLen(file_text);
    int next_newline = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "\n", 0);
    next_newline = next_newline != -1 ? next_newline : tex_len;
    int next_comment_multiline[2] = {-1, -1};
    next_comment_multiline[0] = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "/*", 0);
    next_comment_multiline[1] = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "*/", 0);
    if(next_comment_multiline[1] == -1) next_comment_multiline[1] = tex_len;
    int pos = 0;
    int delayer = 0;
    do{
        if(next_comment_multiline[0] != -1 && pos >= next_comment_multiline[0]){
            if (pos >= next_comment_multiline[1]){
                next_comment_multiline[0] = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "/*", pos);
                next_comment_multiline[1] = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "*/", pos);
                if(next_comment_multiline[1] == -1) next_comment_multiline[1] = tex_len;
            }else{
                pos = next_comment_multiline[1]+2;
                next_newline = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "\n", pos);
                if(pos == tex_len) break;
            }
        }
        str line = StrSlice(file_text, pos, next_newline);
        ACS_NamedExecuteWithResult("LumpRead_ReadLine", line, lineread_script);
        pos = next_newline+1;
        next_newline = ACS_NamedExecuteWithResult("LumpRead_FindText", file_text, "\n", pos);
        next_newline = next_newline != -1 ? next_newline : tex_len;
        delayer ++;
        if(!(delayer % 200)) delay(1);			
    }while(pos-1 != tex_len);
}

Script "LumpRead_FindText" (int file_text, int char, int pos){
    // It's own script just to evade runaway errors. Because this function will be resource intensive.
    SetResultValue(StrFindFrom(file_text, char, pos));
}

Script "LumpRead_ReadLine" (int line, int lineread_script){
    // Each parsed line, removing comments and CR's. And then, execute the lineread_script
    int next_comment;
    int next_comment1;
    int next_comment2;
    int line_size;

    next_comment = -1;
    next_comment1 = StrFindFrom(line, "//", 0);
    next_comment2 = StrFindFrom(line, "/*", 0);
    if(next_comment1 != -1 && next_comment2 != -1) next_comment = min(next_comment1, next_comment2);
    else if(next_comment1 == -1 && next_comment2 != -1) next_comment = next_comment2;
    else if(next_comment2 == -1 && next_comment1 != -1) next_comment = next_comment1;
    line = StrRemoveCR(line); 
    if (StrLen(line) == 0) Terminate;
    line_size = StrLen(line);
    line = StrSlice(line, 0, line_size - (line_size - next_comment)*(next_comment != -1));
    if (StrLen(line) == 0) Terminate;
    line_size = StrLen(line);
    //log(s:"Pos= (", d:pos, s:"), line=(", s:line, s:")");
    //log(s:line, s:" => Pos = ", d:pos, s:", next_newline = ", d:next_newline, s:", next_comment = ", d:next_comment, s:", line_size = ", d:line_size);
    if(line_size != 0){
        res1 = 0; res2 = 0;
        ACS_NamedExecuteWithResult(lineread_script, line);
    }
}

function void LumpRead_StrNextArg(str line){
	int nextcoma = StrFindFrom(line, ",", res2);
	if(nextcoma == -1) nextcoma = strlen(line);
	res1 = StrSlice(line, res2, nextcoma);
	res1 = StrRemoveCR(res1);
    res1 = StrTrim(res1);
    res1 = StrRemove(res1, "\"");
	res2 = nextcoma+1;
}

function str StrTrim(str string){
    int len = StrLen(string);
    str newstring;
    int i;
    int leftchar;
    int rightchar;
    for(i = 0; i < len; i++){
        if(GetChar(string, i) != ' '){
            leftchar = i;
            break;
        }
    }
    newstring = StrSlice(string, leftchar, len);
    len = StrLen(newstring);
    for(i = len-1; i >= 0; i--){
        if(GetChar(newstring, i) != ' '){
            rightchar = i;
            break;
        }
    }
    newstring = StrSlice(newstring, 0, rightchar+1);
    return newstring;
}

function int StrCharCount(str string, int check){
    int len = StrLen(string);
    int res = 0;
    for(int i = 0; i < len; i++){
        if(GetChar(string, i) == check){
            res++;
        }
    }
    return res;
}

function str StrRemoveCR(str string){
	return GetChar(string, StrLen(string)-1) == 13 ? StrSlice(string, 0, StrLen(string)-1) : string;
}
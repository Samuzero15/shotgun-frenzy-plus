///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// fc_DemonicLab.acs
// structure scripts
#library "fc_DLab"

#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fc_Const.acs"
#import "fc_CommB.acs"
#import "fl_techs.acs"
#import "fp_ptdir.acs"

#include "zcommon.acs"
#include "acsutils.acs"
#include "samu_tools.acs"
// build
script 400 (void)
{
	SetActivator(0); //Preventing a major disaster
    // construction
    c_Construct (201, 176, 128, 128, "RROCK03", "FLOOR7_2", "");
    c_Construct (202, 192, 128, 128, "RROCK03", "FLOOR7_2", "");
    c_Construct (203, 201, 132, 128, "GRND", "FLOOR7_2", "");
    c_Construct (204, 224, 128, 128, "FLOOR4_8", "FLOOR7_2", "");
    c_Construct (205, 176, 24, 256, "GRND", "CEIL5_2", "");
    c_Construct (206, 144, 24, 360, "GRND", "CEIL5_2", "");
    c_Construct (207, 224, 24, 264, "FLOOR4_8", "SHAWN2", "");
    c_Construct (208, 255, 16, 136, "GRND", "CEIL5_1", "");
    c_Construct (209, 224, 8, 72, "GRND", "CEIL5_2", "");
    c_Construct (210, 208, 128, 136, "CEIL5_1", "CEIL5_1", "");
    c_Construct (211, 176, 128, 136, "CEIL5_1", "CEIL5_1", "");
    c_Construct (212, 208, 128, 72, "CEIL5_1", "CEIL5_2", "");
    c_Construct (213, 255, 384, 0, "CEIL5_2", "", "");
    c_Construct (214, 255, 128, 128, "CEIL5_2", "CEIL5_2", "");
    c_Construct (215, 255, 144, 160, "CEIL5_2", "CEIL5_2", "");
    
    // summon turrets
    spawnspot("TurretBase", 154, 0, 0);
    
    // set techflag
	Tech_Set(TECH_MARCOM, TECHF_DONE);
    
    // constructed message
    //f_TipShow ("BUTTON", "Marine Command", "Construction Complete!", 1);
    
    // check bridge
    delay(35 * 2);
    if (Tech_isDone(TECH_MARCOM) && Tech_isDone(TECH_MECHFA) &&
		c_BridgeStatus_4 == 0 && f_Gametype != 5)
    {
        c_BridgeStatus_4 = 1;
        floor_raisetonearest(343, 125);
    }
    
    // morph
    //f_TipShow ("BUTTON", "Marine Core", "Attack functions now online...", 1);
    //morphactor(104, "", "AttackBattery", 99999999999);
}

#define FP_MCOM_CPULSE_CRIPPLE	"SFPLus_CripplePulse"
#define FP_MCOM_CPULSE_HEAL		"SFPLus_HealPulse"
#define FP_MCOM_CPULSE_SMITE	"SFPLus_SmitePulse"
#define FP_MCOM_CPULSE_REVIVE	"SFPLus_RevivePulse"
#define FP_MCOM_CPULSE_HALT		"SFPLus_HaltPulse"

script "SFPlus_CoreRecharge" (int delay_time){	
	int slot = Notify_QueueFreeSpace();
	ACS_NamedExecuteAlways("SFPlus_ProgressScript",0, FP_PTID_CPULSE, delay_time, slot);
	do{ delay(1); }while (p_TipProcess[slot]); // Wait for it.
	
	Tech_Set(TECH_MARCOM_CPULSE, TECHF_DONE);
}

script "SFPlus_CorePulse" (int pulse_cmd)
{	// A Generalized script for all of the core pulses.
	if(Tech_isLock(TECH_MARCOM_CPULSE)){
		Notify_Message("Core pulse failed",
		"The core pulse is still charging!", "INFO", 3);
		terminate;
	}
	SetActivator(0); //Preventing a major disaster
    ambientsound("cv/corepulse", 125);
    
    // disable use of core weapons
	Tech_SetDone(TECH_MARCOM_CPULSE, TECHF_LOCK);
	
	str pulse_name;
	int execute;
	int charge_delay;
	switch(pulse_cmd){
		case 1: // Harms all demons with 500 dmg.
			pulse_name = "CRIPPLE"; 
			execute = FP_MCOM_CPULSE_CRIPPLE; 
			charge_delay = 20; 
		break;
		case 2: // Repairs the living cores gradually for 10 seconds.
			pulse_name = "HEAL"; 
			execute = FP_MCOM_CPULSE_HEAL; 
			charge_delay = 15; 
		break;
		case 3: // Harms all demons within the risked sector with 3000 dmg.
			pulse_name = "SMITE"; 
			execute = FP_MCOM_CPULSE_SMITE; 
			charge_delay = 30; 
		break;
		case 4: // Instantly repairs the risked core.
			pulse_name = "REVIVE"; 
			execute = FP_MCOM_CPULSE_REVIVE; 
			charge_delay = 30; 
		break;
		case 5: // Stops monster spawning for a minute.
			pulse_name = "HALT"; 
			execute = FP_MCOM_CPULSE_HALT; 
			charge_delay = 25; 
		break;
	}
	
	Notify_Message(strparam(s:pulse_name, s:" PULSE ACTIVATED"),
		"Activating in 5 seconds...", "INFO", 2);
    delay(35 * 5);
	acs_execute(126, 0, 1, 0, 0);
    ambientsound("x1/taser", 125);
	//Effects
	
	acs_NamedExecuteWait(execute, 0);
	
	delay(35 * 2);
    //f_TipShow ("BUTTON", "", "", 19);
	ACS_NamedExecuteAlways("SFPlus_CoreRecharge",0, charge_delay);
}

// core pulse: Cripple
// Harms all demons with 500 of damage.
script FP_MCOM_CPULSE_CRIPPLE (void)
{
	giveActorInventory(110, "FPMToken_NoCount", 1);
	giveActorInventory(111, "FPMToken_NoCount", 1);
	giveActorInventory(112, "FPMToken_NoCount", 1);
	giveActorInventory(113, "FPMToken_NoCount", 1);
	giveActorInventory(114, "FPMToken_NoCount", 1);
	// Temporaly disable the credit earning of these monsters.
	delay(2);
	thing_damage(110, 500, "NoCount");
	thing_damage(111, 500, "NoCount");
	thing_damage(112, 500, "NoCount");
	thing_damage(113, 500, "NoCount");
	thing_damage(114, 500, "NoCount");
	delay(2);
	// Re-activate the credit earning.
	takeActorInventory(110, "FPMToken_NoCount", 1);
	takeActorInventory(111, "FPMToken_NoCount", 1);
	takeActorInventory(112, "FPMToken_NoCount", 1);
	takeActorInventory(113, "FPMToken_NoCount", 1);
	takeActorInventory(114, "FPMToken_NoCount", 1);
}

// core pulse: Smite (NEW!)
// Harms any demon inside of the risked sector with 3000 hp.
script FP_MCOM_CPULSE_SMITE (void)
{
	giveActorInventory(114, "FPMToken_NoCount", 1);
	// Temporaly disable the credit earning of these monsters.
	delay(2);
	thing_damage(110 + g_Status, 3000,  "NoCount");
	delay(2);
	// Re-activate the credit earning.
	takeActorInventory(110, "FPMToken_NoCount", 1);
}

// halt pulse
// Halts the demon spawning
script FP_MCOM_CPULSE_HALT (void)
{
	c_HaltSpawning = 1;

	ProgTip_DefaultProps(-1);
	ProgTip_SetMsg		(-1, "HALT PULSE");
	ProgTip_SetEndMsg1	(-1, "HALT PULSE EXPIRED!");
	ProgTip_SetEndMsg2	(-1, "Hostiles are spawning again!");

	int slot = Notify_QueueFreeSpace();
	ACS_NamedExecuteAlways("SFPlus_TimerScript",0, -1, 60, slot);
	do{ delay(1); }while (p_TipProcess[slot]); // Wait for it.

	// reactivate demons
	c_HaltSpawning = 0;
}

// heal pulse
script FP_MCOM_CPULSE_HEAL (int pslot)
{
	ProgTip_DefaultProps(-1);
	ProgTip_SetMsg		(-1, "HEAL PULSE");
	ProgTip_SetEndMsg1	(-1, "HEAL PULSE EXPIRED!");
	ProgTip_SetEndMsg2	(-1, "Cores will no longer repair themselves!");

	int heal_time = 0;
	int hp, maxhp, hp_gain, hp_cap;
	int slot = Notify_QueueFreeSpace();
	ACS_NamedExecuteAlways("SFPlus_TimerScript",0, -1, 10, slot);
	do{ 
		// Yes, you can do stuff while you wait for the script!
		if(heal_time % 5 == 0){ // Each 5 tics
			for(int i = 1; i <= 4; i++){
				int tid = 100 + i;
				if(GetActorProperty(tid, APROP_Health) > 0){// Check if this core is still standing.
					hp = GetActorProperty(tid, APROP_Health);
					
					// Check which core is it, the base one will always be the strongest.
					if(i == 4) 	maxhp = 1500;
					else 		maxhp = 750;
					
					// Cap hp per 5 tics.
					hp_cap = 10;
					if(maxhp - hp < hp_cap) hp_gain = maxhp - hp;
					else 					hp_gain = hp_cap;
					// Finally heal it.
					setactorproperty(tid, APROP_Health, hp + hp_gain);
					// Fun fact: using just hp_gain, will kill the cores instantly in full hp!
				}
			}
			
		}
		heal_time++;
		delay(1);
	}while (p_TipProcess[slot]); // Wait for it.
}

// core revive
script FP_MCOM_CPULSE_REVIVE (void)
{
	if (100 + g_Status != 104)       setactorproperty(100 + g_Status, APROP_Health, 750);
	else                             setactorproperty(100 + g_Status, APROP_Health, 1500);
}
///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// fc_NuclearSilo.acs
// structure scripts
#library "fc_NSilo"

#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fl_price.acs"
#import "fc_Const.acs"
#import "fc_CommB.acs"
#import "f_AIDir.acs"
#import "fl_techs.acs"

#include "zcommon.acs"
#include "samu_tools.acs"

// build
script 450 (void)
{
	SetActivator(0); //Preventing a major disaster
    // construction
    c_Construct (305, 240, 32, 0, "TEKWALL1", "", "");
    c_Construct (306, 240, 160, 0, "TEKWALL1", "", "");
    
    // lower nuke
    floor_lowerbyvalue		(307, c_ConstructSpeed, 1024);
		
    
    // set techflag
	Tech_Set(TECH_NUKESY, TECHF_DONE);
    
    // constructed message
    //f_TipShow ("BUTTON", "Nuclear Silo", "Construction Complete!", 1);
    
    delay(35 * 2);
    
    // spawn nuke
    spawnspot("Nuke", 137, 135, 0);
}

script 451 (void)
{
	SetActivator(0); //Preventing a major disaster
    // start the nuclear launch

    if(g_GuardianState >= INTDB_GUARDIANSTATE_ATTACK) {
        f_TipShow ("CM75", "NUCLEAR LAUNCH", "The guardians are here \nwe can't use the nuclear silo!", 0);
        terminate;
    }

    c_NukeLaunched = 1;
    acs_execute(89, 0, 0, 0, 0);
    acs_terminate(129, 0);// Kill the timer script.
    ACS_NamedTerminate("SFPlus_SecManMainLoop", 0);
    
    // Screw final battle timer, now we make our own.
    acs_terminate(107, 0);

    acs_terminate(120, 0);
    acs_terminate(100, 0);
    acs_terminate(102, 0);
    acs_terminate(103, 0);
    acs_terminate(108, 0);
    
    // open all sectors
    g_Status = 4;
    thing_remove(101);
    thing_remove(102);
    thing_remove(103);
    
    // open doors/gates
    if (f_Doortype == 0)
    {
        door_open(101, f_Doorspeed);
        door_open(102, f_Doorspeed);
        door_open(103, f_Doorspeed);
        door_open(104, f_Doorspeed);
    }
    else
    {
        floor_lowertonearest(101, f_Doorspeed);
        floor_lowertonearest(102, f_Doorspeed);
        floor_lowertonearest(103, f_Doorspeed);
        floor_lowertonearest(104, f_Doorspeed);
    }
    
    // raise nuke sprite
    floor_raisebyvalue		(307, 1, 1024);
    f_TipShow ("CM75", "NUCLEAR LAUNCH Initiated!", "5 Minutes remaining...", 0);
    AnnouncerSound("combat/prepareyourself", 0);
    setfont("DBIGFONT");
    hudmessageBold(s:"Nuclear Launch Program Initiated!"; 2, 0, cr_white, 400.0, 200.0, 5.0);
	delay(35 * 3);

    ACS_NamedExecute("SFPlus_NukeTimer", 0);
}

Script "SFPlus_NukeTimer" (void) {
    SetCvarString("sfp_scordata_status", "Launching Nuke");
    g_GameTimer = 35 * 5;
    int remainingSeconds = g_GameTimer / 35;
    while(g_GameTimer > 0){ // [Samu] Here it is the game timer.
        if((g_GameTimer) % 35 == 0){
            SetCvar("sfp_scordata_timemin", ((g_GameTimer) / (35*60))%60);
            SetCvar("sfp_scordata_timesec", ((g_GameTimer) / 35)%60);
            //log(s:"Remaining seconds: ", d:g_GameTimer / 35);
            remainingSeconds = g_GameTimer / 35;

            if(remainingSeconds == 10 || remainingSeconds == 30 || remainingSeconds == 60 || remainingSeconds == 120 || remainingSeconds == 300 || remainingSeconds == 600){
                ACS_NamedExecute("SFPlus_Announcer_SayTime", 0, "time/Mission/NukeLaunchIn", remainingSeconds, 1);
            }else if (remainingSeconds <= 5){
                AnnouncerSound(strparam(s:"count/", d:remainingSeconds, s:"!"), 0);
            }

            switch(remainingSeconds) {
                case 300:
                    f_TipShow ("CM75", "NUCLEAR LAUNCH", "5 Minutes remaining...", 0);
                    break;
                case 240:
                    f_TipShow ("CM75", "NUCLEAR LAUNCH", "4 Minutes remaining...", 0);
                    break;
                case 180:
                    f_TipShow ("CM75", "NUCLEAR LAUNCH", "3 Minutes remaining...", 0);
                    break;
                case 120:
                    f_TipShow ("CM75", "NUCLEAR LAUNCH", "2 Minutes remaining...", 0);
                    break;
                case 60: case 30: case 10:
                    f_TipShow ("CM75", "NUCLEAR LAUNCH", StrParam(d:remainingSeconds, s:" Seconds remaining..."), 0);
                    break;
                case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2: case 1:
                    f_TipShow ("CM75", "NUCLEAR LAUNCH", StrParam(d:remainingSeconds, s:"..."), 0);
                    ambientsound("TIME", 125);
                    break;
            }
        }
        delay(1);
        g_GameTimer--;
    }
    f_TipShow ("CM75", "NUCLEAR LAUNCH", "Blasting off!", 0);
    AnnouncerSound("command/blastoff", 0);
    SetCvarString("sfp_scordata_status", "Nuke Launched!");

    // gather score before game end
    g_SkillScore = f_AIDir_Check();
    
    // launch missile
    int thrustamount;
    AmbientSound("c/airstrike1", 128);
    while(thrustamount < 130)
    {
        radius_quake(8, 20, 0, 10, 0);
        thrustthingz(135, 8, 0, 1);
        thrustamount ++;
        delay(1);
    }
    thing_remove(135);
    AmbientSound("c/airstrike2", 128);
    delay(35 * 2);
    
    // explosion
    acs_execute(452, 0, 0, 0, 0);
}
    
script 452 (void){
    acs_executealways(126, 0, 2, 0, 0);
    acs_terminate(89, 0);
    acs_terminate(120, 0);
    acs_terminate(100, 0);
    acs_terminate(102, 0);
    acs_terminate(103, 0);
    thing_destroy(24, 1);
	thing_destroy(118, 1);
    thing_destroy(110, 1);
    thing_destroy(111, 1);
    thing_destroy(112, 1);
    thing_destroy(113, 1);
    thing_destroy(114, 1);
	
	//[Samu] One strong explosion worths more than many weak ones.
    spawnspot("NuclearExplosion", 136, 0, 0);
    
    delay(35 * 5);
    // endgame
    acs_execute(125, 0, 1, 0, 0);
    
}

///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_comcmd.acs
// All the data structure about the commander buttons are here.

#library "fp_comcmd"

#import "f_intdb.acs"
#import "fl_techs.acs"
#import "fc_CommB.acs"
#import "fc_AStr.acs"
#import "fp_cmdevt.acs"
#include "zcommon.acs"
#include "samu_tools.acs"

//Auto enumerating with ACS!
// The first constant will always be 0
// The next one will add 1 to the past constant
// Then the next one will add 1 to the past constant and so on!
#libdefine FP_CB_EXIT 						0
#libdefine FP_CB_RETURN						FP_CB_EXIT+1
#libdefine FP_CB_BUILD  					FP_CB_RETURN+1
#libdefine FP_CB_BUILD_GENLAB				FP_CB_BUILD+1	
#libdefine FP_CB_BUILD_ARMORY				FP_CB_BUILD_GENLAB+1	
#libdefine FP_CB_BUILD_MECHFA 				FP_CB_BUILD_ARMORY+1
#libdefine FP_CB_BUILD_REFINE				FP_CB_BUILD_MECHFA+1
#libdefine FP_CB_BUILD_MARCOM				FP_CB_BUILD_REFINE+1
#libdefine FP_CB_BUILD_NUKESY				FP_CB_BUILD_MARCOM+1
#libdefine FP_CB_UPGRADE					FP_CB_BUILD_NUKESY+1
#libdefine FP_CB_UPGRADE_GENLAB				FP_CB_UPGRADE+1
#libdefine FP_CB_UPGRADE_GENLAB_HEALTH1		FP_CB_UPGRADE_GENLAB+1
#libdefine FP_CB_UPGRADE_GENLAB_HEALTH2		FP_CB_UPGRADE_GENLAB_HEALTH1+1
#libdefine FP_CB_UPGRADE_GENLAB_ARMOR		FP_CB_UPGRADE_GENLAB_HEALTH2+1
#libdefine FP_CB_UPGRADE_GENLAB_SPEEDB		FP_CB_UPGRADE_GENLAB_ARMOR+1
#libdefine FP_CB_UPGRADE_GENLAB_RESISB		FP_CB_UPGRADE_GENLAB_SPEEDB+1
#libdefine FP_CB_UPGRADE_GENLAB_REGENB		FP_CB_UPGRADE_GENLAB_RESISB+1
#libdefine FP_CB_UPGRADE_ARMORY				FP_CB_UPGRADE_GENLAB_REGENB+1
#libdefine FP_CB_UPGRADE_ARMORY_ARMS1		FP_CB_UPGRADE_ARMORY+1
#libdefine FP_CB_UPGRADE_ARMORY_ARMS2		FP_CB_UPGRADE_ARMORY_ARMS1+1
#libdefine FP_CB_UPGRADE_ARMORY_BOOMRN		FP_CB_UPGRADE_ARMORY_ARMS2+1
#libdefine FP_CB_UPGRADE_ARMORY_AMMOBP		FP_CB_UPGRADE_ARMORY_BOOMRN+1
#libdefine FP_CB_UPGRADE_ARMORY_STIMPK		FP_CB_UPGRADE_ARMORY_AMMOBP+1
#libdefine FP_CB_UPGRADE_REFINE				FP_CB_UPGRADE_ARMORY_STIMPK+1
#libdefine FP_CB_UPGRADE_REFINE_PUMP1		FP_CB_UPGRADE_REFINE+1
#libdefine FP_CB_UPGRADE_REFINE_PUMP2		FP_CB_UPGRADE_REFINE_PUMP1+1
#libdefine FP_CB_UPGRADE_MARCOM				FP_CB_UPGRADE_REFINE_PUMP2+1
#libdefine FP_CB_UPGRADE_MARCOM_AIRSUP		FP_CB_UPGRADE_MARCOM+1
#libdefine FP_CB_UPGRADE_MARCOM_ADVSYS		FP_CB_UPGRADE_MARCOM_AIRSUP+1
#libdefine FP_CB_UPGRADE_MARCOM_IONCAN		FP_CB_UPGRADE_MARCOM_ADVSYS+1
#libdefine FP_CB_UPGRADE_MARCOM_CPULSE		FP_CB_UPGRADE_MARCOM_IONCAN+1
#libdefine FP_CB_SUPPORT					FP_CB_UPGRADE_MARCOM_CPULSE+1
#libdefine FP_CB_SUPPORT_AIRSTK				FP_CB_SUPPORT+1
#libdefine FP_CB_SUPPORT_AIRSTK_POINT		FP_CB_SUPPORT_AIRSTK+1	
#libdefine FP_CB_SUPPORT_AIRSTK_LINE_1		FP_CB_SUPPORT_AIRSTK_POINT+1	
#libdefine FP_CB_SUPPORT_AIRSTK_LINE_2		FP_CB_SUPPORT_AIRSTK_LINE_1+1
#libdefine FP_CB_SUPPORT_AIRSTK_WAVES_1		FP_CB_SUPPORT_AIRSTK_LINE_2+1
#libdefine FP_CB_SUPPORT_AIRSTK_WAVES_3		FP_CB_SUPPORT_AIRSTK_WAVES_1+1
#libdefine FP_CB_SUPPORT_AIRSTK_WAVES_5		FP_CB_SUPPORT_AIRSTK_WAVES_3+1
#libdefine FP_CB_SUPPORT_AIRSTK_EXE			FP_CB_SUPPORT_AIRSTK_WAVES_5+1
#libdefine FP_CB_SUPPORT_AIRSTK_CLEAR		FP_CB_SUPPORT_AIRSTK_EXE+1
#libdefine FP_CB_SUPPORT_CPULSE				FP_CB_SUPPORT_AIRSTK_CLEAR+1
#libdefine FP_CB_SUPPORT_CPULSE_HEAL		FP_CB_SUPPORT_CPULSE+1
#libdefine FP_CB_SUPPORT_CPULSE_CRIPPLE		FP_CB_SUPPORT_CPULSE_HEAL+1
#libdefine FP_CB_SUPPORT_CPULSE_HALT		FP_CB_SUPPORT_CPULSE_CRIPPLE+1
#libdefine FP_CB_SUPPORT_MARK_ATTACK		FP_CB_SUPPORT_CPULSE_HALT+1
#libdefine FP_CB_SUPPORT_MARK_DEFEND		FP_CB_SUPPORT_MARK_ATTACK+1
#libdefine FP_CB_SUPPORT_MARK_DEPLOY		FP_CB_SUPPORT_MARK_DEFEND+1
#libdefine FP_CB_SUPPORT_MARK_REGROUP		FP_CB_SUPPORT_MARK_DEPLOY+1
#libdefine FP_CB_SUPPORT_MARK_CLEAR			FP_CB_SUPPORT_MARK_REGROUP+1
#libdefine FP_CB_SUPPORT_IONCAN				FP_CB_SUPPORT_MARK_CLEAR+1
#libdefine FP_CB_SUPPORT_DROPMONEY			FP_CB_SUPPORT_IONCAN+1
#libdefine FP_CB_DEPLOY						FP_CB_SUPPORT_DROPMONEY+1
#libdefine FP_CB_DEPLOY_MINEFIELD			FP_CB_DEPLOY+1
#libdefine FP_CB_DEPLOY_DISP_HEALTH			FP_CB_DEPLOY_MINEFIELD+1
#libdefine FP_CB_DEPLOY_DISP_AMMO			FP_CB_DEPLOY_DISP_HEALTH+1	
#libdefine FP_CB_DEPLOY_BARRIER				FP_CB_DEPLOY_DISP_AMMO+1	
#libdefine FP_CB_DEPLOY_TURRET				FP_CB_DEPLOY_BARRIER+1			
#libdefine FP_CB_DEPLOY_TURRET_BULLET		FP_CB_DEPLOY_TURRET+1
#libdefine FP_CB_DEPLOY_TURRET_ROCKET		FP_CB_DEPLOY_TURRET_BULLET+1	
#libdefine FP_CB_DEPLOY_TURRET_PLASMA		FP_CB_DEPLOY_TURRET_ROCKET+1	
#libdefine FP_CB_DEPLOY_TURRET_TESCOL		FP_CB_DEPLOY_TURRET_PLASMA+1
#libdefine FP_CB_DEPLOY_TURRET_FLAMER		FP_CB_DEPLOY_TURRET_TESCOL+1
#libdefine FP_CB_DEPLOY_TURRET_CHAINGUN		FP_CB_DEPLOY_TURRET_FLAMER+1
#libdefine FP_CB_DEPLOY_TURRET_SHOTGUN		FP_CB_DEPLOY_TURRET_CHAINGUN+1
#libdefine FP_CB_NUKE						FP_CB_DEPLOY_TURRET_SHOTGUN+1
#libdefine FP_CB_NUKE_IT_NOW				FP_CB_NUKE+1

#libdefine FP_COM_BUTTONS FP_CB_NUKE_IT_NOW+1// As the last one, add 1 to get numerated total of this!

int CmdBut_list[FP_COM_BUTTONS][9];
int CmdButStack = 0;

Script "SFPlus_InitCMDButtons" OPEN {
	SFPlus_DefineCMDButtons();
	CMDBut_UpdateConds();
}

function void SFPlus_DefineCMDButtons(void){
	str string;

	CMDBut_Add (FP_CB_EXIT, 	"Exit", 			  "CG01", "Eject from the commander's chair."); // 0
	CMDBut_Add (FP_CB_RETURN, 	"Return",			  "CG01", "To the last category."); // 1
	CMDBut_Add (FP_CB_BUILD, 	"Build Structure", 	  "CG02", "Expand your base by building an additional structure."); 
	CMDBut_Add (FP_CB_UPGRADE, "Research New Techs", "CG03", "Upgrade and research to powerup your allies."); 
	
	string = strparam(s:"Launch aerial strikes, mark objectives,\n activate core",
					  s:" pulses and fire \nthe ion cannon to support your allies.");
					  
	CMDBut_Add (FP_CB_SUPPORT, 	"Support allies", 	  "CG04",  string); 
	CMDBut_Add (FP_CB_DEPLOY, 	"Deploy structures",  "CG05", "Deploy turrets, dispensers,\n walls and mines to aid in \nthe battlefield.");
		
	//id's 8-14 for building structures.
	
	CMDBut_Add(FP_CB_BUILD_GENLAB, 	"Build Genetics Lab", 		"CM01", "FP_CBD_BUILD_GENLAB");
	CMDBut_Add(FP_CB_BUILD_ARMORY, 	"Build Armory",  			"CM02", "FP_CBD_BUILD_ARMORY");
	CMDBut_Add(FP_CB_BUILD_MECHFA,	"Build Mechanic Factory", 	"CM03", "FP_CBD_BUILD_MECHFA");
	CMDBut_Add(FP_CB_BUILD_REFINE,  "Build Refinery", 			"CM04", "FP_CBD_BUILD_REFINE");
	CMDBut_Add(FP_CB_BUILD_MARCOM, 	"Build Marine Command", 	"CM05",	"FP_CBD_BUILD_MARCOM");
	CMDBut_Add(FP_CB_BUILD_NUKESY,	"Build Nuke Silo", 			"CM06",	"FP_CBD_BUILD_NUKESY");
		
	CMDBut_Add(FP_CB_UPGRADE_GENLAB, "Upgrade Genetics Lab", 	"CC01",	"FP_CBD_BUILD_GENLAB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_HEALTH1, "Human Eng. Phase 1", 	"CM12", "TECHD_GENLAB_HEALTH1");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_HEALTH2, "Human Eng. Phase 2", 	"CM13", "TECHD_GENLAB_HEALTH2");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_ARMOR, 	 "Steel Plating", 		"CM16", "TECHD_GENLAB_ARMOR");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_SPEEDB,  "Adrenaline", 			"CM15", "TECHD_GENLAB_SPEEDB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_RESISB,  "Resister unit", 		"CM17", "TECHD_GENLAB_RESISB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_REGENB,  "Absorber unit", 		"CM18", "TECHD_GENLAB_REGENB");
	
	CMDBut_Add(FP_CB_UPGRADE_ARMORY, "Upgrade Armory", 				"CC02",	"FP_CBD_BUILD_ARMORY");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_ARMS1,  "Upgrade Arms Phase 1", "CM26", "TECHD_ARMORY_ARMS1");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_ARMS2,  "Upgrade Arms Phase 2", "CM27", "TECHD_ARMORY_ARMS2");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_BOOMRN,  "Boomshot Rounds", 	"CM28", "TECHD_ARMORY_BOOMRN");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_AMMOBP,  "Ammo Backpack", 		"CM29", "TECHD_ARMORY_AMMOBP");
	
	
	CMDBut_Add(FP_CB_UPGRADE_REFINE, "Upgrade Refinery", 		"CC04",	"FP_CBD_BUILD_REFINE");
	CMDBut_Add(FP_CB_UPGRADE_REFINE_PUMP1, "Processing Pump 1", 	"CM57",	"TECHD_REFINE_PUMP1");
	CMDBut_Add(FP_CB_UPGRADE_REFINE_PUMP2, "Processing Pump 2", 	"CM56",	"TECHD_REFINE_PUMP2");
	
	CMDBut_Add(FP_CB_UPGRADE_MARCOM, "Upgrade Marine Command", 	"CC05",	"FP_CBD_BUILD_MARCOM");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_AIRSUP, "Air Strike", 			"CM54",	"TECHD_MARCOM_AIRSTK");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_ADVSYS, "Advanced Systems", 	"CM44",	"TECHD_MARCOM_ADVSYS");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_IONCAN, "Ion Cannon", 			"CM53",	"TECHD_MARCOM_IONCAN");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_CPULSE, "Core pulses", 			"CM66",	"TECHD_MARCOM_CPULSE");
	
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK,			"Airstrike attack...",			"CM76",	"Start planning air attack.");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_POINT,		"Mark a point for target",		"CC07",	"FP_SUPCD_AIRSTK_POINT");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_LINE_1,		"Mark a target line's Point 1",	"CC08",	"FP_SUPCD_AIRSTK_LINE_1");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_LINE_2,		"Mark a target line's Point 2",	"CC09",	"FP_SUPCD_AIRSTK_LINE_2");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_WAVES_1,	"Toggle airstrike waves",		"CC10",	"FP_SUPCD_AIRSTK_WAVES");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_WAVES_3,	"Toggle airstrike waves",		"CC11",	"FP_SUPCD_AIRSTK_WAVES");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_WAVES_5,	"Toggle airstrike waves",		"CC12",	"FP_SUPCD_AIRSTK_WAVES");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_EXE,		"Launch the airstrike!",		"CM76",	"FP_SUPCD_AIRSTK_EXE");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_CLEAR,		"Clear airstrike targets",		"CM85",	"FP_SUPCD_AIRSTK_CLEAR");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE,			"Core pulse...",				"CM78",	"FP_SUPCD_CPULSE");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE_HEAL,		"Revive pulse",					"CM69",	"FP_SUPCD_CPULSE_REVIVE");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE_CRIPPLE,	"Cripple pulse",				"CM68",	"FP_SUPCD_CPULSE_CRIPPLE");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE_HALT,		"Halt Pulse",					"CM67",	"FP_SUPCD_CPULSE_HALT");
	CMDBut_Add(FP_CB_SUPPORT_MARK_ATTACK,		"Attack Marker",				"CM81",	"FP_SUPCD_MARK_ATTACK");
	CMDBut_Add(FP_CB_SUPPORT_MARK_DEFEND,		"Defend Marker",				"CM82",	"FP_SUPCD_MARK_DEFEND");
	CMDBut_Add(FP_CB_SUPPORT_MARK_DEPLOY,		"Deploy Marker",				"CM83",	"FP_SUPCD_MARK_DEPLOY");
	CMDBut_Add(FP_CB_SUPPORT_MARK_REGROUP,		"Regroup Marker",				"CM84",	"FP_SUPCD_MARK_REGROUP");
	CMDBut_Add(FP_CB_SUPPORT_MARK_CLEAR,		"Clear Markers",				"CM85",	"FP_SUPCD_MARK_CLEAR");
	CMDBut_Add(FP_CB_SUPPORT_IONCAN,			"Fire Ion Cannon",				"CM79",	"FP_SUPCD_IONCAN");
	CMDBut_Add(FP_CB_SUPPORT_DROPMONEY,			"Drop Money bag",				"CM80",	"FP_SUPCD_DROPMONEY");
	
	CMDBut_Add(FP_CB_DEPLOY_MINEFIELD,			"Deploy some mines",			"CM31", "FP_DEPCD_MINEFIELD");
	CMDBut_Add(FP_CB_DEPLOY_DISP_HEALTH,		"Deploy a Health Dispenser",	"CM33", "FP_DEPCD_DISP_HEALTH");
	CMDBut_Add(FP_CB_DEPLOY_DISP_AMMO,			"Deploy an Ammo Dispenser",		"CM32", "FP_DEPCD_DISP_AMMO");
	CMDBut_Add(FP_CB_DEPLOY_BARRIER,			"Deploy a Barrier",				"CM30", "FP_DEPCD_BARRIER");
	CMDBut_Add(FP_CB_DEPLOY_TURRET,				"Deploy a turret...",			"CG05", "FP_DEPCD_TURRET");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_BULLET,		"Deploy a Bullet Turret",		"CM40", "FP_DEPCD_TURRET_BULLET");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_ROCKET,		"Deploy a Rocket Turret",		"CM41", "FP_DEPCD_TURRET_ROCKET");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_PLASMA,		"Deploy a Plasma Turret",		"CM42", "FP_DEPCD_TURRET_PLASMA");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_TESCOL,		"Deploy a Tesla coil",			"CM43", "FP_DEPCD_TURRET_TESCOL");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_FLAMER,		"Deploy a Flame Turret",		"CM47", "FP_DEPCD_TURRET_FLAMER");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_CHAINGUN,	"Deploy a Chaingun Turret",		"CC14", "FP_DEPCD_TURRET_CHAINGUN");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_SHOTGUN,		"Deploy a Shotgun Turret",		"CC13", "FP_DEPCD_TURRET_SHOTGUN");
	
	CMDBut_Add(FP_CB_NUKE,			"Activate nuke",			"CM75", "Activate the silo, to nuke the map.");
	CMDBut_Add(FP_CB_NUKE_IT_NOW,	"Launch the nuke, now!",		"CM75", "Click it only if you're sure to nuke this map\njust remember, hold up for 5 minutes and you win.\n\n This action cannot be undone, are you sure?");

	CMDBut_InitConds();
}

function void CMDBut_UpdateConds(void){
	int btn;
	
	/**
		Build buttons.
	*/
	
	btn = FP_CB_BUILD_GENLAB;
	CMDBut_SetPrice		(btn, 	"genlab");
	CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_GENLAB));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_GENLAB);
	
	btn = FP_CB_BUILD_ARMORY;
	CMDBut_SetPrice		(btn,  	"armory");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_ARMORY));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_ARMORY);
	
	btn = FP_CB_BUILD_MECHFA;
	CMDBut_SetPrice		(btn, 	"mechfa");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_MECHFA));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_MECHFA);
	
	btn = FP_CB_BUILD_REFINE;
	CMDBut_SetPrice		(btn, 	"refine");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_REFINE));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_REFINE);
	
	btn = FP_CB_BUILD_MARCOM;
	CMDBut_SetPrice		(btn, 	"marcom");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_MARCOM));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_MARCOM);
	
	btn = FP_CB_BUILD_NUKESY;
	CMDBut_SetPrice		(btn, 	"nukesy");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_NUKESY) && CheckInventory("f_allownuke"));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_NUKESY);
	
	/**
		Upgrade buttons.
	*/
	
	btn = FP_CB_UPGRADE_GENLAB;
	CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_GENLAB));
	
	btn = FP_CB_UPGRADE_GENLAB_HEALTH1;
	CMDBut_SetPrice		(btn, "gl_health1");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_HEALTH1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_HEALTH1);
	
	btn = FP_CB_UPGRADE_GENLAB_HEALTH2;
	CMDBut_SetPrice		(btn, "gl_health2");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_HEALTH2) && Tech_IsDoneC(TECH_GENLAB_HEALTH1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_HEALTH2);
	
	btn = FP_CB_UPGRADE_GENLAB_ARMOR;
	CMDBut_SetPrice		 (btn, "gl_armor1");
	CMDBut_SetShowCond	 (btn, !Tech_IsDoneC(TECH_GENLAB_ARMOR));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH1), "Requires Human Eng. Phase 1...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ARMOR);
	
	btn = FP_CB_UPGRADE_GENLAB_SPEEDB;
	CMDBut_SetPrice		 (btn, "gl_speedb");
	CMDBut_SetShowCond	 (btn, !Tech_IsDoneC(TECH_GENLAB_SPEEDB));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_SPEEDB);
	
	btn = FP_CB_UPGRADE_GENLAB_RESISB;
	CMDBut_SetPrice		(btn, "gl_resisb");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_RESISB));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH2), "Requires Human Eng. Phase 2...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_RESISB);
	
	btn = FP_CB_UPGRADE_GENLAB_REGENB;
	CMDBut_SetPrice		 (btn, "gl_regenb");
	CMDBut_SetShowCond	 (btn, !Tech_IsDoneC(TECH_GENLAB_REGENB));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH2), "Requires Human Eng. Phase 2...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_REGENB);
	
	CMDBut_SetShowCond	(FP_CB_UPGRADE_ARMORY, Tech_IsDoneC(TECH_ARMORY));
	
	btn = FP_CB_UPGRADE_ARMORY_ARMS1;
	CMDBut_SetPrice		(btn, "ar_arms1");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_ARMS1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ARMS1);
	
	btn = FP_CB_UPGRADE_ARMORY_ARMS2;
	CMDBut_SetPrice		(btn, "ar_arms2");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_ARMS2) && Tech_IsDoneC(TECH_ARMORY_ARMS1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ARMS2);
	
	btn = FP_CB_UPGRADE_ARMORY_BOOMRN;
	CMDBut_SetPrice		(btn, "ar_boomrn");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_BOOMRN));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_BOOMRN);
	
	btn = FP_CB_UPGRADE_ARMORY_AMMOBP;
	CMDBut_SetPrice		(btn, "ar_ammobp");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_AMMOBP));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_AMMOBP);
	
	CMDBut_SetShowCond	(FP_CB_UPGRADE_REFINE, Tech_IsDoneC(TECH_REFINE));
	
	btn = FP_CB_UPGRADE_REFINE_PUMP1;
	CMDBut_SetPrice		(btn, "rf_pump1");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_REFINE_PUMP1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_PUMP1);
	
	btn = FP_CB_UPGRADE_REFINE_PUMP2;
	CMDBut_SetPrice		(btn, "rf_pump2");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_REFINE_PUMP2));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_PUMP2);
	
	CMDBut_SetShowCond	(FP_CB_UPGRADE_MARCOM, Tech_IsDoneC(TECH_MARCOM));
	
	btn = FP_CB_UPGRADE_MARCOM_AIRSUP;
	CMDBut_SetPrice		(btn, "mc_airsup");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_AIRSUP);
	
	btn = FP_CB_UPGRADE_MARCOM_ADVSYS;
	CMDBut_SetPrice		(btn, "mc_advsys");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_ADVSYS));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ADVSYS);
	
	btn = FP_CB_UPGRADE_MARCOM_IONCAN;
	CMDBut_SetPrice		(btn, "mc_ioncan");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_IONCAN));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_ARMORY_ARMS2), "Requires Arms Phase 2...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_IONCAN);
	
	
	btn = FP_CB_UPGRADE_MARCOM_CPULSE;
	CMDBut_SetPrice		(btn, "mc_cpulse");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_CPULSE);
	
	/**
		Support buttons.
	*/
	
	
	btn = FP_CB_SUPPORT_IONCAN;
	CMDBut_SetShowCond 	 (btn, !Tech_IsLockC(TECH_MARCOM_IONCAN));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_IONCAN), "Research it in the Marine Command first!");
	CMDBut_SetEvent		(btn, CMDEVT_SCRIPT_IONCAN);
	
	btn = FP_CB_SUPPORT_CPULSE;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetAccessCond 	(btn, Tech_IsDoneC(TECH_MARCOM_CPULSE), "Research it in the Marine Command first!");
	
	btn = FP_CB_SUPPORT_CPULSE_HEAL;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_CPULSE_HEAL);
	
	btn = FP_CB_SUPPORT_CPULSE_CRIPPLE;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_CPULSE_CRIPPLE);
	
	btn = FP_CB_SUPPORT_CPULSE_HALT;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_CPULSE_HALT);
	
	// Airstrike commands.
	btn = FP_CB_SUPPORT_AIRSTK;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_AIRSUP), "Research it in the Marine Command first!");
	
	btn = FP_CB_SUPPORT_AIRSTK_LINE_1;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_LINE1);
	
	btn = FP_CB_SUPPORT_AIRSTK_LINE_2;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_LINE2);
	
	btn = FP_CB_SUPPORT_AIRSTK_WAVES_1;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 1);
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_WAVES);
	
	btn = FP_CB_SUPPORT_AIRSTK_WAVES_3;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 3);
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_WAVES);
	
	btn = FP_CB_SUPPORT_AIRSTK_WAVES_5;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 5);
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_WAVES);
	
	btn = FP_CB_SUPPORT_AIRSTK_POINT;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_POINT);
	
	btn = FP_CB_SUPPORT_AIRSTK_CLEAR;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_CANCEL);
	
	btn = FP_CB_SUPPORT_AIRSTK_EXE;
	CMDBut_SetShowCond 	 (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetPrice		 (btn, "airstrike");
	CMDBut_SetIgnorePrice(btn, true);
	CMDBut_SetEvent		 (btn, CMDEVT_AIRSTK_EXECUTE);
	
	// Drop money bag.
	btn = FP_CB_SUPPORT_DROPMONEY;
	CMDBut_SetPrice		 (btn, "moneybag");
	CMDBut_SetShowCond	 (btn, checkInventory("c_allow_moneybag") && checkInventory("p_team_credits") >= 3000);
	CMDBut_SetIgnorePrice(btn, true);
	CMDBut_SetEvent		 (btn, CMDEVT_SPAWN_MONEYBAG);
	
	// Markers
	CMDBut_SetEvent		(FP_CB_SUPPORT_MARK_ATTACK, CMDEVT_MARKER_ATTACK);
	CMDBut_SetEvent		(FP_CB_SUPPORT_MARK_DEFEND, CMDEVT_MARKER_DEFEND);
	CMDBut_SetEvent		(FP_CB_SUPPORT_MARK_DEPLOY, CMDEVT_MARKER_DEPLOY);
	CMDBut_SetEvent		(FP_CB_SUPPORT_MARK_REGROUP, CMDEVT_MARKER_REGROUP);
	CMDBut_SetEvent		(FP_CB_SUPPORT_MARK_CLEAR, CMDEVT_MARKER_CLEAR);
	
	/*
	// All deploy buttons.
	*/
	
	CMDBut_SetShowCond	(FP_CB_DEPLOY, Tech_IsDoneC(TECH_ARMORY));
	
	btn = FP_CB_DEPLOY_DISP_HEALTH;
	CMDBut_SetPrice		(btn, "disp_health");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_DISP_HEALTH);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_DISP_AMMO;
	CMDBut_SetPrice		 (btn, "disp_ammo");
	CMDBut_SetShowCond	(btn, allow_turret_C());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_DISP_AMMO);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_BARRIER;
	CMDBut_SetPrice		 (btn, "sandbags");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_SPAWN_SANDBAGS);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_MINEFIELD;
	CMDBut_SetPrice		 (btn, "minefield");
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM), 
		"Build the marine command to unlock this.");
		CMDBut_SetEvent		(btn, CMDEVT_SPAWN_LANDMINES);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET;
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM), "Build the marine command to unlock this.");
	
	btn = FP_CB_DEPLOY_TURRET_BULLET;
	CMDBut_SetPrice		 (btn, "turret_bullet");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_BULLET);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET_SHOTGUN;
	CMDBut_SetPrice		 (btn, "turret_shotgun");
	CMDBut_SetShowCond	 (btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_SHOTGUN);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET_ROCKET;
	CMDBut_SetPrice		 (btn, "turret_rocket");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_ROCKET);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET_PLASMA;
	CMDBut_SetPrice		 (btn, "turret_plasma");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_ADVSYS),
								"Requires Advanced Systems...");
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_PLASMA);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET_TESCOL;
	CMDBut_SetPrice		 (btn, "turret_tesla");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_ADVSYS),
								"Requires Advanced Systems...");
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_TESLA);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET_FLAMER;
	CMDBut_SetPrice		 (btn, "turret_flame");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_ADVSYS),
								"Requires Advanced Systems...");
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_FLAME);
	//CMDBut_SetIgnorePrice(btn, true);
								
	btn = FP_CB_DEPLOY_TURRET_CHAINGUN;
	CMDBut_SetPrice		 (btn, "turret_chaingun");
	CMDBut_SetShowCond	 (btn, allow_turret_c());
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_ADVSYS),
								"Requires Advanced Systems...");
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_TURRET_CHAINGUN);
	//CMDBut_SetIgnorePrice(btn, true);
								
	CMDBut_SetShowCond		(FP_CB_NUKE, !CheckInventory("c_NukeLaunched") && CheckInventory("f_allownuke"));
	CMDBut_SetShowCond		(FP_CB_NUKE_IT_NOW, !CheckInventory("c_NukeLaunched") && CheckInventory("f_allownuke"));
	CMDBut_SetEvent			(FP_CB_NUKE_IT_NOW,  CMDEVT_SCRIPT_NUKE);
	CMDBut_SetAccessCond 	(FP_CB_NUKE, Tech_IsDoneC(TECH_NUKESY) && Tech_IsDoneC(TECH_ARMORY_ARMS2),
								"Requires Arms 2 and the Nuke Sylo...");
}

function void CMDBut_InitConds(void) {
	for(int i = 0; i < FP_COM_BUTTONS; i++){
		CMDBut_Conds (i, true, true, "null", "No reason in particular...");
		//CMDBut_Delay (i, 0);
	}
}


function str CMDBut_GetName(int w){		return CMDBut_List[w][0];}
function str CMDBut_GetDesc(int w){		return CMDBut_List[w][1];}
function str CMDBut_GetIcon(int w){		return CMDBut_List[w][2];}



//The condition to be activable.
function bool CMDBut_GetShowCond(int w){return CMDBut_List[w][4];} 
//Condition for showing the button.
function int CMDBut_GetPrice(int w){	return CheckInventory(CMDBut_List[w][5]);}
function bool CMDBut_GetAccessCond(int w){		return CMDBut_List[w][3];}
function bool CMDBut_GetIgnorePrice(int w){		return CMDBut_List[w][7];} 
function bool CMDBut_GetNoAccessReason(int w){	return CMDBut_List[w][6];} 
function int  CMDBut_GetEvent(int w){			return CMDBut_List[w][8];}
 //Condition to access to the action. (defaulting to price)

function void CMDBut_Add (int id, str name, str icon, str desc){
	CMDBut_List[id][0] = name;
	CMDBut_List[id][1] = strparam(l:desc); // CHECK AT THE LANGUAGE FILE.
	CMDBut_List[id][2] = icon;
	CMDBut_List[id][3] = true;
	CMDBut_List[id][4] = true;
	CMDBut_List[id][5] = "null";
	CMDBut_List[id][6] = "You need x tech before this.";
	CMDBut_List[id][7] = false;
	CMDBut_List[id][8] = CMDEVT_NULL; // Command to do
}

function void CMDBut_Conds (int id, bool acond, bool scond, str price, str reason){
	CMDBut_List[id][3] = acond; 
	CMDBut_List[id][4] = scond;
	CMDBut_List[id][6] = reason;
	if(strLen(price) == 0)
		 CMDBut_List[id][5] = "null"; 
	else CMDBut_List[id][5] = strparam(s:"pr_cmd_",s:price); 
	// ^ It's already synched with the inventory gaven on the terminal.
}

function void CMDBut_SetEvent(int id, int event_id){
	CMDBut_List[id][8] = event_id;
}

function void CMDBut_SetShowCond(int id, bool cond){
	CMDBut_List[id][4] = cond;
}

function void CMDBut_SetPrice(int id, int pricekey){
	if(strLen(pricekey) == 0){
		 CMDBut_List[id][5] = "null"; 
		 CMDBut_List[id][7] = true;
	}
	else{
		CMDBut_List[id][5] = strparam(s:"pr_cmd_",s:pricekey); 
		CMDBut_List[id][7] = false;
	}
}

function void CMDBut_SetIgnorePrice(int w, int res){ CMDBut_List[w][7] = res;} 

function void CMDBut_SetAccessCond(int id, bool cond, str why_not_reason){
	CMDBut_List[id][3] = cond;
	CMDBut_List[id][6] = why_not_reason;
}

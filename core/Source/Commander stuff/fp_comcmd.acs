///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_comcmd.acs
// All the data structure about the commander buttons are here.

#library "fp_comcmd"

#import "f_intdb.acs"
#import "fl_techs.acs"
#import "fc_CommB.acs"
#import "fc_AStr.acs"
#import "fp_cmdevt.acs"
#include "zcommon.acs"
#include "samu_tools.acs"

//Auto enumerating with ACS!
// The first constant will always be 0
// The next one will add 1 to the past constant
// Then the next one will add 1 to the past constant and so on!
#libdefine FP_CB_EXIT 						0
#libdefine FP_CB_RETURN						FP_CB_EXIT+1
#libdefine FP_CB_BUILD  					FP_CB_RETURN+1
#libdefine FP_CB_BUILD_GENLAB				FP_CB_BUILD+1	
#libdefine FP_CB_BUILD_ARMORY				FP_CB_BUILD_GENLAB+1	
#libdefine FP_CB_BUILD_MECHFA 				FP_CB_BUILD_ARMORY+1
#libdefine FP_CB_BUILD_REFINE				FP_CB_BUILD_MECHFA+1
#libdefine FP_CB_BUILD_MARCOM				FP_CB_BUILD_REFINE+1
#libdefine FP_CB_BUILD_NUKESY				FP_CB_BUILD_MARCOM+1
#libdefine FP_CB_UPGRADE					FP_CB_BUILD_NUKESY+1
#libdefine FP_CB_UPGRADE_GENLAB				FP_CB_UPGRADE+1
#libdefine FP_CB_UPGRADE_GENLAB_HEALTH1		FP_CB_UPGRADE_GENLAB+1
#libdefine FP_CB_UPGRADE_GENLAB_HEALTH2		FP_CB_UPGRADE_GENLAB_HEALTH1+1
#libdefine FP_CB_UPGRADE_GENLAB_ARMOR		FP_CB_UPGRADE_GENLAB_HEALTH2+1
#libdefine FP_CB_UPGRADE_GENLAB_SPEEDB		FP_CB_UPGRADE_GENLAB_ARMOR+1
#libdefine FP_CB_UPGRADE_GENLAB_RESISB		FP_CB_UPGRADE_GENLAB_SPEEDB+1
#libdefine FP_CB_UPGRADE_GENLAB_REGENB		FP_CB_UPGRADE_GENLAB_RESISB+1
#libdefine FP_CB_UPGRADE_GENLAB_STIMPK		FP_CB_UPGRADE_GENLAB_REGENB+1
#libdefine FP_CB_UPGRADE_ARMORY				FP_CB_UPGRADE_GENLAB_STIMPK+1
#libdefine FP_CB_UPGRADE_ARMORY_ARMS1		FP_CB_UPGRADE_ARMORY+1
#libdefine FP_CB_UPGRADE_ARMORY_ARMS2		FP_CB_UPGRADE_ARMORY_ARMS1+1
#libdefine FP_CB_UPGRADE_ARMORY_BOOMRN		FP_CB_UPGRADE_ARMORY_ARMS2+1
#libdefine FP_CB_UPGRADE_ARMORY_AMMOBP		FP_CB_UPGRADE_ARMORY_BOOMRN+1
#libdefine FP_CB_UPGRADE_REFINE				FP_CB_UPGRADE_ARMORY_AMMOBP+1
#libdefine FP_CB_UPGRADE_REFINE_PUMP1		FP_CB_UPGRADE_REFINE+1
#libdefine FP_CB_UPGRADE_REFINE_PUMP2		FP_CB_UPGRADE_REFINE_PUMP1+1
#libdefine FP_CB_UPGRADE_MARCOM				FP_CB_UPGRADE_REFINE_PUMP2+1
#libdefine FP_CB_UPGRADE_MARCOM_VETMER		FP_CB_UPGRADE_MARCOM+1
#libdefine FP_CB_UPGRADE_MARCOM_AIRSUP		FP_CB_UPGRADE_MARCOM_VETMER+1
#libdefine FP_CB_UPGRADE_MARCOM_ADVSYS		FP_CB_UPGRADE_MARCOM_AIRSUP+1
#libdefine FP_CB_UPGRADE_MARCOM_IONCAN		FP_CB_UPGRADE_MARCOM_ADVSYS+1
#libdefine FP_CB_UPGRADE_MARCOM_CPULSE		FP_CB_UPGRADE_MARCOM_IONCAN+1
#libdefine FP_CB_SUPPORT					FP_CB_UPGRADE_MARCOM_CPULSE+1
#libdefine FP_CB_SUPPORT_AIRSTK				FP_CB_SUPPORT+1
#libdefine FP_CB_SUPPORT_AIRSTK_POINT		FP_CB_SUPPORT_AIRSTK+1	
#libdefine FP_CB_SUPPORT_AIRSTK_LINE_1		FP_CB_SUPPORT_AIRSTK_POINT+1	
#libdefine FP_CB_SUPPORT_AIRSTK_LINE_2		FP_CB_SUPPORT_AIRSTK_LINE_1+1
#libdefine FP_CB_SUPPORT_AIRSTK_WAVES_1		FP_CB_SUPPORT_AIRSTK_LINE_2+1
#libdefine FP_CB_SUPPORT_AIRSTK_WAVES_3		FP_CB_SUPPORT_AIRSTK_WAVES_1+1
#libdefine FP_CB_SUPPORT_AIRSTK_WAVES_5		FP_CB_SUPPORT_AIRSTK_WAVES_3+1
#libdefine FP_CB_SUPPORT_AIRSTK_EXE			FP_CB_SUPPORT_AIRSTK_WAVES_5+1
#libdefine FP_CB_SUPPORT_AIRSTK_CLEAR		FP_CB_SUPPORT_AIRSTK_EXE+1
#libdefine FP_CB_SUPPORT_CPULSE				FP_CB_SUPPORT_AIRSTK_CLEAR+1
#libdefine FP_CB_SUPPORT_CPULSE_HEAL		FP_CB_SUPPORT_CPULSE+1
#libdefine FP_CB_SUPPORT_CPULSE_CRIPPLE		FP_CB_SUPPORT_CPULSE_HEAL+1
#libdefine FP_CB_SUPPORT_CPULSE_HALT		FP_CB_SUPPORT_CPULSE_CRIPPLE+1
#libdefine FP_CB_SUPPORT_MARK_ATTACK		FP_CB_SUPPORT_CPULSE_HALT+1
#libdefine FP_CB_SUPPORT_MARK_DEFEND		FP_CB_SUPPORT_MARK_ATTACK+1
#libdefine FP_CB_SUPPORT_MARK_DEPLOY		FP_CB_SUPPORT_MARK_DEFEND+1
#libdefine FP_CB_SUPPORT_MARK_REGROUP		FP_CB_SUPPORT_MARK_DEPLOY+1
#libdefine FP_CB_SUPPORT_MARK_CLEAR			FP_CB_SUPPORT_MARK_REGROUP+1
#libdefine FP_CB_SUPPORT_IONCAN				FP_CB_SUPPORT_MARK_CLEAR+1
#libdefine FP_CB_SUPPORT_DROPMONEY			FP_CB_SUPPORT_IONCAN+1
#libdefine FP_CB_DEPLOY						FP_CB_SUPPORT_DROPMONEY+1
#libdefine FP_CB_DEPLOY_MINEFIELD			FP_CB_DEPLOY+1
#libdefine FP_CB_DEPLOY_DISP_HEALTH			FP_CB_DEPLOY_MINEFIELD+1
#libdefine FP_CB_DEPLOY_DISP_AMMO			FP_CB_DEPLOY_DISP_HEALTH+1	
#libdefine FP_CB_DEPLOY_BARRIER				FP_CB_DEPLOY_DISP_AMMO+1	
#libdefine FP_CB_DEPLOY_TURRET				FP_CB_DEPLOY_BARRIER+1			
#libdefine FP_CB_DEPLOY_TURRET_BULLET		FP_CB_DEPLOY_TURRET+1
#libdefine FP_CB_DEPLOY_TURRET_ROCKET		FP_CB_DEPLOY_TURRET_BULLET+1	
#libdefine FP_CB_DEPLOY_TURRET_PLASMA		FP_CB_DEPLOY_TURRET_ROCKET+1	
#libdefine FP_CB_DEPLOY_TURRET_TESCOL		FP_CB_DEPLOY_TURRET_PLASMA+1
#libdefine FP_CB_DEPLOY_TURRET_FLAMER		FP_CB_DEPLOY_TURRET_TESCOL+1
#libdefine FP_CB_DEPLOY_TURRET_CHAINGUN		FP_CB_DEPLOY_TURRET_FLAMER+1
#libdefine FP_CB_DEPLOY_TURRET_SHOTGUN		FP_CB_DEPLOY_TURRET_CHAINGUN+1
#libdefine FP_CB_DEPLOY_TURRET_BFG			FP_CB_DEPLOY_TURRET_SHOTGUN+1
#libdefine FP_CB_NUKE						FP_CB_DEPLOY_TURRET_BFG+1
#libdefine FP_CB_NUKE_IT_NOW				FP_CB_NUKE+1
#libdefine FP_CB_UPGRADE_MARCOM_POPTIM		FP_CB_NUKE_IT_NOW+1
#libdefine FP_CB_UPGRADE_MARCOM_PFUSER		FP_CB_UPGRADE_MARCOM_POPTIM+1
#libdefine FP_CB_UPGRADE_REFINE_COINX5		FP_CB_UPGRADE_MARCOM_PFUSER+1
#libdefine FP_CB_UPGRADE_REFINE_ENGINE		FP_CB_UPGRADE_REFINE_COINX5+1
#libdefine FP_CB_UPGRADE_ARMORY_GNADES		FP_CB_UPGRADE_REFINE_ENGINE+1


#libdefine FP_COM_BUTTONS 99

int CmdBut_list[FP_COM_BUTTONS][9];
int CmdButStack = 0;

Script "SFPlus_InitCMDButtons" OPEN {
	SFPlus_DefineCMDButtons();
	//CMDBut_UpdateConds();
}

function void SFPlus_DefineCMDButtons(void){

	CMDBut_Add (FP_CB_EXIT, 	CMDEVT_NULL, "EXIT"); // 0
	CMDBut_Add (FP_CB_RETURN, 	CMDEVT_NULL, "RETURN"); // 1
	CMDBut_Add (FP_CB_BUILD, 	CMDEVT_NULL, "BUILD"); 
	CMDBut_Add (FP_CB_UPGRADE,	CMDEVT_NULL, "UPGRADE"); 
	CMDBut_Add (FP_CB_SUPPORT, CMDEVT_NULL,  "SUPPORT"); 
	CMDBut_Add (FP_CB_DEPLOY,  CMDEVT_NULL, "DEPLOY");
		
	
	CMDBut_Add(FP_CB_BUILD_GENLAB, CMDEVT_BUILD_GENLAB, "BUILD_GENLAB");
	CMDBut_Add(FP_CB_BUILD_ARMORY, CMDEVT_BUILD_ARMORY, "BUILD_ARMORY");
	CMDBut_Add(FP_CB_BUILD_MECHFA, CMDEVT_BUILD_MECHFA, "BUILD_MECHFA");
	CMDBut_Add(FP_CB_BUILD_REFINE, CMDEVT_BUILD_REFINE, "BUILD_REFINE");
	CMDBut_Add(FP_CB_BUILD_MARCOM, CMDEVT_BUILD_MARCOM, "BUILD_MARCOM");
	CMDBut_Add(FP_CB_BUILD_NUKESY, CMDEVT_BUILD_NUKESY, "BUILD_NUKESY");
		
	CMDBut_Add(FP_CB_UPGRADE_GENLAB, CMDEVT_NULL,	"UPG_GENLAB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_HEALTH1, 	CMDEVT_RESEARCH_HEALTH1, 	"UPG_GENLAB_HEALTH1");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_HEALTH2, 	CMDEVT_RESEARCH_HEALTH2, 	"UPG_GENLAB_HEALTH2");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_ARMOR, 		CMDEVT_RESEARCH_ARMOR,	 	"UPG_GENLAB_ARMOR");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_SPEEDB, 	CMDEVT_RESEARCH_SPEEDB, 	"UPG_GENLAB_SPEEDB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_RESISB, 	CMDEVT_RESEARCH_RESISB, 	"UPG_GENLAB_RESISB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_REGENB, 	CMDEVT_RESEARCH_REGENB, 	"UPG_GENLAB_REGENB");
	CMDBut_Add(FP_CB_UPGRADE_GENLAB_STIMPK, 	CMDEVT_RESEARCH_STIMPK, 	"UPG_GENLAB_STIMPK");
	
	CMDBut_Add(FP_CB_UPGRADE_ARMORY, CMDEVT_NULL,"UPG_ARMORY");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_ARMS1,		CMDEVT_RESEARCH_ARMS1, 	"UPG_ARMORY_ARMS1");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_ARMS2,		CMDEVT_RESEARCH_ARMS2,	"UPG_ARMORY_ARMS2");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_BOOMRN,		CMDEVT_RESEARCH_BOOMRN, "UPG_ARMORY_BOOMRN");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_AMMOBP,		CMDEVT_RESEARCH_AMMOBP, "UPG_ARMORY_AMMOBP");
	CMDBut_Add(FP_CB_UPGRADE_ARMORY_GNADES,		CMDEVT_RESEARCH_GNADES, "UPG_ARMORY_GNADES");
	
	CMDBut_Add(FP_CB_UPGRADE_REFINE, CMDEVT_NULL,"UPG_REFINE");
	CMDBut_Add(FP_CB_UPGRADE_REFINE_PUMP1,		CMDEVT_RESEARCH_PUMP1, "UPG_REFINE_PUMP1");
	CMDBut_Add(FP_CB_UPGRADE_REFINE_PUMP2,		CMDEVT_RESEARCH_PUMP2, "UPG_REFINE_PUMP2");
	CMDBut_Add(FP_CB_UPGRADE_REFINE_ENGINE,		CMDEVT_NULL, 			"UPG_REFINE_ENGINE");
	CMDBut_Add(FP_CB_UPGRADE_REFINE_COINX5,		CMDEVT_NULL, 			"UPG_REFINE_COINX5");
	

	CMDBut_Add(FP_CB_UPGRADE_MARCOM, CMDEVT_NULL, "UPG_MARCOM");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_AIRSUP,		CMDEVT_RESEARCH_AIRSUP, "UPG_MARCOM_AIRSUP");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_ADVSYS,		CMDEVT_RESEARCH_ADVSYS, "UPG_MARCOM_ADVSYS");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_VETMER,		CMDEVT_RESEARCH_VETMER, "UPG_MARCOM_VETMER");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_IONCAN,		CMDEVT_RESEARCH_IONCAN, "UPG_MARCOM_IONCAN");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_CPULSE,		CMDEVT_RESEARCH_CPULSE, "UPG_MARCOM_CPULSE");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_PFUSER,		CMDEVT_NULL, 			"UPG_MARCOM_PFUSER");
	CMDBut_Add(FP_CB_UPGRADE_MARCOM_POPTIM,		CMDEVT_NULL, 			"UPG_MARCOM_POPTIM");
	
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK, CMDEVT_NULL, "SUP_AIRSTK");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_POINT,		CMDEVT_AIRSTK_POINT,  	"SUP_AIRSTK_POINT");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_LINE_1,		CMDEVT_AIRSTK_LINE1, 	"SUP_AIRSTK_LINE1");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_LINE_2,		CMDEVT_AIRSTK_LINE2, 	"SUP_AIRSTK_LINE2");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_WAVES_1,	CMDEVT_AIRSTK_WAVES, 	"SUP_AIRSTK_WAVES1");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_WAVES_3,	CMDEVT_AIRSTK_WAVES, 	"SUP_AIRSTK_WAVES3");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_WAVES_5,	CMDEVT_AIRSTK_WAVES, 	"SUP_AIRSTK_WAVES5");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_EXE,		CMDEVT_AIRSTK_EXECUTE, 	"SUP_AIRSTK_EXE");
	CMDBut_Add(FP_CB_SUPPORT_AIRSTK_CLEAR,		CMDEVT_AIRSTK_CANCEL, 	"SUP_AIRSTK_CANCEL");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE, CMDEVT_NULL, "SUP_CPULSE");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE_HEAL,		CMDEVT_CPULSE_HEAL,		"SUP_CPULSE_HEAL");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE_CRIPPLE,	CMDEVT_CPULSE_CRIPPLE,	"SUP_CPULSE_CRIPPLE");
	CMDBut_Add(FP_CB_SUPPORT_CPULSE_HALT,		CMDEVT_CPULSE_HALT,		"SUP_CPULSE_HALT");
	CMDBut_Add(FP_CB_SUPPORT_MARK_ATTACK,		CMDEVT_MARKER_ATTACK, 	"SUP_MARK_ATTACK");
	CMDBut_Add(FP_CB_SUPPORT_MARK_DEFEND,		CMDEVT_MARKER_DEFEND,	"SUP_MARK_DEFEND");
	CMDBut_Add(FP_CB_SUPPORT_MARK_DEPLOY,		CMDEVT_MARKER_DEPLOY,	"SUP_MARK_DEPLOY");
	CMDBut_Add(FP_CB_SUPPORT_MARK_REGROUP,		CMDEVT_MARKER_REGROUP,	"SUP_MARK_REGROUP");
	CMDBut_Add(FP_CB_SUPPORT_MARK_CLEAR,		CMDEVT_MARKER_CLEAR,	"SUP_MARK_CLEAR");
	CMDBut_Add(FP_CB_SUPPORT_IONCAN,			CMDEVT_SCRIPT_IONCAN,	"SUP_IONCAN");
	CMDBut_Add(FP_CB_SUPPORT_DROPMONEY,			CMDEVT_SPAWN_MONEYBAG,	"SUP_MONEYBAG");
	
	CMDBut_Add(FP_CB_DEPLOY_MINEFIELD,			CMDEVT_SPAWN_LANDMINES,			"DEP_MINEFIELD");
	CMDBut_Add(FP_CB_DEPLOY_DISP_HEALTH,		CMDEVT_DEPLOY_DISP_HEALTH,		"DEP_DISP_HEALTH");
	CMDBut_Add(FP_CB_DEPLOY_DISP_AMMO,			CMDEVT_DEPLOY_DISP_AMMO,		"DEP_DISP_AMMO");
	CMDBut_Add(FP_CB_DEPLOY_BARRIER,			CMDEVT_SPAWN_SANDBAGS,			"DEP_BARRIER");
	CMDBut_Add(FP_CB_DEPLOY_TURRET,				CMDEVT_NULL,					"DEP_TURRET");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_BULLET,		CMDEVT_DEPLOY_TURRET_BULLET,	"DEP_TURRET_BULLET");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_ROCKET,		CMDEVT_DEPLOY_TURRET_ROCKET,	"DEP_TURRET_ROCKET");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_PLASMA,		CMDEVT_DEPLOY_TURRET_PLASMA,	"DEP_TURRET_PLASMA");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_TESCOL,		CMDEVT_DEPLOY_TURRET_TESLA,		"DEP_TURRET_TESCOL");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_FLAMER,		CMDEVT_DEPLOY_TURRET_FLAME,		"DEP_TURRET_FLAMER");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_CHAINGUN,	CMDEVT_DEPLOY_TURRET_CHAINGUN,	"DEP_TURRET_CHAINGUN");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_SHOTGUN,		CMDEVT_DEPLOY_TURRET_SHOTGUN,	"DEP_TURRET_SHOTGUN");
	CMDBut_Add(FP_CB_DEPLOY_TURRET_BFG,			CMDEVT_DEPLOY_TURRET_BFG,		"DEP_TURRET_BFG");

	CMDBut_Add(FP_CB_NUKE,	CMDEVT_NULL,				"NUKE");
	CMDBut_Add(FP_CB_NUKE_IT_NOW,	CMDEVT_SCRIPT_NUKE,	"NUKE_NOW");
	

	CMDBut_SetPrices();
}

function void CMDBut_SetPrices(void){
	CMDBut_SetPrice		(FP_CB_BUILD_GENLAB, 	"genlab");
	CMDBut_SetPrice		(FP_CB_BUILD_ARMORY, 	"armory");
	CMDBut_SetPrice		(FP_CB_BUILD_MECHFA, 	"mechfa");
	CMDBut_SetPrice		(FP_CB_BUILD_REFINE, 	"refine");
	CMDBut_SetPrice		(FP_CB_BUILD_MARCOM, 	"marcom");
	CMDBut_SetPrice		(FP_CB_BUILD_NUKESY, 	"nukesy");

	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_HEALTH1, "gl_health1");
	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_HEALTH2, "gl_health2");
	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_ARMOR, "gl_armor1");
	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_SPEEDB, "gl_speedb");
	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_RESISB, "gl_resisb");
	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_REGENB, "gl_regenb");
	CMDBut_SetPrice		(FP_CB_UPGRADE_GENLAB_STIMPK, "gl_stimpk");

	CMDBut_SetPrice		(FP_CB_UPGRADE_ARMORY_ARMS1, "ar_arms1");
	CMDBut_SetPrice		(FP_CB_UPGRADE_ARMORY_ARMS2, "ar_arms2");
	CMDBut_SetPrice		(FP_CB_UPGRADE_ARMORY_BOOMRN, "ar_boomrn");
	CMDBut_SetPrice		(FP_CB_UPGRADE_ARMORY_AMMOBP, "ar_ammobp");
	CMDBut_SetPrice		(FP_CB_UPGRADE_ARMORY_GNADES, "ar_gnades");

	CMDBut_SetPrice		(FP_CB_UPGRADE_REFINE_PUMP1, "rf_pump1");
	CMDBut_SetPrice		(FP_CB_UPGRADE_REFINE_PUMP2, "rf_pump2");

	CMDBut_SetPrice		(FP_CB_UPGRADE_MARCOM_AIRSUP, "mc_airsup");
	CMDBut_SetPrice		(FP_CB_UPGRADE_MARCOM_ADVSYS, "mc_advsys");
	CMDBut_SetPrice		(FP_CB_UPGRADE_MARCOM_VETMER, "mc_advsys");
	CMDBut_SetPrice		(FP_CB_UPGRADE_MARCOM_IONCAN, "mc_ioncan");
	CMDBut_SetPrice		(FP_CB_UPGRADE_MARCOM_CPULSE, "mc_cpulse");

	CMDBut_SetPrice		 (FP_CB_SUPPORT_AIRSTK_EXE, "airstrike");
	CMDBut_SetPrice		 (FP_CB_SUPPORT_DROPMONEY, "moneybag");
	CMDBut_SetIgnorePrice(FP_CB_SUPPORT_AIRSTK_EXE, true);
	CMDBut_SetIgnorePrice(FP_CB_SUPPORT_DROPMONEY, true);

	CMDBut_SetPrice		(FP_CB_DEPLOY_DISP_HEALTH, "disp_health");
	CMDBut_SetPrice		(FP_CB_DEPLOY_DISP_AMMO, "disp_ammo");
	CMDBut_SetPrice		(FP_CB_DEPLOY_BARRIER, "sandbags");
	CMDBut_SetPrice		(FP_CB_DEPLOY_MINEFIELD, "minefield");

	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_BULLET, "turret_bullet");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_SHOTGUN, "turret_shotgun");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_ROCKET, "turret_rocket");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_PLASMA, "turret_plasma");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_TESCOL, "turret_tesla");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_FLAMER, "turret_flame");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_CHAINGUN, "turret_chaingun");
	CMDBut_SetPrice		(FP_CB_DEPLOY_TURRET_BFG,"turret_bfg");
	
}


function int CMDBut_UpdateConds(int btn){
	
	/**
		Build buttons.
	*/

	switch(btn){
		case FP_CB_BUILD:
		if(checkInventory("f_allownuke")){
			CMDBut_SetShowCond	(btn, 	
				!Tech_IsActivatedC(TECH_GENLAB | TECH_ARMORY | TECH_MECHFA | TECH_REFINE | TECH_MARCOM | TECH_NUKESY));
		}else {
			CMDBut_SetShowCond	(btn, 	
				!Tech_IsActivatedC(TECH_GENLAB | TECH_ARMORY | TECH_MECHFA | TECH_REFINE | TECH_MARCOM));
		}
		break; 

		case FP_CB_DEPLOY: CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_ARMORY)); break;

		case FP_CB_NUKE: 
			CMDBut_SetShowCond (btn, !CheckInventory("c_NukeLaunched") && CheckInventory("f_allownuke"));
			CMDBut_SetAccessCond (btn, 
				Tech_IsDoneC(TECH_NUKESY) && Tech_IsDoneC(TECH_MARCOM), "Requires Marine Comm. and the Nuke Sylo...");
		break;
		case FP_CB_NUKE_IT_NOW:
			CMDBut_SetShowCond (btn, !CheckInventory("c_NukeLaunched") && CheckInventory("f_allownuke"));
		break;
		

		case FP_CB_BUILD_GENLAB: CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_GENLAB)); break; 
		case FP_CB_BUILD_ARMORY: CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_ARMORY)); break; 
		case FP_CB_BUILD_MECHFA: CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_MECHFA)); break; 
		case FP_CB_BUILD_REFINE: CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_REFINE)); break; 
		case FP_CB_BUILD_MARCOM: CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_MARCOM)); break; 
		case FP_CB_BUILD_NUKESY: 
			CMDBut_SetShowCond	(btn,  !Tech_IsActivatedC(TECH_NUKESY) && CheckInventory("f_allownuke"));
		break;

		case FP_CB_UPGRADE_GENLAB: CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_GENLAB)); break;
		case FP_CB_UPGRADE_ARMORY: CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_ARMORY)); break;
		case FP_CB_UPGRADE_REFINE: CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_REFINE)); break;
		case FP_CB_UPGRADE_MARCOM: CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_MARCOM)); break;
		
		// Genlab Armor
		case FP_CB_UPGRADE_GENLAB_HEALTH1:
			if(Tech_IsDoneC(TECH_GENLAB_HEALTH1)) return FP_CB_UPGRADE_GENLAB_HEALTH2;
			CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_HEALTH1));
		break;
		case FP_CB_UPGRADE_GENLAB_HEALTH2: 
			CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_HEALTH2) && Tech_IsDoneC(TECH_GENLAB_HEALTH1)); 
		break;
		case FP_CB_UPGRADE_GENLAB_ARMOR: CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_ARMOR));
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH1), "Requires Human Eng. Phase 1...");
		break;
		case FP_CB_UPGRADE_GENLAB_SPEEDB: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_GENLAB_SPEEDB)); break;
		case FP_CB_UPGRADE_GENLAB_RESISB: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_GENLAB_RESISB)); 
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH2), "Requires Human Eng. Phase 2...");
		break;

		case FP_CB_UPGRADE_GENLAB_REGENB: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_GENLAB_REGENB));
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH2), "Requires Human Eng. Phase 2...");
		break;
		case FP_CB_UPGRADE_GENLAB_STIMPK: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_GENLAB_STIMPK)); 
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH1), "Requires Human Eng. Phase 1...");
		break;

		// Armory upgrades
		case FP_CB_UPGRADE_ARMORY_ARMS1:
			if(Tech_IsDoneC(TECH_ARMORY_ARMS1)) return FP_CB_UPGRADE_ARMORY_ARMS2;
			CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_ARMS1)); 
		break;
		case FP_CB_UPGRADE_ARMORY_ARMS2: 
			CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_ARMS2) && Tech_IsDoneC(TECH_ARMORY_ARMS1)); 
		break;
		
		case FP_CB_UPGRADE_ARMORY_BOOMRN: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_ARMORY_BOOMRN)); break;
		case FP_CB_UPGRADE_ARMORY_AMMOBP: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_ARMORY_AMMOBP)); break;
		case FP_CB_UPGRADE_ARMORY_GNADES: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_ARMORY_GNADES)); break;

		// Refinery upgrades
		case FP_CB_UPGRADE_REFINE_PUMP1: CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_REFINE_PUMP1)); break;
		case FP_CB_UPGRADE_REFINE_PUMP2: CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_REFINE_PUMP2)); break;

		// Marine command upgrades
		case FP_CB_UPGRADE_MARCOM_AIRSUP: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_MARCOM_AIRSUP)); break;
		case FP_CB_UPGRADE_MARCOM_ADVSYS: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_MARCOM_ADVSYS)); break;
		case FP_CB_UPGRADE_MARCOM_VETMER: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_MARCOM_VETMER)); break;
		case FP_CB_UPGRADE_MARCOM_IONCAN:
			CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_IONCAN));
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_ARMORY_ARMS2), "Requires Arms Phase 2...");
		break;
		case FP_CB_UPGRADE_MARCOM_CPULSE: CMDBut_SetShowCond (btn, !Tech_IsDoneC(TECH_MARCOM_CPULSE)); break;

		// Support commands
		case FP_CB_SUPPORT_IONCAN: 
			CMDBut_SetShowCond 	 (btn, !Tech_IsLockC(TECH_MARCOM_IONCAN));
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_IONCAN), "Research it in the Marine Command first!");
		break;
		case FP_CB_SUPPORT_CPULSE:
			CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
			CMDBut_SetAccessCond 	(btn, Tech_IsDoneC(TECH_MARCOM_CPULSE), "Research it in the Marine Command first!");
		break;

		// Core Pulses
		case FP_CB_SUPPORT_CPULSE_HEAL: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_CPULSE)); break;
		case FP_CB_SUPPORT_CPULSE_CRIPPLE: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_CPULSE)); break;
		case FP_CB_SUPPORT_CPULSE_HALT: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_CPULSE)); break;
		
		
		// Airstrike commands.
		case FP_CB_SUPPORT_AIRSTK:
			CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_AIRSUP), "Research it in the Marine Command first!");
		break;
		case FP_CB_SUPPORT_AIRSTK_LINE_1: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP)); break;
		case FP_CB_SUPPORT_AIRSTK_LINE_2: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP)); break;
		case FP_CB_SUPPORT_AIRSTK_WAVES_1: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 1); break;
		case FP_CB_SUPPORT_AIRSTK_WAVES_3: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 3); break;
		case FP_CB_SUPPORT_AIRSTK_WAVES_5: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 5); break;
		case FP_CB_SUPPORT_AIRSTK_POINT: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP)); break;
		case FP_CB_SUPPORT_AIRSTK_CLEAR: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP)); break;
		case FP_CB_SUPPORT_AIRSTK_EXE: CMDBut_SetShowCond (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP)); break;
		case FP_CB_SUPPORT_DROPMONEY:
			CMDBut_SetShowCond	 (btn, checkInventory("c_allow_moneybag") && checkInventory("p_team_credits") >= 3000);
		break;

		
		// Deploy commands
		case FP_CB_DEPLOY_TURRET:
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM), "Build the marine command to unlock this.");
			CMDBut_SetShowCond	(btn, allow_turret_c()); 
		break;
		case FP_CB_DEPLOY_MINEFIELD: 
			CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM), "Build the marine command to unlock this.");
		break;

		// All deployables
		// All buttons under here, must obey the advsys tech rule, before going on the turret cooldown.
		case FP_CB_DEPLOY_TURRET_PLASMA:
		case FP_CB_DEPLOY_TURRET_TESCOL:
		case FP_CB_DEPLOY_TURRET_FLAMER:
		case FP_CB_DEPLOY_TURRET_CHAINGUN:
		case FP_CB_DEPLOY_TURRET_BFG:
			CMDBut_SetAccessCond(btn, Tech_IsDoneC(TECH_MARCOM_ADVSYS), "Requires Advanced Systems...");
		// All buttons under here, does'nt need the advsys tech rule.
		case FP_CB_DEPLOY_DISP_HEALTH: 
		case FP_CB_DEPLOY_DISP_AMMO:
		case FP_CB_DEPLOY_BARRIER:
		case FP_CB_DEPLOY_TURRET_BULLET:
		case FP_CB_DEPLOY_TURRET_SHOTGUN:
		case FP_CB_DEPLOY_TURRET_ROCKET:
			CMDBut_SetShowCond	(btn, allow_turret_c()); 
		break;
	}
	return btn;
}

function void CMDBut_InitConds(void) {
	for(int i = 0; i < FP_COM_BUTTONS; i++){
		CMDBut_Conds (i, true, true, "null", "No reason in particular...");
		//CMDBut_Delay (i, 0);
	}
}

function void oldcode (void) {
	/*
	btn = FP_CB_BUILD_GENLAB;
	CMDBut_SetPrice		(btn, 	"genlab");
	CMDBut_SetShowCond	(btn, 	!Tech_IsActivatedC(TECH_GENLAB));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_GENLAB);
	
	btn = FP_CB_BUILD_ARMORY;
	CMDBut_SetPrice		(btn,  	"armory");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_ARMORY));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_ARMORY);
	
	btn = FP_CB_BUILD_MECHFA;
	CMDBut_SetPrice		(btn, 	"mechfa");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_MECHFA));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_MECHFA);
	
	btn = FP_CB_BUILD_REFINE;
	CMDBut_SetPrice		(btn, 	"refine");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_REFINE));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_REFINE);
	
	btn = FP_CB_BUILD_MARCOM;
	CMDBut_SetPrice		(btn, 	"marcom");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_MARCOM));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_MARCOM);
	
	btn = FP_CB_BUILD_NUKESY;
	CMDBut_SetPrice		(btn, 	"nukesy");
	CMDBut_SetShowCond	(btn,	!Tech_IsActivatedC(TECH_NUKESY) && CheckInventory("f_allownuke"));
	CMDBut_SetEvent		(btn, 	CMDEVT_BUILD_NUKESY);
	*/
	/**
		Upgrade buttons.
	*/
	/*
	btn = FP_CB_UPGRADE_GENLAB;
	CMDBut_SetShowCond	(btn, Tech_IsDoneC(TECH_GENLAB));
	
	btn = FP_CB_UPGRADE_GENLAB_HEALTH1;
	CMDBut_SetPrice		(btn, "gl_health1");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_HEALTH1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_HEALTH1);
	
	btn = FP_CB_UPGRADE_GENLAB_HEALTH2;
	CMDBut_SetPrice		(btn, "gl_health2");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_HEALTH2) && Tech_IsDoneC(TECH_GENLAB_HEALTH1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_HEALTH2);
	
	btn = FP_CB_UPGRADE_GENLAB_ARMOR;
	CMDBut_SetPrice		 (btn, "gl_armor1");
	CMDBut_SetShowCond	 (btn, !Tech_IsDoneC(TECH_GENLAB_ARMOR));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH1), "Requires Human Eng. Phase 1...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ARMOR);
	
	btn = FP_CB_UPGRADE_GENLAB_SPEEDB;
	CMDBut_SetPrice		 (btn, "gl_speedb");
	CMDBut_SetShowCond	 (btn, !Tech_IsDoneC(TECH_GENLAB_SPEEDB));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_SPEEDB);
	
	btn = FP_CB_UPGRADE_GENLAB_RESISB;
	CMDBut_SetPrice		(btn, "gl_resisb");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_GENLAB_RESISB));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH2), "Requires Human Eng. Phase 2...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_RESISB);
	
	btn = FP_CB_UPGRADE_GENLAB_REGENB;
	CMDBut_SetPrice		 (btn, "gl_regenb");
	CMDBut_SetShowCond	 (btn, !Tech_IsDoneC(TECH_GENLAB_REGENB));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_GENLAB_HEALTH2), "Requires Human Eng. Phase 2...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_REGENB);
	
	CMDBut_SetShowCond	(FP_CB_UPGRADE_ARMORY, Tech_IsDoneC(TECH_ARMORY));
	
	btn = FP_CB_UPGRADE_ARMORY_ARMS1;
	CMDBut_SetPrice		(btn, "ar_arms1");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_ARMS1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ARMS1);
	
	btn = FP_CB_UPGRADE_ARMORY_ARMS2;
	CMDBut_SetPrice		(btn, "ar_arms2");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_ARMS2) && Tech_IsDoneC(TECH_ARMORY_ARMS1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ARMS2);
	
	btn = FP_CB_UPGRADE_ARMORY_BOOMRN;
	CMDBut_SetPrice		(btn, "ar_boomrn");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_BOOMRN));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_BOOMRN);
	
	btn = FP_CB_UPGRADE_ARMORY_AMMOBP;
	CMDBut_SetPrice		(btn, "ar_ammobp");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_ARMORY_AMMOBP));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_AMMOBP);
	
	CMDBut_SetShowCond	(FP_CB_UPGRADE_REFINE, Tech_IsDoneC(TECH_REFINE));
	
	btn = FP_CB_UPGRADE_REFINE_PUMP1;
	CMDBut_SetPrice		(btn, "rf_pump1");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_REFINE_PUMP1));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_PUMP1);
	
	btn = FP_CB_UPGRADE_REFINE_PUMP2;
	CMDBut_SetPrice		(btn, "rf_pump2");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_REFINE_PUMP2));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_PUMP2);
	
	CMDBut_SetShowCond	(FP_CB_UPGRADE_MARCOM, Tech_IsDoneC(TECH_MARCOM));
	
	btn = FP_CB_UPGRADE_MARCOM_AIRSUP;
	CMDBut_SetPrice		(btn, "mc_airsup");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_AIRSUP);
	
	btn = FP_CB_UPGRADE_MARCOM_ADVSYS;
	CMDBut_SetPrice		(btn, "mc_advsys");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_ADVSYS));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_ADVSYS);

	btn = FP_CB_UPGRADE_MARCOM_VETMER;
	CMDBut_SetPrice		(btn, "mc_advsys");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_VETMER));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_VETMER);
	
	btn = FP_CB_UPGRADE_MARCOM_IONCAN;
	CMDBut_SetPrice		(btn, "mc_ioncan");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_IONCAN));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_ARMORY_ARMS2), "Requires Arms Phase 2...");
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_IONCAN);
	
	
	btn = FP_CB_UPGRADE_MARCOM_CPULSE;
	CMDBut_SetPrice		(btn, "mc_cpulse");
	CMDBut_SetShowCond	(btn, !Tech_IsDoneC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_RESEARCH_CPULSE);
	
	/**
		Support buttons.
	*/
	
	/*
	btn = FP_CB_SUPPORT_IONCAN;
	CMDBut_SetShowCond 	 (btn, !Tech_IsLockC(TECH_MARCOM_IONCAN));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_IONCAN), "Research it in the Marine Command first!");
	CMDBut_SetEvent		(btn, CMDEVT_SCRIPT_IONCAN);
	
	btn = FP_CB_SUPPORT_CPULSE;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetAccessCond 	(btn, Tech_IsDoneC(TECH_MARCOM_CPULSE), "Research it in the Marine Command first!");
	
	btn = FP_CB_SUPPORT_CPULSE_HEAL;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_CPULSE_HEAL);
	
	btn = FP_CB_SUPPORT_CPULSE_CRIPPLE;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_CPULSE_CRIPPLE);
	
	btn = FP_CB_SUPPORT_CPULSE_HALT;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_CPULSE));
	CMDBut_SetEvent		(btn, CMDEVT_CPULSE_HALT);
	
	// Airstrike commands.
	btn = FP_CB_SUPPORT_AIRSTK;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM_AIRSUP), "Research it in the Marine Command first!");
	
	btn = FP_CB_SUPPORT_AIRSTK_LINE_1;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_LINE1);
	
	btn = FP_CB_SUPPORT_AIRSTK_LINE_2;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_LINE2);
	
	btn = FP_CB_SUPPORT_AIRSTK_WAVES_1;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 1);
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_WAVES);
	
	btn = FP_CB_SUPPORT_AIRSTK_WAVES_3;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 3);
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_WAVES);
	
	btn = FP_CB_SUPPORT_AIRSTK_WAVES_5;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP) && airstk_waves == 5);
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_WAVES);
	
	btn = FP_CB_SUPPORT_AIRSTK_POINT;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_POINT);
	
	btn = FP_CB_SUPPORT_AIRSTK_CLEAR;
	CMDBut_SetShowCond 		(btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetEvent			(btn, CMDEVT_AIRSTK_CANCEL);
	
	btn = FP_CB_SUPPORT_AIRSTK_EXE;
	CMDBut_SetShowCond 	 (btn, !Tech_IsLockC(TECH_MARCOM_AIRSUP));
	CMDBut_SetPrice		 (btn, "airstrike");
	CMDBut_SetIgnorePrice(btn, true);
	CMDBut_SetEvent		 (btn, CMDEVT_AIRSTK_EXECUTE);
	
	// Drop money bag.
	btn = FP_CB_SUPPORT_DROPMONEY;
	CMDBut_SetPrice		 (btn, "moneybag");
	CMDBut_SetShowCond	 (btn, checkInventory("c_allow_moneybag") && checkInventory("p_team_credits") >= 3000);
	CMDBut_SetIgnorePrice(btn, true);
	CMDBut_SetEvent		 (btn, CMDEVT_SPAWN_MONEYBAG);
	*/
	/*
	// All deploy buttons.
	*/
	/*
	btn = FP_CB_DEPLOY_DISP_HEALTH;
	CMDBut_SetPrice		(btn, "disp_health");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_DISP_HEALTH);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_DISP_AMMO;
	CMDBut_SetPrice		 (btn, "disp_ammo");
	CMDBut_SetShowCond	(btn, allow_turret_C());
	CMDBut_SetEvent		(btn, CMDEVT_DEPLOY_DISP_AMMO);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_BARRIER;
	CMDBut_SetPrice		 (btn, "sandbags");
	CMDBut_SetShowCond	(btn, allow_turret_c());
	CMDBut_SetEvent		(btn, CMDEVT_SPAWN_SANDBAGS);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_MINEFIELD;
	CMDBut_SetPrice		 (btn, "minefield");
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM), 
		"Build the marine command to unlock this.");
		CMDBut_SetEvent		(btn, CMDEVT_SPAWN_LANDMINES);
	//CMDBut_SetIgnorePrice(btn, true);
	
	btn = FP_CB_DEPLOY_TURRET;
	CMDBut_SetAccessCond (btn, Tech_IsDoneC(TECH_MARCOM), "Build the marine command to unlock this.");

	/*
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_BULLET, 	CMDEVT_DEPLOY_TURRET_BULLET, 	"turret_bullet", false);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_SHOTGUN, 	CMDEVT_DEPLOY_TURRET_SHOTGUN, 	"turret_shotgun", false);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_ROCKET, 	CMDEVT_DEPLOY_TURRET_ROCKET, 	"turret_rocket", false);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_PLASMA, 	CMDEVT_DEPLOY_TURRET_PLASMA, 	"turret_plasma", true);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_TESCOL, 	CMDEVT_DEPLOY_TURRET_TESLA, 	"turret_tesla", true);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_FLAMER, 	CMDEVT_DEPLOY_TURRET_FLAME, 	"turret_flame", true);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_CHAINGUN, 	CMDEVT_DEPLOY_TURRET_CHAINGUN, 	"turret_chaingun", true);
	CMDBut_Conds_Deploy(FP_CB_DEPLOY_TURRET_BFG, 		CMDEVT_DEPLOY_TURRET_BFG, 		"turret_bfg", true);
					*/			
	/*
	CMDBut_SetShowCond		(FP_CB_NUKE, !CheckInventory("c_NukeLaunched") && CheckInventory("f_allownuke"));
	CMDBut_SetShowCond		(FP_CB_NUKE_IT_NOW, !CheckInventory("c_NukeLaunched") && CheckInventory("f_allownuke"));
	CMDBut_SetEvent			(FP_CB_NUKE_IT_NOW,  CMDEVT_SCRIPT_NUKE);
	CMDBut_SetAccessCond 	(FP_CB_NUKE, Tech_IsDoneC(TECH_NUKESY) && Tech_IsDoneC(TECH_ARMORY_ARMS2),
								"Requires Arms 2 and the Nuke Sylo...");
	*/
}


function str CMDBut_GetName(int w){		return CMDBut_List[w][0];}
function str CMDBut_GetDesc(int w){		return CMDBut_List[w][1];}
function str CMDBut_GetIcon(int w){		return CMDBut_List[w][2];}



//The condition to be activable.
function bool CMDBut_GetShowCond(int w){return CMDBut_List[w][4];} 
//Condition for showing the button.
function int CMDBut_GetPrice(int w){	return CheckInventory(CMDBut_List[w][5]);}
function bool CMDBut_GetAccessCond(int w){		return CMDBut_List[w][3];}
function bool CMDBut_GetIgnorePrice(int w){		return CMDBut_List[w][7];} 
function bool CMDBut_GetNoAccessReason(int w){	return CMDBut_List[w][6];} 
function int  CMDBut_GetEvent(int w){			return CMDBut_List[w][8];}
 //Condition to access to the action. (defaulting to price)

function void CMDBut_Add (int id, int evt, str lang){
	CMDBut_List[id][0] = strparam(l:strparam(s:"CBDATA_N_", s:lang)); // CHECK AT THE LANGUAGE FILE.
	CMDBut_List[id][1] = strparam(l:strparam(s:"CBDATA_D_", s:lang)); // CHECK AT THE LANGUAGE FILE.
	CMDBut_List[id][2] = strparam(l:strparam(s:"CBDATA_I_", s:lang)); // CHECK AT THE LANGUAGE FILE.
	CMDBut_List[id][3] = true;
	CMDBut_List[id][4] = true;
	CMDBut_List[id][5] = "null";
	CMDBut_List[id][6] = "You need x tech before this.";
	CMDBut_List[id][7] = false;
	CMDBut_List[id][8] = evt; // Command to do
}

function void CMDBut_Conds (int id, bool acond, bool scond, str price, str reason){
	CMDBut_List[id][3] = acond; 
	CMDBut_List[id][4] = scond;
	CMDBut_List[id][6] = reason;
	if(strLen(price) == 0)
		 CMDBut_List[id][5] = "null"; 
	else CMDBut_List[id][5] = strparam(s:"pr_cmd_",s:price); 
	// ^ It's already synched with the inventory gaven on the terminal.
}

function void CMDBut_SetEvent(int id, int event_id){
	CMDBut_List[id][8] = event_id;
}

function void CMDBut_SetShowCond(int id, bool cond){
	CMDBut_List[id][4] = cond;
}

function void CMDBut_SetPrice(int id, int pricekey){
	if(strLen(pricekey) == 0){
		 CMDBut_List[id][5] = "null"; 
		 CMDBut_List[id][7] = true;
	}
	else{
		CMDBut_List[id][5] = strparam(s:"pr_cmd_",s:pricekey); 
		CMDBut_List[id][7] = false;
	}
}

function void CMDBut_SetIgnorePrice(int w, int res){ CMDBut_List[w][7] = res;} 

function void CMDBut_SetAccessCond(int id, bool cond, str why_not_reason){
	CMDBut_List[id][3] = cond;
	CMDBut_List[id][6] = why_not_reason;
}

///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// fc_Construction.acs
// building construction functions
#library "fc_Const"

#import "f_tip.acs"
#import "fp_ptdir.acs"
#import "f_IntDB.acs"
#import "fl_techs.acs"
#include "zcommon.acs"


Script "SFPlus_BuildStructure" (int which){
	
	// Setup times.
	int time = 1;
	int build_progtip = 0;
	// Lock the techs, as they're being builded right now.
	switch(which){
		case 1: 
			Tech_Set(TECH_GENLAB, TECHF_LOCK); time = 5; 
			build_progtip = FP_PTID_GENLAB;
		break;
		case 2: Tech_Set(TECH_ARMORY, TECHF_LOCK); time = 5; 
			build_progtip = FP_PTID_ARMORY;
		break;
		case 3: Tech_Set(TECH_MECHFA, TECHF_LOCK); time = 10; 
			build_progtip = FP_PTID_MECHFA;
		break;
		case 4: Tech_Set(TECH_REFINE, TECHF_LOCK); time = 10; 
			build_progtip = FP_PTID_REFINE;
		break;
		case 5: Tech_Set(TECH_MARCOM, TECHF_LOCK); time = 15; 
			build_progtip = FP_PTID_MARCOM;
		break;
		case 6: Tech_Set(TECH_NUKESY, TECHF_LOCK); time = 30; 
			build_progtip = FP_PTID_NUKESY;
		break;
		default: log(s:"(SFPlus_BuildStructure): Invalid Structure."); terminate; break;
	}
	
	// Run the timer.
	int slot = Notify_QueueFreeSpace(); // Allocate a new space for the notifier
	ACS_NamedExecuteAlways("SFPlus_ProgressScript",0, build_progtip, time, slot);// Call the progress script.
	do{ delay(1); }while (p_TipProcess[slot]); // Wait for it.
	
	//Then, build!
	switch (which) {
		case 1: acs_execute(200, 0, 0, 0, 0); break;
		case 2: acs_execute(250, 0, 0, 0, 0); break;
		case 3: acs_execute(300, 0, 0, 0, 0); break;
		case 4: acs_execute(350, 0, 0, 0, 0); break;
		case 5: acs_execute(400, 0, 0, 0, 0); break;
		case 6: acs_execute(450, 0, 0, 0, 0); break;
	}
}

// line construction
function void c_LineSet (int lineid, str texture, int tex_side, int trans, int trans_add)
{
	if (texture != "")
	{
		if (tex_side == 0)		setlinetexture (lineid, SIDE_FRONT, TEXTURE_MIDDLE, texture);
		if (tex_side == 1)		setlinetexture (lineid, SIDE_BACK, TEXTURE_MIDDLE, texture);
		
		if (tex_side == 3)
		{
			setlinetexture (lineid, SIDE_FRONT, TEXTURE_MIDDLE, texture);
			setlinetexture (lineid, SIDE_BACK, TEXTURE_MIDDLE, texture);
		}
	}
	
	// make the line transparent
	if (trans > 0)		translucentline (lineid, trans, trans_add);
	
	// turn blocking on
    setlineblocking(lineid, BLOCK_EVERYTHING);
}
// sector construction
function void c_Construct (int tag, int lightlevel, int floorup, int ceilingdown, str floortex, str ceilingtex, str spec)
{
    if (lightlevel > 0)			light_changetovalue	(tag, lightlevel);
    if (floorup > 0)				floor_raisebyvalue (tag, c_ConstructSpeed, floorup);
    if (ceilingdown > 0)			ceiling_lowerbyvalue (tag, c_ConstructSpeed, ceilingdown);
    if (floortex != "")			changefloor (tag, floortex);
    if (ceilingtex != "")		changeceiling (tag, ceilingtex);
}

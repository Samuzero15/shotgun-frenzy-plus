///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_PHUD.acs
// players heads up display
#library "f_PHUD"

#import "f_IntDB.acs"
#include "zcommon.acs"
#include "acsutils.acs"

// ************** CLIENTSIDE HUDMESSAGE SCRIPTS ************** 

script "PlayerHUd_ClearDisconnect" (int a) DISCONNECT{
	// Clear the vision for the quitter
	FullHud_Hide();
}

function void FullHud_Hide(void){
	ClearHudMessage(80);
	ClearHudMessage(88);
	ClearHudMessage(89);
	ClearHudMessage(90);
	ClearHudMessage(91);
	ClearHudMessage(87);
	ClearHudMessage(86);
	ClearHudMessage(85);
	ClearHudMessage(84);
	ClearHudMessage(180);
	ClearHudMessage(178);
	ClearHudMessage(92);
}

// display rank
script 604 (int l_Rank) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		ClearHudMessage(87);
		terminate;
	} 

	sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
	setfont("SMALLFNT");
	int x = 400.4;
	int y = 73.4;
	str rankTitle = "Rookie (1)";
	switch(l_Rank)
	{
		case 0:         rankTitle = "(1) Rookie (1)"; break;
		case 1:         rankTitle = "(2) Private (2)"; break;
		case 2:         rankTitle = "(3) Specialist (3)"; break;
		case 3:         rankTitle = "(4) Corporal (4)"; break;
		case 4:         rankTitle = "(5) Sergeant (5)"; break; 
		case 5:         rankTitle = "(6) Lieutenant (6)"; break;
		case 6:         rankTitle = "(7) Captain(7)"; break;
		case 7:         rankTitle = "(8) Major (8)"; break;
		case 8:         rankTitle = "(9)  Colonel (9)"; break;
		case 9:         rankTitle = "(10) Commander (10)"; break;
	}
	hudmessage(s:rankTitle; 0, 87, CR_CYAN, x, y, 1.0);
}

// display hud
script 605 (int l_Type) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		ClearHudMessage(90);
		terminate;
	} 
	sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
	setfont("HUD");
	hudmessage(s:"a"; 0, 90, 0, 0.1, 0.1, 1.0);
}

// *********************************************************** 

// demonic core attack message
script 616 (void)
{
	//If we're not in guardian wave or all batteries are down, don't let the demonic core get hurt.
	if (g_Status != 4)
	{
		SetActorProperty(109,APROP_Health,100000);
		sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
		setfont("BCOUNT");
		hudmessagebold(s:"a"; 1, 180, CR_Red, 0.1, 0.1, 3.0);
		setfont("BIGFONT");
		hudmessagebold(s:"DEMONIC CORE"; 1, 178, CR_Red, 570.0, 390.1, 3.0);
		setfont("SMALLFNT");
		hudmessagebold(s:"Core is invulnerable until\nall battery doors are down"; 1, 179, CR_White, 580.0, 420.1, 3.0);
	}
	else
	{
		sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
		setfont("BCOUNT");
		hudmessagebold(s:"a"; 1, 180, CR_Red, 0.1, 0.1, 3.0);
		setfont("BIGFONT");
		hudmessagebold(s:"DEMONIC CORE"; 1, 178, CR_Red, 570.0, 390.1, 3.0);
		setfont("SMALLFNT");
		hudmessagebold(s:"Taking damage!\n",d:GetActorProperty(109,APROP_Health),s:" Health remaining..."; 1, 179, CR_White, 580.0, 420.1, 3.0);
	}
}

Script "SFPlus_ShowForEveryone_Enter" Enter{
	NamedExecuteClientScript("SFPlus_ShowForEveryone", PlayerNumber());
}

script "SFPlus_ShowForEveryone_Disconnect" (int player) DISCONNECT
{
	if (PlayerIsSpectator(player)){
		SetActivatorToPlayer(player);
		//log(s:"Sex");
		NamedExecuteClientScript("SFPlus_ShowForEveryone", PlayerNumber());
	}	
}

Script "SFPlus_ShowForEveryone" OPEN ClientSide
{
	SetActivatorToPlayer(ConsolePlayerNumber());
	int gametype_, kills, status, time_tics,
		guardian_state, monsters_left, guardian_timer,
		credits, next_range, exp, deaths, ups,
	 	streak, histreak, msstreak, corehp, teamcredits, commander, ranknow, nuke_launched, mechtimer, survprogress;
	while(1){
		gametype_ = CheckInventory("HUD_Gametype"),
		kills = CheckInventory("HUD_Kills"),
		status = CheckInventory("HUD_Sector"),
		time_tics = CheckInventory("HUD_GameTimer"),
		guardian_state = CheckInventory("HUD_GuardianState"),
		monsters_left = CheckInventory("HUD_MonstersLeft"),
		guardian_timer = CheckInventory("HUD_GuardianTimer");
		nuke_launched = CheckInventory("HUD_NukeLaunched");
		survprogress = CheckInventory("HUD_SurvProgress");
		/*
		log(s:"gametype: ", d:gametype_);
		log(s:"kills: ", d:kills);
		log(s:"status: ", d:status);
		log(s:"time_tics: ", d:time_tics);
		log(s:"guardian_state: ", d:guardian_state);
		log(s:"monsters_left: ", d:monsters_left);
		log(s:"guardian_timer: ", d:guardian_timer);
		*/
		

		if (f_UseScoreSystem == 1)
			Acs_NamedExecuteAlways("HUD_ShowTeamScore", 0, kills);
		
		if(gametype_ == INTDB_GAMETYPE_COMBATFRENZY || gametype_ == INTDB_GAMETYPE_SHOTGUNFRENZY){
			if(status != 0){
				if(time_tics > 0 || nuke_launched == 1)
					Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 1, time_tics, nuke_launched);
				else {
					switch(guardian_state){
						case INTDB_GUARDIANSTATE_STANDBY:
							Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 1, guardian_timer);
						break;
						case INTDB_GUARDIANSTATE_PREPARED: 
							Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 2, monsters_left);
						break;
						case INTDB_GUARDIANSTATE_ATTACK: 
							Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 3);
						break;
						case INTDB_GUARDIANSTATE_DEFEAT:
							Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 2, monsters_left);
						break;
					}	
				}
			}

		}else if (gametype_ == INTDB_GAMETYPE_SURVIVALDEFENDER){
			if((survprogress != 0) && monsters_left != 9999)
				Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 5, survprogress);
			else if (monsters_left == 9999)
				Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 4);
			else if(monsters_left > 0)
				Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 2, monsters_left);
			else 
				Acs_NamedExecuteAlways("HUD_ShowGameProgress", 0, 0);
		}

		if(!PlayerInGame(ConsolePlayerNumber())){
			int specOnPlayCam = CheckPlayerCamera(ConsolePlayerNumber()) >= 990 && CheckPlayerCamera(ConsolePlayerNumber()) < 1022;
			int PlayerTIDCam = CheckPlayerCamera(ConsolePlayerNumber());
			//log(s:"Now specing actor: ", d:PlayerTIDCam);
			if(specOnPlayCam){
				credits = CheckActorInventory(PlayerTIDCam, "HUD_Credits");
				ups = CheckActorInventory(PlayerTIDCam, "HUD_Ups");
				next_range = CheckActorInventory(PlayerTIDCam, "HUD_NextRange");
				exp = CheckActorInventory(PlayerTIDCam, "HUD_Exp");
				streak = CheckActorInventory(PlayerTIDCam, "HUD_Streak");
				histreak = CheckActorInventory(PlayerTIDCam, "HUD_HiStreak");
				msstreak = CheckActorInventory(PlayerTIDCam, "HUD_MsStreak");
				mechtimer = CheckActorInventory(PlayerTIDCam, "HUD_MechTime");
				corehp = CheckActorInventory(PlayerTIDCam, "HUD_CoreHP");
				status = CheckActorInventory(PlayerTIDCam, "HUD_Sector");
				teamcredits = CheckActorInventory(PlayerTIDCam, "HUD_TeamCredits");
				commander = CheckActorInventory(PlayerTIDCam, "HUD_Commander");
				ranknow = CheckActorInventory(PlayerTIDCam, "HUD_RankNow");
				kills = next_range - exp;

				sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
        		acs_executealways(605, 0, 0, 0, 0);

				// mmm: add kills left display
				if (kills < 0)
				kills = 0;
				
				// hud information
				setfont("SMALLFNT");
				Acs_NamedExecuteAlways("Hud_ShowPlayerStats", 0, credits, ups, deaths);
				Acs_NamedExecuteAlways("Hud_ShowPlayerStats_Streak", 0, streak, histreak, msstreak);

				if(status == 5) 						   Acs_NamedExecuteAlways("Hud_ShowCoreHealth", 0, 5, corehp);
				else if (nuke_launched == 0 || status < 4) Acs_NamedExecuteAlways("Hud_ShowCoreHealth", 0, status, corehp);
				else if(nuke_launched == 1 || status == 4) Acs_NamedExecuteAlways("Hud_ShowCoreHealth", 0, 4, corehp);
				
				// team credits and mech status (if a commander based game)
				if (gametype_ == INTDB_GAMETYPE_SHOTGUNFRENZY){
				Acs_NamedExecuteAlways("Hud_ShowTeamCredits_MechInfo", 0,
										teamcredits, commander, mechtimer);
				}								
				//log(d:p_MechTimer[playernumber()]);
				// current rank
				acs_executealways(604, 0, ranknow, 0, 0);
				
				// Rank Bar.
				Acs_NamedExecuteAlways("Hud_ShowExperienceBar", 0, kills * 20, next_range, exp);
			}else{

			}
		}

		delay(3);
	}
}

script "HUD_ShowGameProgress" (int showtype, int value, int nuke_launched) clientside {
	//if(consolePlayerNumber() == PlayerNumber()){
		setfont("DBIGFONT");
		sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
		str string = "";
		int color = CR_CYAN;
		switch (showtype){
			case 0: string = "READY"; color = CR_WHITE;  break;
			case 1: string = strparam(s:PlayHUD_TimerEX(value)); break;
			case 2: string = strparam(d:value, s:" Left"); color = CR_ORANGE;  break;
			case 3: string = "WAIT"; color = CR_WHITE; break;
			case 4: string = "DONE"; color = CR_GREEN; break;
			case 5: string = strparam(d:value, s:" %"); break;
		}

		if(nuke_launched == 1) color = CR_ORANGE;

		hudmessage(s:string; 1, 255, color, 400.0, 28.1, 7.0);
		setfont("SMALLFNT");
	//}
}

script "SFPlus_PlayerFullScreenHUD_Sync" ENTER
{
    // display loop
    while(playerInGame(PlayerNumber()))
    {
		ACS_NamedExecuteAlways("SFPlus_SyncWithSBARINFO", 0, p_RankExp[p_Rank[playernumber()] + 1] - p_Exp[playernumber()]);
		delay(7);
    }
}  

script "SFPlus_PlayerTimers_Sync" ENTER
{
    // display loop
    while(playerInGame(PlayerNumber()))
    {
		SetInventory("HUD_GameTimer", g_GameTimer);
		SetInventory("HUD_GuardianTimer", g_GuardianTimer);
		delay(3);
    }
}  

script "SFPlus_PlayerFullScreenHUD" ENTER ClientSide 
{
    // display loop
	int credits, kills, next_range, exp, deaths, ups,
	 streak, histreak, msstreak, mechtimer, corehp, 
	 status, teamcredits, commander, ranknow, game_type, nuke_launched;
    while(playerInGame(PlayerNumber()) && consolePlayerNumber() == PlayerNumber() && ConsolePlayerNumber() >= 0)
    {
		credits = CheckInventory("HUD_Credits");
		ups = CheckInventory("HUD_Ups");
		next_range = CheckInventory("HUD_NextRange");
		exp = CheckInventory("HUD_Exp");
		deaths = CheckInventory("HUD_Deaths");
		streak = CheckInventory("HUD_Streak");
		histreak = CheckInventory("HUD_HiStreak");
		msstreak = CheckInventory("HUD_MsStreak");
		mechtimer = CheckInventory("HUD_MechTime");
		corehp = CheckInventory("HUD_CoreHP");
		status = CheckInventory("HUD_Sector");
		teamcredits = CheckInventory("HUD_TeamCredits");
		commander = CheckInventory("HUD_Commander");
		ranknow = CheckInventory("HUD_RankNow");
		nuke_launched = CheckInventory("HUD_NukeLaunched");
		game_type = CheckInventory("HUD_Gametype");
		kills = next_range - exp;
		
		if(getCvar("screenblocks") == 12 || getCvar("screenblocks") < 11 || CheckInventory("SamuTInv_UsingTerminal")){
			//[Samu] Hide the damn hud, ets annoying.
			FullHud_Hide();
			delay(1);
			continue;
		}
        // hud background
        sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
        acs_executealways(605, 0, 0, 0, 0);

        // mmm: add kills left display
        if (kills < 0)
          kills = 0;
        
        // hud information
        setfont("SMALLFNT");
		Acs_NamedExecuteAlways("Hud_ShowPlayerStats", 0, credits, ups, deaths);
		Acs_NamedExecuteAlways("Hud_ShowPlayerStats_Streak", 0, streak, histreak, msstreak);

		if(status == 5)
		{
			Acs_NamedExecuteAlways("Hud_ShowCoreHealth", 0,
				5, corehp);
		}
		else if (nuke_launched == 0 || status < 4)
        {
		Acs_NamedExecuteAlways("Hud_ShowCoreHealth", 0, status, corehp);
        }
        else if(nuke_launched == 1 || status == 4)
        {
			Acs_NamedExecuteAlways("Hud_ShowCoreHealth", 0, 4, corehp);
		}
		
	
        
        // team credits and mech status (if a commander based game)
        if (game_type == 1){
          Acs_NamedExecuteAlways("Hud_ShowTeamCredits_MechInfo", 0,
								teamcredits, commander, mechtimer);
		}								
        //log(d:p_MechTimer[playernumber()]);
        // current rank
        acs_executealways(604, 0, ranknow, 0, 0);
		
		// Rank Bar.
		Acs_NamedExecuteAlways("Hud_ShowExperienceBar", 0, kills * 20, next_range, exp);
        
		
        delay(1);
    }
}   

script "Hud_ShowCoreHealth" (int which, int hp) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		ClearHudMessage(88);
		ClearHudMessage(80);
		terminate;
	}
	if(which > 0){
		sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
		setfont("SMALLFNT");
		int maxhp, percent, color;
		if (hp < 0) hp = 0;
		
		if(which == 5){
			maxhp = 1500;
			hudmessage(s:"\nCore: ", d:hp; 0, 88, CR_CREAM, 515.1, 10.1, 1.0);
		}else if (which == 4){
			maxhp = 1500;
			hudmessage(s:"\nSector: ", d:which, s:"\nCore: ",
              d:hp; 0, 88, CR_CREAM, 515.1, 10.1, 1.0);
		}else{
			maxhp = 750;
			hudmessage(s:"\nSector: ", d:which,s:"\nBattery: ", 
					d:hp; 0, 88, CR_CREAM, 515.1, 10.1, 1.0);
		}
		setfont("DBIGFONT");	
		percent = iceil(fixedDiv(hp, maxhp) * 100);
		if(percent >= 100) 						color = CR_CYAN;
		else if(percent >= 75 && percent < 100) color = CR_GREEN;
		else if(percent >= 50 && percent < 75)  color = CR_YELLOW;
		else if(percent >= 25 && percent < 50) 	color = CR_ORANGE;
		else if(percent >  0  && percent < 25) 	color = CR_RED;
		else 									color = CR_BLACK;
		hudmessage(d:percent, s:" %"; 0, 80, color, 545.1, 40.1, 1.0);
	}else{ ClearHudMessage(88); ClearHudMessage(80); }
} 

script "Hud_ShowPlayerStats" (int credits, int exp, int deaths) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		ClearHudMessage(89);
		terminate;
	}
	sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
		setfont("SMALLFNT");
		
		hudmessage(s:"\nCredits: \cf", d:credits,
          s:"\c-\nUp. Pts: \cv", d:exp,
          s:"\c-\n# Deaths: \cg", d:deaths; 0, 89, CR_CREAM, 164.1, 10.1, 1.0);
} 

script "Hud_ShowPlayerStats_Streak" (int ksnow, int kshigh, int ms) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		ClearHudMessage(85);
		terminate;
	}
	sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
	setfont("SMALLFNT");
	hudmessage(s:"\n\n\n\nK. Streak:\ci ", d:ksnow, s:"\n\c-Hi:\ci ", d:kshigh, s:"\c- MS: \ci",d:ms; 0, 85, CR_CREAM, 164.1, 10.1, 1.0);
} 

function str PlayHUD_Timer(int tics){
	int min_i = ((tics + 35) / (35*60)) % 60;
	int sec_i = ((tics + 35) / 35)		% 60;
	str min_s = min_i > 0 ? strparam(d:min_i, s:" m") : "";
	return StrParam(s:min_s,s:" ",d:sec_i, s:" s");
}

function str PlayHUD_TimerEX(int tics){
	int min_i = ((tics) / (35*60)) % 60;
	int sec_i = ((tics) / 35)		% 60;
	int milisecs = fixedMul(fixedDiv((tics%35)<<16, 35.0),10.0)>>16;
	str min_s = min_i > 0 ? strparam(d:min_i, s:" : ") : "";
	str tics_s = min_i < 1 ? strparam(s:".", d:milisecs) : "";
	str sec_s = sec_i < 10 && min_i >= 1 ? strparam(s:"0", d:sec_i) : strparam(d:sec_i);
	str color = "";
	if(min_i < 1){
		color = "\cf";
		if(sec_i < 30 && sec_i >= 20) 		color = "\ck";
		else if(sec_i < 20 && sec_i >= 10) 	color = "\ci";
		else if(sec_i < 10) 				color = "\cg";
	} 
	
	return StrParam(s:color, s:min_s, s:sec_s, s:tics_s);
}

function str PlayHUD_MechStatus(int mech_tics){
	str mech_string = "\n\nMech Status:";
	int mechstate = CheckInventory("Hud_MechState");
	int specCam = CheckPlayerCamera(ConsolePlayerNumber());
	if(PlayerIsSpectator(ConsolePlayerNumber()) && (specCam != 0)){
		mechstate = CheckActorInventory(specCam, "Hud_MechState");
	}

	if(mechstate == 2){
		mech_string = StrAdd(mech_string, "\n\ciManuvering");
	}else if(mechstate == 0){
		mech_string = "";
	}else{
		mech_string = StrAdd(mech_string, cond(mech_tics,
			StrAdd("\n\crRepairing\cj\n", PlayHUD_Timer(mech_tics)),
			"\n\cvPrepared"));
	} 
	return mech_string;
}

script "HUD_ShowTeamScore" (int points) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")){
		ClearHudMessage(256);
		terminate;
	}
	setfont("SMALLFNT");
	sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
	hudmessage(s:"Team score: ",d:points; 1, 256, CR_TAN, 400.0, 18.1, 7.0);
}

script "Hud_ShowTeamCredits_MechInfo" (int teamcredits, int commander, int mech_tics) clientside
{	// Shows the team credits, and the current status about the mech.
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		/*
		if(CheckInventory("SamuTInv_UsingTerminal")) //log(s:"Player is using terminal");
		if(getCvar("screenblocks") == 12) //log(s:"Player is on no HUD mode");
		if(getCvar("screenblocks") != 11) //log(s:"Player is in standard hud mode");
		*/
		ClearHudMessage(86);
		terminate;
	}
	str com = cond(commander == 99, "\n\cg-- No Comm. --", strparam(s:"\n Com: ", n:commander+1));

	sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
	setfont("SMALLFNT");
	hudmessage(s:"Team Credits: ", d:teamcredits, 
		s:com,s:"\n",
		s:PlayHUD_MechStatus(Mech_tics); 0, 86, CR_CREAM, 400.4, 8.1, 1.0);
} 

script "Hud_ShowExperienceBar" (int kills, int rankexp, int currentkills) clientside
{
	if((getCvar("screenblocks") == 12 || getCvar("screenblocks") != 11) || CheckInventory("SamuTInv_UsingTerminal")) {
		ClearHudMessage(91);
		ClearHudMessage(92);
		ClearHudMessage(84);
		terminate;
	}
	sethudsize(SFHUD_WIDTH, SFHUD_HEIGHT, 1);
	setfont("EXP01");
	hudmessage(s:"a"; 0, 92, 0, 0.1, 0.1, 1.0);
	if(rankexp > 0) {
		SetHudClipRect(0, 0, 143 + (FixedMul(FixedDiv(currentkills << 16, rankexp << 16),500.0) >> 16), 480);
		setfont("EXP20");
		hudmessage(s:"a"; 0, 91, 0, 0.1, 0.1, 1.0);
		SetHudClipRect(0, 0, 0, 0);
	}
	
	setfont("SMALLFNT");
	sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
	hudmessage(s:"< ",d:currentkills, s:" / ", d:rankexp,s:" >"; 0, 84, CR_CYAN, 400.4, 82.4, 1.0);
}

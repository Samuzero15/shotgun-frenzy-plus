///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_StokP.acs
// health and ammo stock pad setup

#library "f_StokP"

#import "f_IntDB.acs"
#import "fl_techs.acs"
#import "f_Tip.acs"

#include "zcommon.acs"
#include "acsutils.acs"
#include "samu_tools.acs"

#libdefine RESTOCK_HEALTHPAD 1
#libdefine RESTOCK_AMMOPAD 2
#libdefine RESTOCK_HEALTH 4
#libdefine RESTOCK_AMMO 3
#libdefine RESTOCK_HEALTHDISP -3
#libdefine RESTOCK_AMMODISP -2
#libdefine RESTOCK_REFRESH -1
#libdefine RESTOCK_AMMOSPHERE -4

// a player walks onto a stock pad
script 106 (int l_Type, int l_Give, int l_DisableFlash)
{//Healing and stocking pads
	
	if(l_type > 0) ACS_NamedExecute("SFPlus_ShowUpgrades", 0); // All the reminders wrapped up
	
	int hp = getActorProperty(0, APROP_Health);
	bool bodyEnhance = CheckInventory("PlayUp_BodyEnhancement");
	bool health1 = Tech_IsDone(TECH_GENLAB_HEALTH1);
	bool health2 = Tech_IsDone(TECH_GENLAB_HEALTH2);
	bool adrenaline = Tech_IsDone(TECH_GENLAB_SPEEDB);
	bool resister = Tech_IsDone(TECH_GENLAB_RESISB);
	bool armorTech = Tech_IsDone(TECH_GENLAB_ARMOR);
	
    if ((l_Type == RESTOCK_HEALTHPAD && Tech_IsDone(TECH_GENLAB)) || (l_Type == RESTOCK_HEALTH))
    {
		
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"Exit the tank (Mech Factory or hold Use for 1 second) to heal it!");
			terminate;
		}

		int healthboost = 20*health1 + 20*health2 + 60*bodyEnhance;
		int speedboost = 0.3*adrenaline + 0.2*bodyEnhance;
		int defenseboost = 0.3*resister + 0.2*bodyEnhance;
		
		if (l_DisableFlash == 0){
		 f_CenterTip("Health Restocked!");
		 fadeto(0, 0, 255, 0.5, 0.0);
		 localambientsound("p/heal", 128);
		}		
		
		// check for genetics lab updates
		if (l_Give > 0)
		{
			if (armorTech){
				// [Samu] Preventing Armor Overrides.
				if(CheckInventory("BasicArmor") == 0) {takeInventory("Flag_BlueArmor", 1);takeInventory("Flag_RedArmor", 1);}
				
				if(CheckInventory("BasicArmor") < 100 && !(CheckInventory("Flag_BlueArmor") || !CheckInventory("Flag_RedArmor"))){
					giveinventory("SteelPlatingArmor", 1);
				}
				// steel plating
			}
			//if (Tech_IsDone(TECH_GENLAB_RESISB))        giveinventory("Upgrade_Resister", 1);       // resister unit
			if (Tech_IsDone(TECH_GENLAB_REGENB))        giveinventory("Upgrade_Asorber", 1);  // asorber unit
			
			
			/*
			log(s:"============================");
			log(s:"Before...\n",
			s:"MaxHP: ", d:getActorProperty(0,APROP_SpawnHealth), s:"\n",
			s:"Speed Factor: ", f:getActorProperty(0,APROP_Speed),s:"\n",
			s:"Damage Factor:", f:getActorProperty(0,APROP_DamageFactor));
			*/

			int stimul = CheckInventory("StimUp_Stimulant");
			int coffie = CheckInventory("StimUp_Caffeine");
			
			// Do all calculations depending on the researches and unit upgrades.
			//Apply da techs!
			setactorproperty(0, APROP_SPEED, 1.0 + speedboost + 0.1*coffie*CheckInventory("StimUp_CaffeinePower"));  		
			
			setactorproperty(0, APROP_SpawnHealth, 100 + healthboost + 20*stimul*CheckInventory("StimUp_StimulantPower"));
			giveinventory("Health", 100 + healthboost + 10*stimul*CheckInventory("StimUp_StimulantPower"));
			SetInventory("HUD_MaxHp", 1 + 1*health1 + 1*health2 + 3*bodyEnhance);
			
			setactorproperty(0, APROP_DamageFactor,1.0 - defenseboost);
		}
		
		delay(2);
		if (l_DisableFlash == 0)		fadeto(0, 0, 255, 0.0, 0.2);
    }
    
    // ammo stock pad
    if ((l_Type == RESTOCK_AMMOPAD && Tech_IsDone(TECH_ARMORY)) || (l_Type == RESTOCK_AMMO))
    {
		
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
	
		//[Samu] *sigh* It's time to refactor deez sheet.
			//Bullets
			if(l_Give > 0){
			 if (Tech_IsDone(TECH_ARMORY_GNADES))
				GiveInventory("Inventory_HandGrenade", 5);
			 if (Tech_IsDone(TECH_GENLAB_STIMPK))
				SetInventory("Inventory_Stimpack", 5 + CheckInventory("StimUp_Amount"));
			 if (Tech_IsDone(TECH_ARMORY_BOOMRN)) 
				giveinventory("Upgrade_Boomshot", 1);   // boomshot rounds
             if (Tech_IsDone(TECH_ARMORY_AMMOBP)) 
				giveinventory("Backpack", 1);           // backpack
			
			 if(checkInventory("p_backpack")){ // Grants it some more ammo.
				ACS_NamedExecuteAlways("PersonalBP_Expand", 0);
			 }
			 delay(1);
			 Stock_FillAmmo(1);
			 
			}
			
            if (l_DisableFlash == 0){
			 f_CenterTip("Ammo Restocked!");
             fadeto(0, 255, 0, 0.5, 0.0);
             localambientsound("p/deploy", 128);
			}
            
            delay(2);
            if (l_DisableFlash == 0)		fadeto(0, 255, 0, 0.0, 0.2);
    }
	
	//[Samu] A customized refresh-me-up.
	if(l_Type == RESTOCK_REFRESH){
		// Do Heal and Stock the player, but do not give the latest techs.
		
		giveinventory("Health", 100 + healthboost);
		
		Stock_FillAmmo(1);
			 
		if (l_DisableFlash == 0){
			 f_CenterTip("You feel good as new!");
             fadeto(255, 255, 255, 0.5, 0.0);
			 localambientsound("p/heal", 128);
             localambientsound("p/deploy", 128);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(255, 255, 255, 0.0, 0.2);
	}
	
	//Ammo dispenser's stocker.
	// A nerfed version of the dispenser, 
	// just to prevent the full stocking on anywhere of the map.
	if(l_type == RESTOCK_AMMODISP){
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
		Stock_FillAmmo(0);
			 
		if (l_DisableFlash == 0){
			 f_SmallTip ("Reloading...", cr_orange, 0);
             fadeto(0, 255, 0, 0.3, 0.0);
			 localambientsound("g/reloading", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 255, 0, 0.0, 0.1);
	}
	// Health dispenser's stocker.
	// A nerfed version of the dispenser, 
	// just to prevent the full healing on anywhere of the map.
	if(l_type == RESTOCK_HEALTHDISP){
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
		// [Samu] Expansive re-stock and armor repair upgrades for the players.
		int health_give = 10 + 15*CheckInventory("PlayUp_ExpansiveRestock");
		int armor = Checkinventory("BasicArmor");
		int armor_max = 100 + 100*CheckInventory("Flag_BlueArmor") + 200*CheckInventory("Flag_RedArmor");
		int armor_left = armor_max - armor;
		int armor_give = 5 + 15*CheckInventory("PlayUp_ArmorRepair") + 30*CheckInventory("PlayUp_ExpansiveRestock");
		giveinventory("Health", health_give);
			
		if(armor == 0 && armorTech && CheckInventory("PlayUp_ArmorRepair")){
			takeInventory("Flag_RedArmor", 1);
			takeInventory("Flag_BlueArmor", 1);
			GiveInventory("SteelPlatingArmor", 1);
			f_SmallTip ("Green Armor Granted!", cr_green, 3);
		}
		else if (armor < armor_max){
			if(armor_left < armor_give) armor_give = armor_left;
			giveinventory("ArmorBonus", armor_give);
			f_SmallTip ("Repairing...", cr_green, 3);
		}
		
		
		if (l_DisableFlash == 0){
			 f_SmallTip ("Healing...", cr_cyan, 1);
             fadeto(0, 0, 255, 0.3, 0.0);
			 localambientsound("g/healing", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 0, 255, 0.0, 0.1);
	}
	
	// Ammosphere's Restock.
	// Does not updates your techs.
	if(l_type == RESTOCK_AMMOSPHERE){
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
		Stock_FillAmmo(1);
			 
		if (l_DisableFlash == 0){
			 f_CenterTip("Ammo Restocked!");
             fadeto(0, 255, 0, 0.3, 0.0);
			 localambientsound("g/reloading", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 255, 0, 0.0, 0.1);
	}
}  

function void Stock_FillAmmo(bool full){

	if(full){
		GiveMaxInventory("Clip");
		GiveMaxInventory("ClipPistol");
		GiveMaxInventory("Shell");
		GiveMaxInventory("RocketAmmo");
		GiveMaxInventory("GLauncher_Ammo");
		GiveMaxInventory("Flinger_Ammo"); 
		GiveMaxInventory("Cell"); 
		GiveMaxInventory("Dualshot_Ammo"); 
		GiveMaxInventory("HeavyBullets"); 
		GiveMaxInventory("Gasoline");
		GiveMaxInventory("Supplies_Health"); 
		GiveMaxInventory("Supplies_Ammo"); 
		GiveMaxInventory("Supplies_Health_Big"); 
		GiveMaxInventory("Supplies_Ammo_big");
	}
	else{
		// [Samu] Expansive re-stock upgrades for the players.
		int extra_ammo = (1 + CheckInventory("PlayUp_ExpansiveRestock"));
		GiveInventory("Clip", 				10*extra_ammo);
		GiveInventory("ClipPistol",			10*extra_ammo);
		GiveInventory("Shell",				2*extra_ammo);
		GiveInventory("RocketAmmo",			2*extra_ammo);
		GiveInventory("GLauncher_Ammo",		2*extra_ammo);
		GiveInventory("Flinger_Ammo",		2*extra_ammo); 
		GiveInventory("Cell",				20*extra_ammo); 
		GiveInventory("Dualshot_Ammo",		15*extra_ammo); 
		GiveInventory("HeavyBullets",		40*extra_ammo); 
		GiveInventory("Gasoline",			20*extra_ammo);
	}
}

script "SFPlus_ShowUpgrades" (void) CLIENTSIDE{
	int s = 0;
	int c = 0;
	str uplvl;
	
	c = CR_CYAN;
	if (Tech_IsDoneC(TECH_GENLAB_HEALTH2))
		s = Stock_RemindUpgrade(s, c,true, "+ HUMAN GENETICS P2");
	else if (Tech_IsDoneC(TECH_GENLAB_HEALTH1)) 
		s = Stock_RemindUpgrade(s, c,true, "+ HUMAN GENETICS P1");
		
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_GENLAB_SPEEDB), "+ Adrenaline");
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_GENLAB_ARMOR), "+ Steel Plating");
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_GENLAB_RESISB), "+ Resister Unit");
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_GENLAB_REGENB), "+ Absorber Unit");
	
	c = CR_BLUE;
	s++;
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_BodyEnhancement"), 	"+ Body Enhancement");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_ExpansiveRestock"), "+ Expansive Restock");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_ArmorRepair"), 		"+ Armor Repair");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_PowUpUpgrade_1"), 	"+ Def. Powerup Upgrade");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_PowUpUpgrade_2"), 	"+ Atk. Powerup Upgrade");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_MechSync"), 		"+ Mech Syncronize");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_SpawnShield"), 		"+ Spawn Shield");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_HealCoins"), 		"+ Healing Coins");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_Prometeo"), 		"+ Prometeo Protocol");
	s = Stock_RemindUpgrade(s, c,CheckInventory("PlayUp_RuneSync"), 		"+ Rune Syncronize");

	c = CR_GREEN;
	s++;
	if (Tech_IsDoneC(TECH_ARMORY_ARMS2)) {
		s = Stock_RemindUpgrade(s, c,true, "+ Arms P2");
	}
	else if (Tech_IsDoneC(TECH_ARMORY_ARMS1)) {
		s = Stock_RemindUpgrade(s, c,true, "+ Arms P1");
	}
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_ARMORY_BOOMRN), "+ Boomshot Rounds");
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_ARMORY_AMMOBP), "+ Ammo Backpack");
	c = CR_DARKGREEN;
	s = Stock_RemindUpgrade(s, c,Tech_IsDoneC(TECH_GENLAB_STIMPK), "+ 10 Stimpacks");
	s = Stock_RemindUpgrade(s, c,
		CheckInventory("P_Backpack"), "+ Personal Backpack");
	
	c = CR_GOLD;
	s++;
	s = Stock_RemindUpgrade(s, c, Tech_IsDoneC(TECH_REFINE_PUMP1), "+ Processing Phase 1");
	s = Stock_RemindUpgrade(s, c, Tech_IsDoneC(TECH_REFINE_PUMP2), "+ Processing Phase 2");
	
	c = CR_WHITE;
	s++;
	uplvl = strparam(s:"+(M.Up) Nails Lv. ", d:CheckInventory("MechUp_Nails"));
	s = Stock_RemindUpgrade(s, c, CheckInventory("MechUp_Nails"), uplvl);
	uplvl = strparam(s:"+(M.Up) Rockets Lv. ", d:CheckInventory("MechUp_Rockets"));
	s = Stock_RemindUpgrade(s, c, CheckInventory("MechUp_Rockets"), uplvl);
	uplvl = strparam(s:"+(M.Up) Armor Lv. ", d:CheckInventory("MechUp_Armor"));
	s = Stock_RemindUpgrade(s, c, CheckInventory("MechUp_Armor"), uplvl);
	uplvl = strparam(s:"+(M.Up) Manuver Lv. ", d:CheckInventory("MechUp_Speed"));
	s = Stock_RemindUpgrade(s, c, CheckInventory("MechUp_Speed"), uplvl);
	uplvl = strparam(s:"+(M.Up) Auto Repair Lv. ", d:CheckInventory("MechUp_AutoRepair"));
	s = Stock_RemindUpgrade(s, c, CheckInventory("MechUp_AutoRepair"), uplvl);
	s = Stock_RemindUpgrade(s, c,CheckInventory("MechUp_LifeSave"), 		"+(M.Up) Life Saver");
	s = Stock_RemindUpgrade(s, c,CheckInventory("MechUp_SelfDestruct"), 	"+(M.Up) Self Destruct");
	s = Stock_RemindUpgrade(s, c,CheckInventory("MechUp_Efficiency"), 		"+(M.Up) Efficiency");
	
	s++;
	uplvl = strparam(s:"+(S.Up) Extra Dosis Lv.", d:CheckInventory("StimUp_ExtraDosis"));
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_ExtraDosis"), uplvl);
	uplvl = strparam(s:"+(S.Up) ", d:CheckInventory("StimUp_Amount"), s:" Stimpacks More");
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_Amount"), uplvl);
	uplvl = strparam(s:"+(S.Up) ", d:(10*CheckInventory("StimUp_Overhealth")), s:"% Overheal");
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_Overhealth"), uplvl);
	uplvl = strparam(s:"+(S.Up) 50% A.Repair Lv", d:(CheckInventory("StimUp_HardShell")));
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_HardShell"), uplvl);
	uplvl = strparam(s:"+(S.Up) Regen. Lv", d:(CheckInventory("StimUp_Cicatrizate")));
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_Cicatrizate"), uplvl);
	uplvl = strparam(s:"+(S.Up) ", d:(10*CheckInventory("StimUp_Caffeine")), s:"% Speed Up");
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_Caffeine"), uplvl);
	uplvl = strparam(s:"+(S.Up) ", d:(20*CheckInventory("StimUp_Stimulant")), s:" Max HP");
	s = Stock_RemindUpgrade(s, c, CheckInventory("StimUp_Stimulant"), uplvl);

	delay(17);
}

function int Stock_RemindUpgrade(int show_stack, int show_color, bool condition, str string){
	if(condition){
		int offset = show_stack * 10.0;
		int x = 600.1;
		int y = 100.1 + offset;
		int shineFlags = HUDMSG_FADEINOUT | HUDMSG_AddBlend;
		
		sethudsize(800, 600, s_ScreenSize[2]);
		setfont("CONFONT");
		hudmessage(s:string; shineFlags, 0, show_color, x, y, 0.2,0.15,0.15);
		hudmessage(s:string; HUDMSG_FADEOUT, 2020 + show_stack, show_color, x, y, 3.0, 0.5);
		return show_stack+1;
	}
	else {
		setfont("CONFONT");
		hudmessage(s:""; 0, 2020 + show_stack, show_color, 600.1, 100.1 + offset, 2.0);
	}
	return show_stack;
}

script "SFPlus_PrometeoScript" (void)
{
// Prometeo Script, Saves your life once (recharged at respawning).
// In addition, grants you a short invul and a x2 Damage multipler.
// If you use a berserk here, you could get a x6 Damage multipler!
// Even better, you could get a x12 Damage multipler if you upgrade the powerups!
// This shit is overpowered when used on the right time!
	if(CheckInventory("PlayUp_Prometeo_Used") ) Terminate;
	if(!CheckInventory("PlayUp_Prometeo_Ready")){
		GiveInventory("PlayUp_Prometeo_Ready", 1);
	} else terminate;
	SetPlayerProperty(0, 1, PROP_BUDDHA);
	while(GetActorProperty(0, APROP_Health) > 1){
		// Wait until the player is pinned down
		delay(1);
	} 
	SetPlayerProperty(0, 0, PROP_BUDDHA);
	setactorproperty(0, APROP_SpawnHealth, 50);
	GiveInventory("PlayUp_Prometeo_Used", 1);
	TakeInventory("PlayUp_Prometeo_Ready", 1);
	giveinventory("PlayUp_Prometeo_Activate", 1);
}
///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_StokP.acs
// health and ammo stock pad setup

#library "f_StokP"

#import "f_IntDB.acs"
#import "fl_techs.acs"
#import "f_Tip.acs"

#include "zcommon.acs"
#include "acsutils.acs"
#include "samu_tools.acs"

int show_stack = 0;
int show_color = CR_WHITE;
// a player walks onto a stock pad
script 106 (int l_Type, int l_Give, int l_DisableFlash)
{//Healing and stocking pads

	
	show_stack = 0;
	show_color = CR_CYAN;
    if ((l_Type == 1 && Tech_IsDone(FP_TECH_GENLAB)) || (l_Type == 4))
    {
		
		// display what has been researched to the player
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"Exit the tank (Mech Factory or hold Use for 1 second) to heal it!");
			terminate;
		}
		
		
		if (Tech_IsDone(FP_TECH_GENLAB_HEALTH2)) {
			RemindUpgrade(true, "+ HUMAN GENETICS P2");
		}
		else if (Tech_IsDone(FP_TECH_GENLAB_HEALTH1)) {
			RemindUpgrade(true, "+ HUMAN GENETICS P1");
		}
		RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_SPEEDB), "+ Adrenaline");
		RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_ARMOR), "+ Steel Plating");
		RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_RESISB), "+ Resister Unit");
		RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_REGENB), "+ Absorber Unit");
		RemindUpgrade(
			CheckInventory("PlayUp_BodyEnhancement"), "+ Body Enhancement");
		RemindUpgrade(
			CheckInventory("PlayUp_ExpansiveRestock"), "+ Expansive Restock");
		RemindUpgrade(
			CheckInventory("PlayUp_ArmorRepair"), "+ Armor Repair");
		RemindUpgrade(
			CheckInventory("PlayUp_PowUpUpgrade"), "+ Powerup Upgrade");
		RemindUpgrade(
			CheckInventory("PlayUp_MechSync"), "+ Mech Syncronize");
		RemindUpgrade(
			CheckInventory("PlayUp_SpawnShield"), "+ Spawn Shield");
		RemindUpgrade(
			CheckInventory("PlayUp_HealCoins"), "+ Healing Coins");
		RemindUpgrade(
			CheckInventory("PlayUp_Prometeo"), "+ Prometeo Protocol");
		RemindUpgrade(
			CheckInventory("PlayUp_RuneSync"), "+ Rune Syncronize");

		int hp = getActorProperty(0, APROP_Health);
		bool bodyEnhance = CheckInventory("PlayUp_BodyEnhancement");
		bool health1 = Tech_IsDone(FP_TECH_GENLAB_HEALTH1);
		bool health2 = Tech_IsDone(FP_TECH_GENLAB_HEALTH2);
		bool adrenaline = Tech_IsDone(FP_TECH_GENLAB_SPEEDB);
		bool resister = Tech_IsDone(FP_TECH_GENLAB_RESISB);
		bool armorTech = Tech_IsDone(FP_TECH_GENLAB_ARMOR);
		
		int healthboost = 20*health1 + 20*health2 + 60*bodyEnhance;
		int speedboost = 0.3*adrenaline + 0.2*bodyEnhance;
		int defenseboost = 0.3*resister + 0.2*bodyEnhance;
		
		if (l_DisableFlash == 0){
		 f_CenterTip("Health Restocked!");
		 fadeto(0, 0, 255, 0.5, 0.0);
		 localambientsound("p/heal", 128);
		}		
		
		// check for genetics lab updates
		if (l_Give > 0)
		{
			if (armorTech){
				// [Samu] Preventing Armor Overrides.
				if(CheckInventory("BasicArmor") == 0) {takeInventory("Flag_BlueArmor", 1);}
				
				if(CheckInventory("BasicArmor") < 100 && !CheckInventory("Flag_BlueArmor")){
					giveinventory("SteelPlatingArmor", 1);
				}
				// steel plating
			}
			//if (Tech_IsDone(FP_TECH_GENLAB_RESISB))        giveinventory("Upgrade_Resister", 1);       // resister unit
			if (Tech_IsDone(FP_TECH_GENLAB_REGENB))        giveinventory("Upgrade_Asorber", 1);  // asorber unit
			if (CheckInventory("PlayUp_Prometeo")) 
				ACS_NamedExecuteAlways("SFPlus_PrometeoScript", 0);
			
			
			/*
			log(s:"============================");
			log(s:"Before...\n",
			s:"MaxHP: ", d:getActorProperty(0,APROP_SpawnHealth), s:"\n",
			s:"Speed Factor: ", f:getActorProperty(0,APROP_Speed),s:"\n",
			s:"Damage Factor:", f:getActorProperty(0,APROP_DamageFactor));
			*/
			
			// Do all calculations depending on the researches and unit upgrades.
			//Apply da techs!
			setactorproperty(0, APROP_SPEED, 1.0 + speedboost);  		
			
			setactorproperty(0, APROP_SpawnHealth, 100 + healthboost);
			giveinventory("Health", 100 + healthboost);
			SetInventory("HUD_MaxHp", 1 + 1*health1 + 1*health2 + 3*bodyEnhance);
			
			setactorproperty(0, APROP_DamageFactor,1.0 - defenseboost);
		}
		
		delay(2);
		if (l_DisableFlash == 0)		fadeto(0, 0, 255, 0.0, 0.2);
    }
    
    // ammo stock pad
    if ((l_Type == 2 && Tech_IsDone(FP_TECH_ARMORY)) || (l_Type == 3))
    {
		
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
	
	show_color = CR_GREEN;
	show_stack = 14;
	// display what has been researched to the player
	if (Tech_IsDone(FP_TECH_ARMORY_ARMS2)) {
		RemindUpgrade(true, "+ Arms P2");
	}
	else if (Tech_IsDone(FP_TECH_ARMORY_ARMS1)) {
		RemindUpgrade(true, "+ Arms P1");
	}
	
	RemindUpgrade(Tech_IsDone(FP_TECH_ARMORY_BOOMRN), "+ Boomshot Rounds");
	RemindUpgrade(Tech_IsDone(FP_TECH_ARMORY_AMMOBP), "+ Ammo Backpack");
	RemindUpgrade(Tech_IsDone(FP_TECH_ARMORY_STIMPK), "+ 10 Stimpacks");
	RemindUpgrade(
		CheckInventory("P_Backpack"), "+ Personal Backpack");
	
		//[Samu] *sigh* It's time to refactor deez sheet.
			//Bullets
			if(l_Give > 0){
			 if (Tech_IsDone(FP_TECH_ARMORY_STIMPK))
				GiveInventory("Inventory_Stimpack", 10);
			 if (Tech_IsDone(FP_TECH_ARMORY_BOOMRN)) 
				giveinventory("Upgrade_Boomshot", 1);   // boomshot rounds
             if (Tech_IsDone(FP_TECH_ARMORY_AMMOBP)) 
				giveinventory("Backpack", 1);           // backpack
			
			 if(checkInventory("p_backpack")){ // Grants it some more ammo.
				ACS_NamedExecuteAlways("PersonalBP_Expand", 0);
			 }
			
			
			 GiveInventory("Clip", 9999);
			 GiveInventory("Shell", 9999);
			 
			 GiveInventory("RocketAmmo", 9999);
			 GiveInventory("GLauncher_Ammo", 9999);
			 GiveInventory("Flinger_Ammo", 9999);
			 
			 GiveInventory("Cell", 9999);
			
			 GiveInventory("Dualshot_Ammo", 9999);
			 GiveInventory("HeavyBullets", 9999);
			 Giveinventory("Gasoline", 9999);
			 
			 GiveInventory("Supplies_Health", 9999);
			 GiveInventory("Supplies_Ammo", 9999);
			 GiveInventory("Supplies_Health_Big", 9999);
			 GiveInventory("Supplies_Ammo_big", 9999);
			 GiveInventory("Shell", 9999);
			}
			
            if (l_DisableFlash == 0){
			 f_CenterTip("Ammo Restocked!");
             fadeto(0, 255, 0, 0.5, 0.0);
             localambientsound("p/deploy", 128);
			}
            
            delay(2);
            if (l_DisableFlash == 0)		fadeto(0, 255, 0, 0.0, 0.2);
    }
	
	//[Samu] A customized refresh-me-up.
	if(l_Type == -1){
		// Do Heal and Stock the player, but do not give the latest techs.
		
		giveinventory("Health", 100 + healthboost);
		
		GiveInventory("Clip", 9999);
		GiveInventory("Shell", 9999);
			 
		GiveInventory("RocketAmmo", 9999);
		GiveInventory("GLauncher_Ammo", 9999);
		GiveInventory("Flinger_Ammo", 9999);
			 
		GiveInventory("Cell", 9999);
			
		GiveInventory("Dualshot_Ammo", 9999);
		GiveInventory("HeavyBullets", 9999);
		Giveinventory("Gasoline", 9999);
		
		GiveInventory("Supplies_Health", 9999);
		GiveInventory("Supplies_Ammo", 9999);
		GiveInventory("Supplies_Health_Big", 9999);
		GiveInventory("Supplies_Ammo_big", 9999);
		GiveInventory("Shell", 9999);
			 
		if (l_DisableFlash == 0){
			 f_CenterTip("You feel good as new!");
             fadeto(255, 255, 255, 0.5, 0.0);
			 localambientsound("p/heal", 128);
             localambientsound("p/deploy", 128);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(255, 255, 255, 0.0, 0.2);
	}
	
	//Ammo dispenser's stocker.
	// A nerfed version of the dispenser, 
	// just to prevent the full stocking on anywhere of the map.
	if(l_type == -2){
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
		// [Samu] Expansive re-stock upgrades for the players.
		int extra_ammo = CheckInventory("PlayUp_ExpansiveRestock");
		
		GiveInventory("Clip", 			10 + 10*extra_ammo);
		GiveInventory("Shell", 			2 + 2*extra_ammo);
			 
		GiveInventory("RocketAmmo", 	2 + 2*extra_ammo);
		GiveInventory("GLauncher_Ammo", 2 + 2*extra_ammo);
		GiveInventory("Flinger_Ammo", 	2 + 2*extra_ammo);
			 
		GiveInventory("Cell", 			20 + 20*extra_ammo);
		Giveinventory("Gasoline", 		10 + 10*extra_ammo);
			
		GiveInventory("Dualshot_Ammo", 	15 + 15*extra_ammo);
		GiveInventory("HeavyBullets",	40 + 40*extra_ammo);
			 
			 /*[Samu] Oh fuck no... You're not gonna exploit this!
		GiveInventory("Supplies_Health", 9999);
		GiveInventory("Supplies_Ammo", 9999);
		GiveInventory("Supplies_Health_Big", 9999);
		GiveInventory("Supplies_Ammo_big", 9999);
			 */
			 
		if (l_DisableFlash == 0){
			 f_SmallTip ("Reloading...", cr_orange, 0);
             fadeto(0, 255, 0, 0.3, 0.0);
			 localambientsound("g/reloading", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 255, 0, 0.0, 0.1);
	}
	// Health dispenser's stocker.
	// A nerfed version of the dispenser, 
	// just to prevent the full healing on anywhere of the map.
	if(l_type == -3){
		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"You can't use these in a tank!");
			terminate;
		}
		// [Samu] Expansive re-stock and armor repair upgrades for the players.
		int health_give = 10 + 15*CheckInventory("PlayUp_ExpansiveRestock");
		int armor = Checkinventory("BasicArmor");
		int armor_max = 100 + 100*CheckInventory("Flag_BlueArmor");
		int armor_left = armor_max - armor;
		int armor_give = 5 + 15*CheckInventory("PlayUp_ArmorRepair") + 30*CheckInventory("PlayUp_ExpansiveRestock");
		giveinventory("Health", health_give);
			
		if(armor == 0 && armorTech && CheckInventory("PlayUp_ArmorRepair")){
			takeInventory("Flag_BlueArmor", 1);
			GiveInventory("SteelPlatingArmor", 1);
			f_SmallTip ("Green Armor Granted!", cr_green, 3);
		}
		else if (armor < armor_max){
			if(armor_left < armor_give) armor_give = armor_left;
			giveinventory("ArmorBonus", armor_give);
			f_SmallTip ("Repairing...", cr_green, 3);
		}
		
		
		if (l_DisableFlash == 0){
			 f_SmallTip ("Healing...", cr_cyan, 1);
             fadeto(0, 0, 255, 0.3, 0.0);
			 localambientsound("g/healing", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 0, 255, 0.0, 0.1);
	}
	
	// Some other tech reminders...
	show_stack = 20;
	show_color = CR_GOLD;
		
	RemindUpgrade(Tech_IsDone(FP_TECH_REFINE_PUMP1), "+ Processing Phase 1");
	RemindUpgrade(Tech_IsDone(FP_TECH_REFINE_PUMP2), "+ Processing Phase 2");
}  

function void RemindUpgrade(bool condition, str string){
	if(condition){
		show_stack++;
		int offset = show_stack * 10.0;
		
		sethudsize(800, 600, s_ScreenSize[2]);
		setfont("CONFONT");
		hudmessage(s:string; HUDMSG_TYPEON, 2020 + show_stack, show_color, 600.1, 100.1 + offset, 2.0);
	}
}

script "SFPlus_PrometeoScript" (void)
{
// Prometeo Script, Saves your life once (recharged at respawning).
// In addition, grants you a short invul and a x2 Damage multipler.
// If you use a berserk here, you could get a x6 Damage multipler!
// Even better, you could get a x12 Damage multipler if you upgrade the powerups!
// This shit is overpowered when used on the right time!
	if(CheckInventory("PlayUp_Prometeo_Used") ) Terminate;
	if(!CheckInventory("PlayUp_Prometeo_Ready")){
		GiveInventory("PlayUp_Prometeo_Ready", 1);
	} else terminate;
	SetPlayerProperty(0, 1, PROP_BUDDHA);
	while(GetActorProperty(0, APROP_Health) > 1){
		// Wait until the player is pinned down
		delay(1);
	} 
	SetPlayerProperty(0, 0, PROP_BUDDHA);
	GiveInventory("PlayUp_Prometeo_Used", 1);
	TakeInventory("PlayUp_Prometeo_Ready", 1);
	giveinventory("PlayUp_Prometeo_Activate", 1);
}
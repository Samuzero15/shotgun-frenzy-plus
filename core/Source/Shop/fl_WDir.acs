///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fl_ItemDir.acs
// item directory

// Here it lays all of the weapons on the game.
// For the prices, take a look at fl_price.

#library "fl_WDir"
#import "f_intDB.acs"
#import "fl_techs.acs"
#include "zcommon.acs"
#include "samu_tools.acs"

#libdefine FP_WEP_PACKS 10
#libdefine FP_WEAPONS 20
#libdefine FP_WEPUPS 2

#libdefine FP_BAS 1
#libdefine FP_ADV 2
#libdefine FP_OP 3

int fp_WpPacks[FP_WEP_PACKS][10];
int fp_Wpns[FP_WEAPONS][10];
int fp_WpUps[FP_WEAPONS][FP_WEPUPS][10];

// Weapon pack tracker. For difficulty increasing.
int fp_WpTrack[FP_WEP_PACKS];
int fp_UpTrack;

// Saved weapons per each player.
int fp_WpnsPerPlayer[32][FP_WEAPONS];

int fp_WeaponPackStack = 0;
int fp_WeaponStack = 0;

// fp_WeaponPacks
//	Pack name
//	Category (BAS, ADV, POW)
//  Description
// 	Buy Price

// fp_Wpns[wepaonid]:
//  Score Gain (To ramp-up difficulty.)
// 	Weapon Name
// 	Actor
// 	Pack id
//  Description
// 	Recycle Price (On Credits)

// fp_WeaponUpgrades[wepaonid]:
// 	Weapon Upgrade Name
// 	Actor
//  Description
// 	Upgrade Price (On Ups.)

function void SFPlus_DefineWeapons (void){
	int wep = 0;
	int pack = 0;
	int ups = 0;
	str string;
	
	fp_WeaponPackStack = 0;
	fp_WeaponStack = 0;
	
	//Basic pack
	wep = Weapon_AddLang("Beretta", -2, "", "BASIC_BRTT");
	WeaponUpgrade_AddLangP("Beretta_Dual",		wep, 1, "", "BASIC_BRTT_UP1");
	WeaponUpgrade_AddLangP("Beretta_SMG",		wep, 2, "", "BASIC_BRTT_UP2");

	wep = Weapon_AddLang("Boomstick", -1, "", "BASIC_BSTK");
	WeaponUpgrade_AddLangP("Boomstick_Full",		wep, 0, "boomstick", "BASIC_BSTK_UP0");

	//Shotgun pack
	pack = WeaponPack_AddLang(FP_BAS, "shotgun", 2, "SHOTGUN");

	wep = Weapon_AddLang("SSG", pack, "ssg", "SHOTGUN_SSG");
	WeaponUpgrade_AddLang("SSG_Autoload",		wep, 1, "SHOTGUN_SSG_UP1");
	WeaponUpgrade_AddLang("SSG_Explosive",		wep, 2, "SHOTGUN_SSG_UP2");
		
	wep = Weapon_AddLang("Quadshot", pack, "quadshot", "SHOTGUN_QUAD");
	WeaponUpgrade_AddLang("Quadshot_Full",		wep, 0, "SHOTGUN_QUAD_UP0");
		
	//Assault pack
	pack = WeaponPack_AddLang(FP_BAS, "assault", 2, "ASSAULT");

	wep = Weapon_AddLang("Spitter", pack, "spitter", "ASSAULT_SPIT");
	WeaponUpgrade_AddLang("Spitter_SSG",		wep, 1, "ASSAULT_SPIT_UP1");
	WeaponUpgrade_AddLang("Spitter_GLauncher",	wep, 2, "ASSAULT_SPIT_UP2");

	wep = Weapon_AddLang("Buckshot", pack, "buckshot", "ASSAULT_BUCK");
	WeaponUpgrade_AddLang("Buckshot_Chamber",	wep, 1, "ASSAULT_BUCK_UP1");
	WeaponUpgrade_AddLang("Buckshot_Explosive",	wep, 2, "ASSAULT_BUCK_UP2");
		
	//Support pack
	pack = WeaponPack_AddLang(FP_BAS, "support", 0, "SUPPORT");

	wep = Weapon_AddLang("Supplier", pack, "supplier", "SUPPORT_SUPP");
	WeaponUpgrade_AddLang("Supplier_Big",		wep, 0, "SUPPORT_SUPP_UP0");

	wep = Weapon_AddLang("Patcher", pack, "patcher", "SUPPORT_PTCH");
	WeaponUpgrade_AddLang("Patcher_Advanced",	wep, 0, "SUPPORT_PTCH_UP0");
		
	//Commando pack
	pack = WeaponPack_AddLang(FP_ADV, "commando", 5, "COMMANDO");

	wep = Weapon_AddLang("Repeater", pack, "repeater", "COMMANDO_REPE");
	WeaponUpgrade_AddLang("Repeater_DoubleSpeed",	wep, 1, "COMMANDO_REPE_UP1");
	WeaponUpgrade_AddLang("Repeater_BlastShells",	wep, 2, "COMMANDO_REPE_UP2");

	wep = Weapon_AddLang("Dualshot", pack, "dualshot", "COMMANDO_NAIL");
	WeaponUpgrade_AddLang("Dualshot_Razor",			wep, 1, "COMMANDO_NAIL_UP1");
	WeaponUpgrade_AddLang("Dualshot_FlakShells",	wep, 2, "COMMANDO_NAIL_UP2");
		
	//Explosive pack
	pack = WeaponPack_AddLang(FP_ADV, "heavy", 8, "EXPLOSIVE");

	wep = Weapon_AddLang("Launcher", pack, "launcher", "EXPLOSIVE_ROKT");
	WeaponUpgrade_AddLang("Launcher_Exploder",	wep, 1, "EXPLOSIVE_ROKT_UP1");
	WeaponUpgrade_AddLang("Launcher_Multi",		wep, 2, "EXPLOSIVE_ROKT_UP2");

	wep = Weapon_AddLang("Flinger", pack, "flinger", "EXPLOSIVE_FLIN");
	WeaponUpgrade_AddLang("Flinger_Expander",	wep, 1, "EXPLOSIVE_FLIN_UP1");
	WeaponUpgrade_AddLang("Flinger_MinePlacer",	wep, 2, "EXPLOSIVE_FLIN_UP2");
		
	//Plasmatic pack
	pack = WeaponPack_AddLang(FP_ADV, "heavy", 8, "PLASMA");

	wep = Weapon_AddLang("Plasmagun", pack, "plasmagun", "PLASMA_PLSG");
	WeaponUpgrade_AddLang("Plasmagun_Spread",	wep, 1, "PLASMA_PLSG_UP1");
	WeaponUpgrade_AddLang("Plasmagun_Advanced",	wep, 2, "PLASMA_PLSG_UP2");

	wep = Weapon_AddLang("SF_Railgun", pack, "railgun", "PLASMA_RAIL");
	WeaponUpgrade_AddLang("Railgun_Taser",		wep, 1, "PLASMA_RAIL_UP1");
	WeaponUpgrade_AddLang("Railgun_Slug",		wep, 2, "PLASMA_RAIL_UP2");
		
	//Flamer pack
	pack = WeaponPack_AddLang(FP_OP, "flamer", 12, "PYRO");

	wep = Weapon_AddLang("Flamer", pack, "flamer", "PYRO_FLAM");
	WeaponUpgrade_AddLang("FlamerS",		wep, 0, "PYRO_FLAM_UP0");
		
	//BFG pack
	pack = WeaponPack_AddLang(FP_OP, "bfg", 15, "BFGL");

	wep = Weapon_AddLang("BFG", pack, "bfg", "BFGL_BFG");
	WeaponUpgrade_AddLang("BFGS",		wep, 0, "BFGL_BFG_UP0");
}

function str Weapon_GetSameKind(int wid){
	if (CheckInventory(Weapon_GetActor(wid))) return Weapon_GetActor(wid);
	if (CheckInventory(WeaponUpgrade_getActor(wid, 0))) return WeaponUpgrade_getActor(wid, 0);
	if (CheckInventory(WeaponUpgrade_getActor(wid, 1))) return WeaponUpgrade_getActor(wid, 1);
	return 0;
}

script "SFPlus_WeaponSaveTest" (void){
	Weapon_PlayerSave();
}

function void Weapon_PlayerSave(void) {
	for (int i = 0; i < fp_WeaponStack; i++){
		log(s:Weapon_GetSameKind(i));
	}
}

function void Weapon_SwapWeapon(str this, str withThis){
	TakeInventory(this,1);
	GiveInventory(withThis,1);
	setWeapon(withThis);
}

function void Weapon_Swap(str this, str withThis){
	TakeInventory(this,1);
	GiveInventory(withThis,1);
	setWeapon(withThis);
}

function void Weapon_Upgrade(int wid, int type){
	//printbold(n:(playernumber() + 1), s:" Upgrades ", s:Weapon_GetActor(wid), s:" to: ", s:WeaponUpgrade_getActor(wid, type-1));
if(type == 1)
		Weapon_Swap(Weapon_GetActor(wid),WeaponUpgrade_getActor(wid, 0));
	else if( type == 2) 
		Weapon_Swap(Weapon_GetActor(wid),WeaponUpgrade_getActor(wid, 1));

}

function void WeaponPack_Give(int wp){
	SetActivatorToPlayer(PlayerNumber());
	for (int i = fp_WeaponStack; i >= 0 ; i--){
		if(Weapon_getWepPack(i) == wp){
			str weapon = Weapon_getActor(i);
			giveinventory(weapon, 1);
			setweapon(weapon);
		}
	}
	WPTrack_Increase(wp);
}


function void Weapon_Recycle(int wid, int upg, int play){
	str whatweapon;
	int rcyprice;
	if(upg != 255){
		whatweapon = WeaponUpgrade_GetActor(wid, upg-1);
		rcyprice = WeaponUpgrade_getRcyPrice(wid, upg-1);
	}else{ 
		whatweapon = Weapon_getActor(wid);
		rcyprice = Weapon_getPrice(wid);
	}
	
	SetActivatorToPlayer(play);
	TakeInventory(whatWeapon, 1);
	sf_AddCredits(rcyprice, play);
}




// Definers.
///////////////////////////////////////////////////////////////////////////////

function int Weapon_AddLang(str actor, str pack, str price, str lang){
	str name = strparam(s:"WEPS_", s:lang, s:"_NAME");
	str desc = strparam(s:"WEPS_", s:lang, s:"_DESC");
	return Weapon_Add(actor, strparam(l:name), pack, price, strparam(l:desc));
}

function int WeaponUpgrade_AddLangP(str actor, str wep, int upnum, str price, str lang){
	str name = strparam(s:"WEPS_", s:lang, s:"_NAME");
	str desc = strparam(s:"WEPS_", s:lang, s:"_DESC");
	return WeaponUpgrade_Add(actor, strparam(l:name), wep, upnum, price, strparam(l:desc));
}

function int WeaponUpgrade_AddLang(str actor, str wep, int upnum, str lang){
	str name = strparam(s:"WEPS_", s:lang, s:"_NAME");
	str desc = strparam(s:"WEPS_", s:lang, s:"_DESC");
	return WeaponUpgrade_Add(actor, strparam(l:name), wep, upnum, "", strparam(l:desc));
}

function int WeaponPack_AddLang(int class, str price, int game_gain, str lang){
	str name = strparam(s:"WEPS_", s:lang, s:"_NAME");
	str desc = strparam(s:"WEPS_", s:lang, s:"_DESC");
	return WeaponPack_Add(strparam(l:name), class, price, game_gain,strparam(l:desc));
}
function bool Weapon_OwnedSameKind(int asThis){
	return 
		checkinventory(Weapon_GetActor(asThis)) ||
		checkinventory(WeaponUpgrade_getActor(asThis, 0)) ||
		checkinventory(WeaponUpgrade_getActor(asThis, 1));
}

function bool Weapon_IsHoldingSameKind(int asThis){
	return 
		checkweapon(Weapon_GetActor(asThis)) 			||
		checkweapon(WeaponUpgrade_getActor(asThis, 0))  ||
		checkWeapon(WeaponUpgrade_getActor(asThis, 1));
}

function int Weapon_SaveLastUsed(void){
	int res = -1;
	for(int i = 0; i < fp_weaponStack; i++){
		if(Weapon_IsHoldingSameKind(i)){
			res = i;
			break;
		}
	}
	//log(s:"Weapon style save: ", s:Weapon_GetActor(res));
	return res;
}

function void Weapon_LoadLastUsed(int which){
	
	SetWeapon(Weapon_GetActor(which));
	SetWeapon(WeaponUpgrade_GetActor(which, 0));
	SetWeapon(WeaponUpgrade_GetActor(which, 1));
	//log(s:"Weapon style load: ", s:Weapon_GetActor(which));
	
}

function void WPTrack_Increase(int wp){
	fp_WPTrack[wp] = fp_WPTrack[wp] + WeaponPack_GetScoreGain(wp);
}

function void WPTrack_Decrease(int wp){
	fp_WPTrack[wp] = fp_WPTrack[wp] - WeaponPack_GetScoreGain(wp);
}

function int WPTrack_GetScore(void){
	int i;
	int score = 0;
	for(i = 0; i < fp_WeaponPAckStack; i++){
		score = score + fp_WPTrack[i];
	}
	int players = 0;
	for(i = 0; i < 64; i++){
		if(PlayerInGame(i)) players++;
		else break;
	}
	if(!players) return 0;
	return score / players;
}

function int UpTrack_GetScore(void){
	int i;
	int score = fp_UpTrack;
	int players = 0;
	
	for(i = 0; i < 64; i++){
		if(PlayerInGame(i)) players++;
		else break;
	}
	if(!players) return 0;
	return score / players;
}

function int WeaponUpgrade_Add(str actor, str name, int wpbase, int uptype, str pkey, str desc){
	int uid = fp_Wpns[wpbase][6];
	fp_WpUps[wpbase][uid][0] = actor;
	fp_WpUps[wpbase][uid][1] = name;
	fp_WpUps[wpbase][uid][2] = desc;
	fp_WpUps[wpbase][uid][5] = uptype;
	
	if(strlen(pkey) != 0){
		fp_WpUps[wpbase][uid][3] = strparam(s:"pr_wu_", s:pkey, s:"_up", d:uptype);
		fp_WpUps[wpbase][uid][4] = strparam(s:"pr_wr_", s:pkey, s:"_up", d:uptype);
	}
	else if (wpbase > 0){
		fp_WpUps[wpbase][uid][3] = strparam(s:"pr_wu_", s:fp_Wpns[wpbase][5], s:"_up", d:uptype);
		fp_WpUps[wpbase][uid][4] = strparam(s:"pr_wr_", s:fp_Wpns[wpbase][5], s:"_up", d:uptype);
	}
	else{
		fp_WpUps[wpbase][uid][3] = "null";
		fp_WpUps[wpbase][uid][4] = "null";
	}
	fp_Wpns[wpbase][6]++; //Add one upgrade.
	return uid;
}

function str WeaponUpgrade_GetActor(int wpb, int uid){return fp_WpUps[wpb][uid][0]; }
function str WeaponUpgrade_GetName( int wpb, int uid){ return fp_WpUps[wpb][uid][1]; }
function int WeaponUpgrade_GetDesc(int wpb, int uid){  return fp_WpUps[wpb][uid][2]; }
function int WeaponUpgrade_GetUpgPrice(int wpb, int uid){ return CheckInventory(fp_WpUps[wpb][uid][3]); }
function int WeaponUpgrade_GetRcyPrice(int wpb, int uid){ return CheckInventory(fp_WpUps[wpb][uid][4]); }


function int WeaponPack_Add(str name, int cat, str pkey, int game_gain, str desc){
	int wid = fp_WeaponPackStack;
	fp_WpPacks[wid][0] = name;
	fp_WpPacks[wid][1] = cat;
	fp_WpPacks[wid][2] = desc;
	fp_WpPacks[wid][3] = strparam(s:"pr_wb_", s:pkey);
	fp_WpPacks[wid][4] = pkey;
	fp_WpPacks[wid][5] = game_gain;
	fp_WeaponPackStack++;
	return wid;
}

function str WeaponPack_GetName(int wid){  return fp_WpPacks[wid][0]; }
function int WeaponPack_GetCat(int wid){   return fp_WpPacks[wid][1]; }
function int WeaponPack_GetScoreGain(int wid){   return fp_WpPacks[wid][5]; }
function str WeaponPack_GetDesc(int wid){  return fp_WpPacks[wid][2]; }
function int WeaponPack_GetPrice(int wid){ return CheckInventory(fp_WpPacks[wid][3]); }
function bool WeaponPack_isOwned(int wid){
	bool res = false;
		for (int i = 0; (i < fp_WeaponStack) && !res; i++){
			if(Weapon_getWepPack(i) == wid){
				
				res = Weapon_OwnedSameKind(i);
			}
		}
	return res;
}

function int Weapon_Add(str actor, str name, int pack, str pkey, str desc){
	int wid = fp_WeaponStack;
	fp_Wpns[wid][0] = actor;
	fp_Wpns[wid][1] = name;
	fp_Wpns[wid][2] = pack;
	fp_Wpns[wid][3] = desc;
	
	if(strlen(pkey) != 0) {
		fp_Wpns[wid][4] = strparam(s:"pr_wr_", s:pkey);
		fp_Wpns[wid][5] = pkey;
		}
	else if(pack > 0) {
		fp_Wpns[wid][4] = strparam(s:"pr_wr_", s:fp_WpPacks[pack][4]);
		fp_Wpns[wid][5] = fp_WpPacks[pack][4];
		}
	else{
		fp_Wpns[wid][4] = "null";
		fp_Wpns[wid][5] = "null";
		}
	
	// Initialize upgrades.
	fp_Wpns[wid][6] = 0; 
	
	fp_WeaponStack++;
	return wid;
}

function str Weapon_GetActor(int wid){   return fp_Wpns[wid][0]; }
function str Weapon_GetName(int wid){    return fp_Wpns[wid][1]; }
function int Weapon_GetWepPack(int wid){ return fp_Wpns[wid][2]; }
function int Weapon_GetCat(int wid){
	return WeaponPack_GetCat(Weapon_GetWepPack(wid));
}
function int Weapon_getUpsNum(int wid){	 return fp_Wpns[wid][6]; }
function int Weapon_GetDesc(int wid){    return fp_Wpns[wid][3]; }
function int Weapon_GetPrice(int wid){   return CheckInventory(fp_Wpns[wid][4]); }
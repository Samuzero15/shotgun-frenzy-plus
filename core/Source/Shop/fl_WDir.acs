///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fl_ItemDir.acs
// item directory

// Here it lays all of the weapons on the game.
// For the prices, take a look at fl_price.

#library "fl_WDir"
#import "f_intDB.acs"
#import "fl_techs.acs"
#include "zcommon.acs"
#include "samu_tools.acs"

#libdefine FP_WEP_PACKS 10
#libdefine FP_WEAPONS 20
#libdefine FP_WEPUPS 2

#libdefine FP_BAS 1
#libdefine FP_ADV 2
#libdefine FP_OP 3

int fp_WpPacks[FP_WEP_PACKS][10];
int fp_Wpns[FP_WEAPONS][10];
int fp_WpUps[FP_WEAPONS][FP_WEPUPS][10];

// Weapon pack tracker. For difficulty increasing.
int fp_WpTrack[FP_WEP_PACKS];
int fp_UpTrack;

// Saved weapons per each player.
int fp_WpnsPerPlayer[32][FP_WEAPONS];

int fp_WeaponPackStack = 0;
int fp_WeaponStack = 0;

// fp_WeaponPacks
//	Pack name
//	Category (BAS, ADV, POW)
//  Description
// 	Buy Price

// fp_Wpns[wepaonid]:
//  Score Gain (To ramp-up difficulty.)
// 	Weapon Name
// 	Actor
// 	Pack id
//  Description
// 	Recycle Price (On Credits)

// fp_WeaponUpgrades[wepaonid]:
// 	Weapon Upgrade Name
// 	Actor
//  Description
// 	Upgrade Price (On Ups.)

function void SFPlus_DefineWeapons (void){
	int wep = 0;
	int pack = 0;
	int ups = 0;
	str string;
	
	fp_WeaponPackStack = 0;
	fp_WeaponStack = 0;
	
	wep = Weapon_Add("Beretta", "5mm Beretta", -2, "",
		"Your good-old trusty beretta."
	);
	WeaponUpgrade_Add("Beretta_Dual", "Dual Berettas", wep, 1, "",
		"You get an extra beretta, rapid fire by primary, and simultaneous fire on secondary."
	);
	WeaponUpgrade_Add("Beretta_SMG", "SMG Beretta", wep, 2, "",
		"Works like a single beretta, but primary fires fast, and secondary like your beretta fire ratio."
	);
	
	wep = Weapon_Add("Boomstick", "Standard Boomstick", -1, "",
		"Your shotgun."
	);
				
	WeaponUpgrade_Add("Boomstick_Full", "Combat Boomstick", wep, 0, "boomstick",
		"Pellets can drop fire to burn stronger enemies, also you have a chainsaw bayonetta."
	);
	
	
	
	
	//Shotgun pack
	pack = WeaponPack_Add("Shotguns", FP_BAS, "shotgun", 2,
		"Shell based weapons to cause damage. Great for the newcomers.",
	);
	
	string = strparam(
	s:"  Your mighty double barreled shotgun. ",
	s:"The weapon contains the sawed off functionality ",
	s:"letting you to fire 1 barrel at the time for a ", 
	s:"more controlled attack.\n\n",
	s:"Pri. fire: 2 Barrel Fire (2 Shells) \nSec. Fire: 1 Barrel Fire (1 Shells)"
	);
	
	wep = Weapon_Add("SSG", "Super Shotgun", pack, "ssg", string);
				
	WeaponUpgrade_Add("SSG_Autoload", "Autoloadable Super Shotgun", wep, 1, "",
		"Allows you to fire faster, and your peelets can push demons back."
		);
		
	WeaponUpgrade_Add("SSG_Explosive", "Explosive Super Shotgun", wep, 2, "",
		"Your shells will explode and cause fire to damage the hordes constantly.",
	);
	
	string = strparam(
	s:"This powerful machine can fire a powerful shell burst ",
	s:"with the use of 4 shells, powerful enough ",
	s:"to grant you easy kills. Thanks for its high acurracy. ", 
	s:"The only drawback is in its firing speed.\n\n",
	
	s:"Pri. fire: 4 Shell Burst \nSec. Fire: 1 Shell Shot"
	);
		
	wep = Weapon_Add("Quadshot", "Quadshot", pack, "quadshot", string);
				
	WeaponUpgrade_Add("Quadshot_Full", "Explosive Quadashot", wep, 0, "",
		"Your peelets can explode, also you can fire twice as faster."
		);
		
		
		
		
	//Assault pack
	pack = WeaponPack_Add("Assault", FP_BAS, "assault", 2,
		"Set of weapons for quick assault operations."
		);
	
	string = strparam(
	s:"Nifty machine to attack, weaker demons thanks for it's firing speed ",
	s:"It's perfect to deal with the rushing waves at the start."
	);
	
	wep = Weapon_Add("Spitter", "Spitter", pack, "spitter", string);
				
	WeaponUpgrade_Add("Spitter_SSG", "Spread Spitter + Shell Grenades", wep, 1, "",
		"You gain more spread for this gun, and also you can launch shell grenades."
		);
		
	WeaponUpgrade_Add("Spitter_GLauncher", "Fast Spitter + N. Gas Launcher", wep, 2, "",
		"Fires faster. Allows you to throw N. Gass grenades, they cause stun and poison to the horde.",
		);
		
	string = strparam(
	s:"Powerful shotgun that packes 10 shells in the chamber ",
	s:"Shoots fast, but needs to be recharged manually.",
	s:"Just use this if the spitter does'nt deal enough damage.\n\n", 
	
	s:"Sec. Fire: Reload chamber (2 Shells)"
	);
		
	wep = Weapon_Add("Buckshot", "Buckshot", pack, "buckshot", string);
				
	WeaponUpgrade_Add("Buckshot_Chamber", "Big Chamber Buckshot", wep, 1, "",
		"You can reload up to 20 shells, reloads faster adding 4 shells for each pump."
		);
		
	WeaponUpgrade_Add("Buckshot_Explosive", "Explosive Buckshot", wep, 2, "",
		"Your shells causes more damage, and spreads fire."
		);
		
		
		
	//Support pack
	pack = WeaponPack_Add("Support", FP_BAS, "support", 0,
		"Useful tools to aid in the battle."
		);
		
	string = strparam(
	s:"Patch your allies with this, it drops supplies for the marines.",
	s:"This tool can't be restocked by dispensers, so your best refill ",
	s:"is on your base, right at the starting point.\n\n",
	
	s:"Pri. Fire: Drop Ammo (1 Ammo Supplies)\n Sec. Fire: Drop Health (1 Health Supplies)"
	);
	
	wep = Weapon_Add("Supplier", "Supplier Machine.", pack, "supplier", string);
	
	WeaponUpgrade_Add("Supplier_Big", "Resourceful Supplier", wep, 0, "",
		"Supply more resources, and in a wider range."
		);
		
		
		
		
	//Commando pack
	pack = WeaponPack_Add("Commando", FP_ADV, "commando", 5, 
		"Heavier repeating guns, they Rip and Tear a lot.");
	
	string = strparam(
	s:"This chaingun fires a lot of heavy bullets.\n",
	s:"The more you fire it, the inacurrate but powerful becomes.\n",
	s:"Just dont waste ammo and you will be fine.\n\n",
	s:"Pri. Fire: Fires the gun.\n",
	s:"Sec. Fire: Toggle Spinning.");
	
	wep = Weapon_Add("Repeater", "Bullet Repeater", pack, "repeater", string);
				
	WeaponUpgrade_Add("Repeater_DoubleSpeed", "Speed Drift Repeater", wep, 1, "", 
		"Spins quicker meaning you can fire faster and presicer. Also you fire more bullets than the usual.",
		);
		
	WeaponUpgrade_Add("Repeater_BlastShells", "Gauss J. Repeater", wep, 2, "",
		"Fires gauss bullets. Allowing you to rip enemies with your bullets, as long you have some energy cells."
		);
	string = strparam(
	s:"This gun can rip through enemies with the use of nails. ",
	s:"Slower than bullets, but they rip more from up close."
	);
	
	wep = Weapon_Add("Dualshot", "Nail Dualshot", pack, "dualshot", string);
				
	WeaponUpgrade_Add("Dualshot_Razor", "Razor Saw Dualshot", wep, 1, "",
		"Launches Razor Saw-bolts. They're heavier and the gravity affects them, but it rips a lot."
		);
		
	WeaponUpgrade_Add("Dualshot_FlakShells", "Flak Cannon Dualshot", wep, 2, "",
		"Launches Flak Shards. They're bouncy and spreadier than the Saw-Bolts, but they deal less damage. Still they can rip through."
		);
		
		
		
		
	//Explosive pack
	pack = WeaponPack_Add("Explosive", FP_ADV, "heavy", 8,
		"Heavy weapons with explosive projectiles, excelent for crowd control."
		);
	string = strparam(
	s:"Shoots fast and explosive rockets straight into the waves.",
	s:"Aim to their feets for the best experience.");
	
	wep = Weapon_Add("Launcher", "Rocket Launcher", pack, "launcher", string);
				
	WeaponUpgrade_Add("Launcher_Exploder", "Explosive R. Launcher", wep, 1, "",
		"Your rockets explode more, and they leave a fire trail for the nearby demons."
		);
	WeaponUpgrade_Add("Launcher_Multi", "Multiple R. Launcher", wep, 2, "",
		"Launches 3 rockets per shot. In a spreadier way. Use secondary to fire in a trangular set."
		);
		
	string = strparam(
	s:"With this, you can launch bouncing grenades.",
	s:"Use the bouncing capacity from each projectile to damage demons in a safe place."
	);
		
	wep = Weapon_Add("Flinger", "G. Flinger", pack, "flinger", string);
				
	WeaponUpgrade_Add("Flinger_Expander", "Expansive G. Flinger", wep, 1, "",
		"Fires a grenade, that spawns smaller grenades in a wider range. "
		);
		
	WeaponUpgrade_Add("Flinger_MinePlacer", "Sticky G. Flinger", wep, 2, "",
		"Launches sticky grenades, which you can spam them up, but they must be manually activated with altfire. Try sticking a grenade against a demon!."
		);
		
		
		
		
		
	//Plasmatic pack
	pack = WeaponPack_Add("Plasmatic", FP_ADV, "plasma", 8,
		"Plasma based pack which it deals damage at the advanced style."
		);
	
	string = strparam(
	s:"This weapon can fire plasma projectiles, and that's it.");
	
	wep = Weapon_Add("Plasmagun", "Plasma Rifle", pack, "plasmagun", string);
				
	WeaponUpgrade_Add("Plasmagun_Spread", "Spread Chip Plasma Rifle", wep, 1, "",
		"Your plasma can spread. Control it with Primary and Secondary fire."
		);
		
	WeaponUpgrade_Add("Plasmagun_Advanced", "Advanced Plasma Rifle", wep, 2, "",
		"The plasma projectiles can seek enemies now. Can cause explosive damage too."
		);
	
	string = strparam(
	s:"This gun can create rails in a line of demons.",
	s:"Takes some time to fire each rail, but its great for sniping.");
		
	wep = Weapon_Add("SF_Railgun", "Laser Railgun", pack, "railgun", string);
				
	WeaponUpgrade_Add("Railgun_Taser", "Lancer type Railgun", wep, 1, "",
		"Shoots a wider, and powerful Laser which it harms nearby demons."
		);
		
	WeaponUpgrade_Add("Railgun_Slug", "Slug Railgun", wep, 2, "",
		"Deals more damage, and fires 2 rails per shot, Use Secondary to fire 1 per time."
		);
		
		
		
	//Flamer pack
	pack = WeaponPack_Add("Pyromancer", FP_OP, "flamer", 12,  "Fire is the spotlight. So let them burn.");
	
	wep = Weapon_Add("Flamer", "Flamer", pack, "",
			"It spews fire like a dragon, powerful as hell.");
				
	WeaponUpgrade_Add("FlamerS", "Super Flamer", wep, 0, "",
		"Your fire is unstoppable, ripping the waves with ease.",
		);
		
	//BFG pack
	pack = WeaponPack_Add("B.F.G Like", FP_OP, "bfg", 15,
		"Bigger problems needs Big Friggin Guns."
		);
	
	wep = Weapon_Add("BFG", "Bio Force Gun 9000", pack, "",
		"Oh come on, you know what does this bad boy.");
				
	WeaponUpgrade_Add("BFGS", "Ripper BFG9000", wep, 0, "",
		"Same as the BFG, execpt it rips and explode through waves.",
		);
	/*
	log(s:Weapon_GetName(wep));
	log(s:Weapon_GetActor(wep));
	log(d:Weapon_GetWepPack(wep));
	log(d:Weapon_GetPrice(wep));
	log(s:Weapon_GetDesc(wep));
	
	/*
	log(s:WeaponPack_GetName(pack));
	log(d:WeaponPack_GetCat(pack));
	log(s:WeaponPack_GetDesc(pack));
	log(d:WeaponPack_GetPrice(pack));
	
	log(s:WeaponUpgrade_GetActor(0, 1));
	log(s:WeaponUpgrade_GetName(0, 1));
	log(s:WeaponUpgrade_GetDesc(0, 1));
	log(d:WeaponUpgrade_GetUpgPrice(0, 1));
	log(d:WeaponUpgrade_GetRcyPrice(0, 1));
	
	log(s:WeaponUpgrade_GetActor(0, 1));
	log(s:WeaponUpgrade_GetName(0, 1));
	log(s:WeaponUpgrade_GetDesc(0, 1));
	log(d:WeaponUpgrade_GetUpgPrice(0, 1));
	log(d:WeaponUpgrade_GetRcyPrice(0, 1));
	
	/*
	pack = WeaponPack_Add("My weapon Pack", FP_BAS, "This weapon pack is cool, lol.", "null");
	
	
	
	/*
	wep = Weapon_Add("Beretta", "Beretta", -1, "Your trusty old beretta.",  "null");
	//int wep = 0;
	
	*/
}

function str Weapon_GetSameKind(int wid){
	if (CheckInventory(Weapon_GetActor(wid))) return Weapon_GetActor(wid);
	if (CheckInventory(WeaponUpgrade_getActor(wid, 0))) return WeaponUpgrade_getActor(wid, 0);
	if (CheckInventory(WeaponUpgrade_getActor(wid, 1))) return WeaponUpgrade_getActor(wid, 1);
	return 0;
}

script "SFPlus_WeaponSaveTest" (void){
	Weapon_PlayerSave();
}

function void Weapon_PlayerSave(void) {
	for (int i = 0; i < fp_WeaponStack; i++){
		log(s:Weapon_GetSameKind(i));
	}
}

function void Weapon_SwapWeapon(str this, str withThis){
	TakeInventory(this,1);
	GiveInventory(withThis,1);
	setWeapon(withThis);
}

function void Weapon_Swap(str this, str withThis){
	TakeInventory(this,1);
	GiveInventory(withThis,1);
	setWeapon(withThis);
}

function void Weapon_Upgrade(int wid, int type){
	//printbold(n:(playernumber() + 1), s:" Upgrades ", s:Weapon_GetActor(wid), s:" to: ", s:WeaponUpgrade_getActor(wid, type-1));
if(type == 1)
		Weapon_Swap(Weapon_GetActor(wid),WeaponUpgrade_getActor(wid, 0));
	else if( type == 2) 
		Weapon_Swap(Weapon_GetActor(wid),WeaponUpgrade_getActor(wid, 1));

}

function void WeaponPack_Give(int wp){
	SetActivatorToPlayer(PlayerNumber());
	for (int i = fp_WeaponStack; i >= 0 ; i--){
		if(Weapon_getWepPack(i) == wp){
			str weapon = Weapon_getActor(i);
			giveinventory(weapon, 1);
			setweapon(weapon);
		}
	}
	WPTrack_Increase(wp);
}


function void Weapon_Recycle(int wid, int upg, int play){
	str whatweapon;
	int rcyprice;
	if(upg != 255){
		whatweapon = WeaponUpgrade_GetActor(wid, upg-1);
		rcyprice = WeaponUpgrade_getRcyPrice(wid, upg-1);
	}else{ 
		whatweapon = Weapon_getActor(wid);
		rcyprice = Weapon_getPrice(wid);
	}
	
	SetActivatorToPlayer(play);
	TakeInventory(whatWeapon, 1);
	sf_AddCredits(rcyprice, play);
}




// Definers.
///////////////////////////////////////////////////////////////////////////////

function bool Weapon_IsHoldingSameKind(int asThis){
	return 
		checkweapon(Weapon_GetActor(asThis)) 			||
		checkweapon(WeaponUpgrade_getActor(asThis, 0))  ||
		checkWeapon(WeaponUpgrade_getActor(asThis, 1));
}

function int Weapon_SaveLastUsed(void){
	int res = -1;
	for(int i = 0; i < fp_weaponStack; i++){
		if(Weapon_IsHoldingSameKind(i)){
			res = i;
			break;
		}
	}
	//log(s:"Weapon style save: ", s:Weapon_GetActor(res));
	return res;
}

function void Weapon_LoadLastUsed(int which){
	
	SetWeapon(Weapon_GetActor(which));
	SetWeapon(WeaponUpgrade_GetActor(which, 0));
	SetWeapon(WeaponUpgrade_GetActor(which, 1));
	//log(s:"Weapon style load: ", s:Weapon_GetActor(which));
	
}

function void WPTrack_Increase(int wp){
	fp_WPTrack[wp] = fp_WPTrack[wp] + WeaponPack_GetScoreGain(wp);
}

function void WPTrack_Decrease(int wp){
	fp_WPTrack[wp] = fp_WPTrack[wp] - WeaponPack_GetScoreGain(wp);
}

function int WPTrack_GetScore(void){
	int i;
	int score = 0;
	for(i = 0; i < fp_WeaponPAckStack; i++){
		score = score + fp_WPTrack[i];
	}
	int players = 0;
	for(i = 0; i < 64; i++){
		if(PlayerInGame(i)) players++;
		else break;
	}
	if(!players) return 0;
	return score / players;
}

function int UpTrack_GetScore(void){
	int i;
	int score = fp_UpTrack;
	int players = 0;
	
	for(i = 0; i < 64; i++){
		if(PlayerInGame(i)) players++;
		else break;
	}
	if(!players) return 0;
	return score / players;
}

function int WeaponUpgrade_Add(str actor, str name, int wpbase, int uptype, str pkey, str desc){
	int uid = fp_Wpns[wpbase][6];
	fp_WpUps[wpbase][uid][0] = actor;
	fp_WpUps[wpbase][uid][1] = name;
	fp_WpUps[wpbase][uid][2] = desc;
	fp_WpUps[wpbase][uid][5] = uptype;
	
	if(strlen(pkey) != 0){
		fp_WpUps[wpbase][uid][3] = strparam(s:"pr_wu_", s:pkey, s:"_up", d:uptype);
		fp_WpUps[wpbase][uid][4] = strparam(s:"pr_wr_", s:pkey, s:"_up", d:uptype);
	}
	else if (wpbase > 0){
		fp_WpUps[wpbase][uid][3] = strparam(s:"pr_wu_", s:fp_Wpns[wpbase][5], s:"_up", d:uptype);
		fp_WpUps[wpbase][uid][4] = strparam(s:"pr_wr_", s:fp_Wpns[wpbase][5], s:"_up", d:uptype);
	}
	else{
		fp_WpUps[wpbase][uid][3] = "null";
		fp_WpUps[wpbase][uid][4] = "null";
	}
	fp_Wpns[wpbase][6]++; //Add one upgrade.
	return uid;
}

function str WeaponUpgrade_GetActor(int wpb, int uid){return fp_WpUps[wpb][uid][0]; }
function str WeaponUpgrade_GetName( int wpb, int uid){ return fp_WpUps[wpb][uid][1]; }
function int WeaponUpgrade_GetDesc(int wpb, int uid){  return fp_WpUps[wpb][uid][2]; }
function int WeaponUpgrade_GetUpgPrice(int wpb, int uid){ return CheckInventory(fp_WpUps[wpb][uid][3]); }
function int WeaponUpgrade_GetRcyPrice(int wpb, int uid){ return CheckInventory(fp_WpUps[wpb][uid][4]); }


function int WeaponPack_Add(str name, int cat, str pkey, int game_gain, str desc){
	int wid = fp_WeaponPackStack;
	fp_WpPacks[wid][0] = name;
	fp_WpPacks[wid][1] = cat;
	fp_WpPacks[wid][2] = desc;
	fp_WpPacks[wid][3] = strparam(s:"pr_wb_", s:pkey);
	fp_WpPacks[wid][4] = pkey;
	fp_WpPacks[wid][5] = game_gain;
	fp_WeaponPackStack++;
	return wid;
}

function str WeaponPack_GetName(int wid){  return fp_WpPacks[wid][0]; }
function int WeaponPack_GetCat(int wid){   return fp_WpPacks[wid][1]; }
function int WeaponPack_GetScoreGain(int wid){   return fp_WpPacks[wid][5]; }
function str WeaponPack_GetDesc(int wid){  return fp_WpPacks[wid][2]; }
function int WeaponPack_GetPrice(int wid){ return CheckInventory(fp_WpPacks[wid][3]); }
function bool WeaponPack_isOwned(int wid){
	bool res = false;
		for (int i = 0; (i < fp_WeaponStack) && !res; i++){
			if(Weapon_getWepPack(i) == wid){
				
				res = CheckInventory(Weapon_getActor(i));
			}
		}
	return res;
}

function int Weapon_Add(str actor, str name, int pack, str pkey, str desc){
	int wid = fp_WeaponStack;
	fp_Wpns[wid][0] = actor;
	fp_Wpns[wid][1] = name;
	fp_Wpns[wid][2] = pack;
	fp_Wpns[wid][3] = desc;
	
	if(strlen(pkey) != 0) {
		fp_Wpns[wid][4] = strparam(s:"pr_wr_", s:pkey);
		fp_Wpns[wid][5] = pkey;
		}
	else if(pack > 0) {
		fp_Wpns[wid][4] = strparam(s:"pr_wr_", s:fp_WpPacks[pack][4]);
		fp_Wpns[wid][5] = fp_WpPacks[pack][4];
		}
	else{
		fp_Wpns[wid][4] = "null";
		fp_Wpns[wid][5] = "null";
		}
	
	// Initialize upgrades.
	fp_Wpns[wid][6] = 0; 
	
	fp_WeaponStack++;
	return wid;
}

function str Weapon_GetActor(int wid){   return fp_Wpns[wid][0]; }
function str Weapon_GetName(int wid){    return fp_Wpns[wid][1]; }
function int Weapon_GetWepPack(int wid){ return fp_Wpns[wid][2]; }
function int Weapon_GetCat(int wid){
	return WeaponPack_GetCat(Weapon_GetWepPack(wid));
}
function int Weapon_getUpsNum(int wid){	 return fp_Wpns[wid][6]; }
function int Weapon_GetDesc(int wid){    return fp_Wpns[wid][3]; }
function int Weapon_GetPrice(int wid){   return CheckInventory(fp_Wpns[wid][4]); }
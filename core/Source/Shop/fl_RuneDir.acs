///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fl_runeDir.acs
// Runes directory!

// All the runes in a single file!

#library "fl_runeDir"
#import "f_intdb.acs"
#import "fp_lumpread.acs"
#include "zcommon.acs"
#include "acsutils.acs"
//#include "samu_tools.acs"

#define FP_Rune_MAX 50
#define FP_RUNE_TIERS 4

int RuneTop = 0;
int RuneTrack = 0;
int Rune_list[FP_Rune_MAX][7]; //[Amount][Props]
int Rune_Saved[32];
int Rune_TierUpPrices[FP_RUNE_TIERS];
int Rune_TierPrices[FP_RUNE_TIERS];

function void SFPlus_DefineRunes(void){
    Rune_TierUpPrices[1] = GetCvar("pr_rt_u2");
    Rune_TierUpPrices[2] = GetCvar("pr_rt_u3");
    Rune_TierUpPrices[3] = GetCvar("pr_rt_u4");
    Rune_TierPrices[0] = GetCvar("pr_rt_1");
    Rune_TierPrices[1] = GetCvar("pr_rt_2");
    Rune_TierPrices[2] = GetCvar("pr_rt_3");
    Rune_TierPrices[3] = GetCvar("pr_rt_4");

    RuneTop = 0;

    RuneDir_ReadSFRUNDEF();
}


function void RuneDir_ReadSFRUNDEF(void){
	ACS_NamedExecuteWithResult("LumpRead_LoadFile", "SFRUNDEF", "SFPlus_IDir_SFRUNDEFReadLine");
}

Script "SFPlus_IDir_SFRUNDEFReadLine" (int line) {
	//log(s:"\"", s:line, s:"\"");
	int tier = 		    LumpRead_NextArg (line,LUMPR_VALUE_INT);
	str actor = 		    LumpRead_NextArg (line,LUMPR_VALUE_STR);
	str poweractor = 	LumpRead_NextArg (line,LUMPR_VALUE_STR);
    str langdata = 		LumpRead_NextArg (line,LUMPR_VALUE_STR);
	str btnimg = 		LumpRead_NextArg (line,LUMPR_VALUE_STR);
	
	Rune_Add (tier, actor, poweractor, langdata, btnimg);
}

function void Rune_Add (int tier, str actor, str poweractor, str langdata, str btnimg){
	int upg = RuneTop;
	
	if(RuneTop >= FP_Rune_MAX)
	{ 
		log(s:"(fl_runedir): Too much runes!");
		return;
	}
	// Look up language.txt
	Rune_List[upg][0] = StrParam(l:strparam(s:"FP_RN_", s:langdata));
	Rune_List[upg][1] = StrParam(l:strparam(s:"FP_RD_", s:langdata));
	Rune_List[upg][2] = actor;
	// Lookup fl_price.acs
	Rune_List[upg][3] = GetCvar(strparam(s:"pr_rt_", d:tier)); 
    //log(s:"Rune price: ", d:GetCvar(strparam(s:"pr_rt_", d:tier)));
	Rune_List[upg][4] = btnimg;
    Rune_List[upg][5] = tier;
    Rune_List[upg][6] = poweractor;
	RuneTop++;
}



function str Rune_getName(int up){	return Rune_List[up][0];}
function str Rune_getDesc(int up){	return Rune_List[up][1];}
function str Rune_getActor(int up){	return Rune_List[up][2];}
function str Rune_getIcon(int up){	return Rune_List[up][4];}
function str Rune_getTier(int up){	return Rune_List[up][5];}
function int Rune_getPrice(int up){	return Rune_List[up][3];}
function str Rune_getPowerActor(int up){ return Rune_List[up][6];}

function int Rune_getCurrent(void){ 
    int res = -1;
    for(int i; i < RuneTop; i++){
        if(CheckInventory(Rune_getPowerActor(i))){
            res = i;
            break;
        }
    }
    return res;
}

function int Rune_GetScore(void){
	int i;
	int score = RuneTrack;
	int players = 0;
	
	for(i = 0; i < 64; i++){
		if(PlayerInGame(i)) players++;
		else break;
	}

	if(!players) return 0;
	return (score) / players;
}

function void Rune_SaveAndUnequip(void){ 
    int play = PlayerNumber();
    Rune_Saved[play] = Rune_getCurrent();
    TakeInventory(Rune_getPowerActor(Rune_Saved[play]), 1);
}

function void Rune_LoadAndEquip(void){ 
    int play = PlayerNumber();
    GiveInventory(Rune_getActor(Rune_Saved[play]), 1);
    Rune_Saved[play] = -1;
}

function int Rune_getTierUnlockPrice(int tier){ 
    return Rune_TierUpPrices[tier-1];
}

function int Rune_getTierPrice(int tier){ 
    return Rune_TierPrices[tier];
}

Script "SFPlus_RandomRune" (int arg) {
    int pick = Rune_Pick(arg);
    //print(d:pick,s:") ", s:Rune_getName(pick));
}

function int Rune_Pick(int tier){
    int result;
    if(tier == 0) 
    {
        result = random(0, RuneTop-1);
    } 
    else {
        int picks[5];
        int stackpicks = 0;
        for(int i; i < RuneTop; i++){
            if(tier == Rune_getTier(i)){
                picks[stackpicks] = i;
                stackpicks++;
            }
        }
        result = picks[random(0, stackpicks-1)];
        
    }
    return result;
}
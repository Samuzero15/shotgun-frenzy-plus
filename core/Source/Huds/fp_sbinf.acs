///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_sbinf.acs
// SBARINFO syncing scripts.

// This will be useful for syncing the sbarinfo.
#library "FP_SBINF"

#include "zcommon.acs"
#include "acsutils.acs"

#import "f_intdb.acs"

Script "SyncSBARForEveryone" OPEN {// Thank You Mr.Satan!
	int play = 0;
	while(play < 32)
	{
		
		SetActivatorToPlayer(play);

		if(!PlayerIsSpectator(play) && !PlayerIngame(play)){ // Player is not on the game (as spectator or game player).
			SetActivator(0,AAPTR_NULL);
			play++;
			continue;
		}
		// If the player is in the server considering
		// 1) The player is in the game OR
		// 2) The player is a spectator. dead or normal spectator (not 0)
		// This will sync the spectator inventory for the sbar info.
		SBarSync_SetInv("HUD_Spectating", PlayerIsSpectator(play) == 1);
		if(PlayerIsSpectator(play) == 1){
			SBarSync_SetInv("HUD_Kills", getlevelinfo(LEVELINFO_KILLED_MONSTERS));
			SBarSync_SetInv("HUD_Deaths", p_TotalPlayerDeaths);
			SBarSync_SetInv("HUD_Sector", g_Status);
			if(g_Status == 5)
				SBarSync_SetInv("HUD_CoreHP", getactorproperty(104, APROP_Health));
			else
				SBarSync_SetInv("HUD_CoreHP", getactorproperty(100 + g_Status, APROP_Health));
			if (f_Gametype == 1) SBarSync_SetInv("HUD_TeamCredits", c_Credits);
			if (f_GameType == 5) SBarSync_SetInv("HUD_Wave", m_SurvivalWave);
		}
		
		SetActivator(0,AAPTR_NULL);
		play++;
	}
	delay(1);
	restart;
}

script "SyncWithSBARINFO" (int kills) {

	int play = PlayerNumber();

	SBarSync_SetInv("HUD_Sector", g_Status);
	if(g_Status == 5)
	SBarSync_SetInv("HUD_CoreHP", getactorproperty(104, APROP_Health));
	else
	SBarSync_SetInv("HUD_CoreHP", getactorproperty(100 + g_Status, APROP_Health));
	SBarSync_SetInv("HUD_Credits", p_Credits[play]);
	if (f_Gametype == 1)SBarSync_SetInv("HUD_TeamCredits", c_Credits);
	if (f_GameType == 5)SBarSync_SetInv("HUD_Wave", m_SurvivalWave);
	SBarSync_SetInv("HUD_Ups", p_Exp_Points[play]);
	SBarSync_SetInv("HUD_Kills", getlevelinfo(LEVELINFO_KILLED_MONSTERS));
	SBarSync_SetInv("HUD_Deaths", p_TotalPlayerDeaths);
	SBarSync_SetInv("HUD_ExpLeft", kills);
	SBarSync_SetInv("HUD_RankNow", p_Rank[play]);
	SBarSync_SetInv("HUD_Rank", p_Rank[play] + 1);
	SBarSync_SetInv("HUD_Exp", p_Exp[play]);
	SBarSync_SetInv("HUD_Streak", p_Streak[play]);
	SBarSync_SetInv("HUD_HiStreak", p_StreakHi[play]);
	SBarSync_SetInv("HUD_MsStreak", getNextStreakMilestone());
	SBarSync_SetInv("HUD_NextRange", p_RankExp[p_Rank[play] + 1]);
	SBarSync_SetInv("HUD_MechTime", p_MechTimer[play]);
	SBarSync_SetInv("HUD_Commander", c_Commander);
	SBarSync_SetInv("HUD_TeamCredits", c_credits);
	SBarSync_SetInv("HUD_KS", p_KSHUD[play]);

	if(p_MechTimer[play] > 0){
		SBarSync_SetInv("Hud_MechTime_Min", ((p_MechTimer[play] + 35) / (35*60))%60);
		SBarSync_SetInv("Hud_MechTime_Sec", ((p_MechTimer[play] + 35) / 35)%60);
	}else{
		SBarSync_SetInv("Hud_MechTime_Min" ,0);
		SBarSync_SetInv("Hud_MechTime_Sec" ,0);
	}
	
	SBarSync_SetInv("HUD_OnMech", cond(p_TankSlot[play] == 2, 1, 0));
	
	switch(p_TankSlot[play]){
		case 1: SBarSync_SetInv("HUD_MechState", 1); break;
		case 2: SBarSync_SetInv("HUD_MechState", 2); break;
		case 99: SBarSync_SetInv("HUD_MechState", 3); break;
		default: SBarSync_SetInv("HUD_MechState", 0);
	}
	
	SetAmmoCapacity("HUD_Exp", p_RankExp[p_Rank[play] + 1]);
}

function void SBarSync_SetInv(str item, int value){
	if(CheckInventory(item) != value)
		SetInventory(item, value);
}

script "SFPlus_Sbarinfo_Enter" ENTER{
	ACS_NamedExecuteAlways("SFPlus_Sbarinfo_HealthStatus", 0);
}

script "SFPlus_Sbarinfo_Respawn" RESPAWN{
	ACS_NamedExecuteAlways("SFPlus_Sbarinfo_HealthStatus", 0);
}

script "SFPlus_Sbarinfo_HealthStatus" (void) {
	int hp = GetActorProperty(0, APROP_HEALTH);
	int maxhp = GetActorProperty(0, APROP_SPAWNHEALTH);
	
	//log(s:"Called? ActivatorTID: ", d:ActivatorTID(), s:" Max HP:", d:GetActorProperty(0, APROP_SPAWNHEALTH));
	while(hp > 0){
		SetInventory("HUD_Dangerhealth", hp <= ((maxhp * 0.10) >> 16));
		SetInventory("HUD_Critichealth", hp <= ((maxhp * 0.25) >> 16));
		SetInventory("HUD_Lowhealth", hp <= ((maxhp * 0.5) >> 16));
		SetInventory("HUD_Overhealth", hp > maxhp && !(maxHP == 0));
		hp = GetActorProperty(0, APROP_HEALTH);

		if(CheckInventory("RuneProsperity")){
			// If we have the prosperity rune, the max health changes.
			maxhp = 450;
		}else {
			// If we're using the mech, the max health changes.
			maxhp = cond(p_TankSlot[playernumber()] == 2, 1500 + 900 * checkinventory("MechUp_Armor"), 
			GetActorProperty(0, APROP_SPAWNHEALTH));
		}
		
		delay(1);
	}
	SetInventory("HUD_Dangerhealth", 1);
}

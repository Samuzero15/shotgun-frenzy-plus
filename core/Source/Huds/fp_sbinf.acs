///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_sbinf.acs
// SBARINFO syncing scripts.

// This will be useful for syncing the sbarinfo.
#library "FP_SBINF"

#include "zcommon.acs"
#include "acsutils.acs"

#import "f_intdb.acs"
#import "fl_MupDir.acs"

Script "SFPlus_SyncVariables" OPEN {// Thank You Mr.Satan!
	int play = 0;
	while(play <= GetPlayerTopIndex())
	{
		SetActivatorToPlayer(play);
		// This will sync the spectator inventory for the sbar info.
		if(PlayerIsSpectator(play) >= 1){
			SetInventory("HUD_Kills", getlevelinfo(LEVELINFO_KILLED_MONSTERS));
			SetInventory("HUD_Deaths", p_TotalPlayerDeaths);
			SetInventory("HUD_Sector", g_Status);
			if(g_Status == 5)
				SetInventory("HUD_CoreHP", getactorproperty(104, APROP_Health));
			else
				SetInventory("HUD_CoreHP", getactorproperty(100 + g_Status, APROP_Health));
			if (f_Gametype == 1) SetInventory("HUD_TeamCredits", c_Credits);
			else TakeMaxInventory("HUD_TeamCredits");
			if (f_GameType == 5) SetInventory("HUD_Wave", m_SurvivalWave);

			SetInventory("HUD_Gametype", f_Gametype);
			SetInventory("HUD_NukeLaunched", c_NukeLaunched);
			SetInventory("HUD_GuardianState", g_GuardianState);
			SetInventory("HUD_GameOver", g_GameOver);
			SetInventory("HUD_GameEnding", g_GameEnding);
			SetInventory("HUD_GameTimer", g_GameTimer);
			SetInventory("HUD_GuardianTimer", g_GuardianTimer);
			SetInventory("HUD_MonstersLeft", (g_MonstersLeft == -1) ? 9999 : g_MonstersLeft);
			SetInventory("HUD_SurvProgress", g_SurvProgress);
		} else { // Player is not on the game (as spectator or game player).
			SetActivator(0,AAPTR_NULL);
			play++;
			continue;
		}
		SetInventory("HUD_Spectating", PlayerIsSpectator(play) == 1);
		SetActivator(0,AAPTR_NULL);
		play++;
	}
	delay(5);
	restart;
}

script "SFPlus_SyncWithSBARINFO" (int kills) {

	int play = PlayerNumber();

	SetInventory("HUD_Sector", g_Status);
	if(g_Status == 5)
	SetInventory("HUD_CoreHP", getactorproperty(104, APROP_Health));
	else
	SetInventory("HUD_CoreHP", getactorproperty(100 + g_Status, APROP_Health));
	SetInventory("HUD_Credits", p_Credits[play]);
	if (f_Gametype == 1)SetInventory("HUD_TeamCredits", c_Credits);
	else TakeMaxInventory("HUD_TeamCredits");
	if (f_GameType == 5)SetInventory("HUD_Wave", m_SurvivalWave);
	SetInventory("HUD_Ups", p_Exp_Points[play]);
	SetInventory("HUD_Kills", getlevelinfo(LEVELINFO_KILLED_MONSTERS));
	SetInventory("HUD_Deaths", p_TotalPlayerDeaths);
	SetInventory("HUD_ExpLeft", kills);
	SetInventory("HUD_RankNow", p_Rank[play]);
	SetInventory("HUD_Rank", p_Rank[play] + 1);
	SetInventory("HUD_Exp", p_Exp[play]);
	SetInventory("HUD_Streak", p_Streak[play]);
	SetInventory("HUD_HiStreak", p_StreakHi[play]);
	SetInventory("HUD_MsStreak", getNextStreakMilestone());
	SetInventory("HUD_NextRange", p_RankExp[p_Rank[play] + 1]);
	SetInventory("HUD_MechTime", p_MechTimer[play]);
	SetInventory("HUD_Commander", c_Commander);
	SetInventory("HUD_Gametype", f_Gametype);
	SetInventory("HUD_NukeLaunched", c_NukeLaunched);
	SetInventory("HUD_KS", p_KSHUD[play]);
	SetInventory("HUD_GuardianState", g_GuardianState);
	SetInventory("HUD_GameOver", g_GameOver);
	SetInventory("HUD_GameEnding", g_GameEnding);
	SetInventory("HUD_MonstersLeft", (g_MonstersLeft == -1) ? 9999 : g_MonstersLeft);
	SetInventory("HUD_SurvProgress", g_SurvProgress);

	if(p_MechTimer[play] > 0){
		SetInventory("Hud_MechTime_Min", ((p_MechTimer[play] + 35) / (35*60))%60);
		SetInventory("Hud_MechTime_Sec", ((p_MechTimer[play] + 35) / 35)%60);
	}else{
		SetInventory("Hud_MechTime_Min" ,0);
		SetInventory("Hud_MechTime_Sec" ,0);
	}

	if(p_TankSlot[play] == 2) SetInventory("HUD_OnMech", 1);
	else TakeMaxInventory("HUD_OnMech");
	
	switch(p_TankSlot[play]){
		case 1: SetInventory("HUD_MechState", 1); break;
		case 2: SetInventory("HUD_MechState", 2); break;
		case 99: SetInventory("HUD_MechState", 3); break;
		default: SetInventory("HUD_MechState", 0);
	}
	
	SetAmmoCapacity("HUD_Exp", p_RankExp[p_Rank[play] + 1]);
}

script "SFPlus_Sbarinfo_Enter" ENTER{
	NamedExecuteClientScript("SFPlus_Sbarinfo_HealthStatus", PlayerNumber(), p_TankSlot[playernumber()] == 2);
}

script "SFPlus_Sbarinfo_Respawn" RESPAWN{
	NamedExecuteClientScript("SFPlus_Sbarinfo_HealthStatus", PlayerNumber(), p_TankSlot[playernumber()] == 2);
}

script "SFPlus_Sbarinfo_HealthStatus" (int using_tank) ClientSide {
	int hp = GetActorProperty(0, APROP_HEALTH);
	int maxhp = GetActorProperty(0, APROP_SPAWNHEALTH);
	
	//log(s:"Called? ActivatorTID: ", d:ActivatorTID(), s:" Max HP:", d:GetActorProperty(0, APROP_SPAWNHEALTH));
	while(hp > 0){
		SetInventory("HUD_Dangerhealth", hp <= ((maxhp * 0.10) >> 16));
		SetInventory("HUD_Critichealth", hp <= ((maxhp * 0.25) >> 16));
		SetInventory("HUD_Lowhealth", hp <= ((maxhp * 0.5) >> 16));
		SetInventory("HUD_Overhealth", hp > maxhp && !(maxHP == 0));
		hp = GetActorProperty(0, APROP_HEALTH);

		if(CheckInventory("RuneProsperity")){
			// If we have the prosperity rune, the max health changes.
			maxhp = 450;
		}else {
			// If we're using the mech, the max health changes.
			maxhp = cond(using_tank, 1500 + 900 * MechUp_CheckInv("Mechup_Armor"), 
			GetActorProperty(0, APROP_SPAWNHEALTH));
		}
		
		delay(1);
	}
	SetInventory("HUD_Dangerhealth", 1);
}

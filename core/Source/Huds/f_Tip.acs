///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_Tip.acs
// displays quick tips onscreen

// ************************** CLIENTSIDE HUDMESSAGE SCRIPTS **************************



// ***********************************************************************************
#library "f_Tip"
#import "f_IntDB.acs"
#import "fl_price.acs"
#import "fl_techs.acs"
#import "fp_ptdir.acs"

#include "zcommon.acs"
#include "acsutils.acs"
#include "samu_tools.acs"



#define TIP_NOTIFY_POS 1
#define TIP_NOTIFY_ID 2

#libdefine TIP_NOTIFY_COLORSET_COMM 0
#libdefine TIP_NOTIFY_COLORSET_GOOD 1
#libdefine TIP_NOTIFY_COLORSET_SPAWN 2
#libdefine TIP_NOTIFY_COLORSET_BAD 3


function void f_TipShow (str l_Image, str l_Text1, str l_Text2, int l_Type)
{
	//log(s:"(f_tip): f_tipShow is depercarted, please use Notify_Message. Thank you.");
    // local containers
    int l_Position;
    int l_ID;
    int l_TipQue_Selection;
    
    // setup position
    if (p_TipQue[0] == 0)               { l_Position = 100.1;   l_ID = 51; p_TipQue[0] ++; l_TipQue_Selection = 0; }
    else if (p_TipQue[1] == 0)          { l_Position = 140.1;   l_ID = 54; p_TipQue[1] ++; l_TipQue_Selection = 1; }
    else if (p_TipQue[2] == 0)          { l_Position = 180.1;   l_ID = 57; p_TipQue[2] ++; l_TipQue_Selection = 2; }
    else if (p_TipQue[3] == 0)          { l_Position = 220.1;   l_ID = 60; p_TipQue[3] ++; l_TipQue_Selection = 3; }
    else if (p_TipQue[4] == 0)          { l_Position = 260.1;   l_ID = 63; p_TipQue[4] ++; l_TipQue_Selection = 4; }
    else if (p_TipQue[5] == 0)          { l_Position = 300.1;   l_ID = 66; p_TipQue[5] ++; l_TipQue_Selection = 5; }
    else if (p_TipQue[6] == 0)          { l_Position = 340.1;   l_ID = 69; p_TipQue[6] ++; l_TipQue_Selection = 6; }
    else if (p_TipQue[7] == 0)          { l_Position = 380.1;   l_ID = 72; p_TipQue[7] ++; l_TipQue_Selection = 7; }
    else                                { l_Position = 420.1;   l_ID = 75; p_TipQue[8] ++; l_TipQue_Selection = 8; }        // always override last message
    
    // audio
    ambientsound("patch/newmessage", 56);
    
    // setup appearence
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    setfont(l_Image);
    hudmessagebold(s:"a"; 1, l_ID, CR_CREAM, 16.1, l_Position, 3.0);
    
    // display text
    setfont("CONFONT");
    
    switch (l_Type)
    {
        case 0:
            hudmessagebold(s:l_Text1; 1, l_ID + 1, CR_CREAM, 64.1, l_Position, 3.0);
            hudmessagebold(s:"\n", s:l_Text2; 1, l_ID + 2, CR_WHITE, 64.1, l_Position, 3.0);
            break;
        case 1:
            hudmessagebold(s:l_Text1; 1, l_ID + 1, CR_BLUE, 64.1, l_Position, 3.0);
            hudmessagebold(s:"\n", s:l_Text2; 1, l_ID + 2, CR_BLUE, 64.1, l_Position, 3.0);
            break;
        case 2:
            hudmessagebold(s:l_Text1; 1, l_ID + 1, CR_GREEN, 64.1, l_Position, 3.0);
            hudmessagebold(s:"\n", s:l_Text2; 1, l_ID + 2, CR_GREEN, 64.1, l_Position, 3.0);
            break;
        case 9:
            hudmessagebold(s:l_Text1; 1, l_ID + 1, CR_RED, 64.1, l_Position, 3.0);
            hudmessagebold(s:"\n", s:l_Text2; 1, l_ID + 2, CR_BRICK, 64.1, l_Position, 3.0);
            break;
        case 10:
            hudmessagebold(n:0, s:l_Text1; 1, l_ID + 1, CR_CREAM, 64.1, l_Position, 3.0);
            hudmessagebold(s:"\n", s:l_Text2; 1, l_ID + 2, CR_WHITE, 64.1, l_Position, 3.0);
            break;
        
    }
    
    // run the subtraction script
    /*if (l_Type == 11)            acs_executealways(160, 0, l_Position, l_TipQue_Selection, l_ID);        // genetics lab
    else if (l_Type == 12)       acs_executealways(161, 0, l_Position, l_TipQue_Selection, l_ID);        // armory
    else if (l_Type == 13)       acs_executealways(162, 0, l_Position, l_TipQue_Selection, l_ID);        // marine command
    else if (l_Type == 14)       acs_executealways(163, 0, l_Position, l_TipQue_Selection, l_ID);        // refinery
    else if (l_Type == 15)       acs_executealways(164, 0, l_Position, l_TipQue_Selection, l_ID);        // demonic lab
    else if (l_Type == 16)       acs_executealways(165, 0, l_Position, l_TipQue_Selection, l_ID);        // nuclear silo
    else */if (l_Type == 17)       acs_executealways(166, 0, l_Position, l_TipQue_Selection, l_ID);        // ion cannon charge
    else if (l_Type == 18)       acs_executealways(167, 0, l_Position, l_TipQue_Selection, l_ID);        // pulse rage charge
    else if (l_Type == 19)       acs_executealways(168, 0, l_Position, l_TipQue_Selection, l_ID);        // other core stuff
    else                         acs_executealways(150, 0, 3, l_TipQue_Selection, 0);                    // normal tip timing
}

function void f_CenterTip (str l_Tip)
{
    // setup appearence
    setfont("CONFONT");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessage(s:l_Tip; 1, 78, CR_WHITE, 400.0, 400.1, 1.0);
}

function void f_BigCenterTip (str l_Tip, int color)
{
    // setup appearence
    setfont("STATBIGS");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessage(s:l_Tip; 1, 78, color, 400.0, 400.1, 2.0);
}

function void f_BigCenterTipBold (str l_Tip, int color)
{
    // setup appearence
    setfont("STATBIGS");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessagebold(s:l_Tip; 1, 78, color, 400.0, 350.1, 2.0);
}

function void f_QuickBigCenterTipBold (str l_Tip, int color)
{
    // setup appearence
    setfont("STATBIGS");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessagebold(s:l_Tip; 1, 667, color, 400.0, 380.1, 0.2, 0.5);
}

function void f_CenterTipQuick (str l_Tip)
{
    // setup appearence
    setfont("CONFONT");
    sethudsize(640, 480, s_ScreenSize[2]);
    hudmessage(s:l_Tip; 1, 78, CR_RED, 320.0, 330.1, 0.1);
}

function void f_CenterTipBold (str l_Tip)
{
    // setup appearence
    setfont("CONFONT");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessageBold(s:l_Tip; 1, 78, CR_WHITE, 400.0, 400.1, 1.0);
}

function void f_SmallTip (str l_Tip, int color, int id)
{
    // setup appearence
    setfont("CONFONT");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessage(s:l_Tip; 1, 0, color, 400.0, 400.1+ 10.0*id, 0.5);
}

function void f_SmallTipPlain(str l_Tip, int color, int id)
{
    // setup appearence
    setfont("CONFONT");
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
    hudmessage(s:l_Tip; 0, 666, color, 400.0, 400.1+ 10.0*id, 0.5);
}

// remove message after waiting period
script 150 (int l_Delay, int l_TipQue_Selection)
{
	SetActivator(0); //Preventing a major disaster
    // delay before restoring
    delay(35 * l_Delay);
    p_TipQue[l_TipQue_Selection] --;
}

// ion cannon charge
script 166 (int l_Position, int l_TipQue_Selection, int l_ID)
{
	SetActivator(0); //Preventing a major disaster
	
	int slot = Notify_QueueFreeSpace(); // Allocate
	ACS_NamedExecuteAlways("SFPlus_ProgressScript",0, 6, 50, slot);// Wrap the waiting time.
	do{ delay(1);}while (p_TipProcess[slot]);
    
    // re enable the ion cannon
	Tech_Set(TECH_MARCOM_IONCAN, TECHF_DONE);
}

// pulse rage charge
script 167 (int l_Position, int l_TipQue_Selection, int l_ID)
{
	SetActivator(0); //Preventing a major disaster
	
	int slot = Notify_QueueFreeSpace(); // Allocate
	ACS_NamedExecuteAlways("SFPlus_ProgressScript",0, 7, 35, slot);// Wrap the waiting time.
	do{ delay(1);}while (p_TipProcess[slot]);
    
    // re enable the pulse rage
    c_Techflag[66] = 1;
}

// other charges
script 168 (int l_Position, int l_TipQue_Selection, int l_ID)
{
	SetActivator(0); //Preventing a major disaster
	
	int slot = Notify_QueueFreeSpace(); // Allocate
	ACS_NamedExecuteAlways("SFPlus_ProgressScript",0, 7, 35, slot);// Wrap the waiting time.
	do{ delay(1);}while (p_TipProcess[slot]);
    
    // re enable the core stuff
	Tech_Set(TECH_MARCOM_CPULSE, TECHF_DONE);
}

// screen flash
script 126 (int l_Colour)
{
    sethudsize(64, 128, 0);
    
    if (l_Colour == 1)
    {
        setfont("FBLUE");
    }
    else if (l_Colour == 2)
    {
        setfont("FWHITE");
    }
    else
    {
        setfont("FBLUE");
        hudmessage(s:"a"; HUDMSG_FADEOUT, 0, 0, 32.4, 64.4, 0.5);
        terminate;
    }
    
    hudmessagebold(s:"a"; HUDMSG_FADEOUT, 0, 0, 32.4, 64.4, 0.5);
    
}

Script "SFPlus_NotifyTest" (void){

}

Script "SFPlus_ProgressScript" (int pnid, int wait_time, int slot)
{	
    int l_Percent;
	str msg = ProgTip_GetMsg(pnid);
	str img = ProgTip_GetImg(pnid);
	str end_msg1 = ProgTip_GetEndMsg1(pnid);
	str end_msg2 = ProgTip_GetEndMsg2(pnid);
	str pre_sound = ProgTip_GetPreSound(pnid);
	str post_sound = ProgTip_GetPostSound(pnid);
	bool silent = ProgTip_GetSilent(pnid);
	
	//int wait_time = 1;
	if(wait_time < 0) wait_time = 1; // Remember, this value is on tics.
	
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, slot);
	p_TipQue[slot] ++;
	p_TipProcess[slot] = True;
	
	
    ambientsound("patch/newmessage", 56);
	if(pre_sound != 0) ambientsound(pre_sound, 56);
    
	while(l_Percent < 101)
    {
        // display message and image
		
		Notify_ShowPercent(msg, l_Percent, img, id, pos, 0);

        // increase percent
        l_Percent ++;
        
        delay(wait_time);
    }
	
	p_TipQue[slot] --;
	p_TipProcess[slot] = False;
	
	ambientsound("patch/newmessage", 56);
	if(post_sound != 0) ambientsound(post_sound, 56);
	Notify_Show(end_msg1, end_msg2, img, id, pos, TIP_NOTIFY_COLORSET_GOOD);

}

Script "SFPlus_TimerScript" (int pnid, int timehit, int pslot)
{	
	SetActivator(0); 
    int time = timehit; // Remember, this is in seconds!
	str msg = ProgTip_GetMsg(pnid);
	str img = ProgTip_GetImg(pnid);
	str end_msg1 = ProgTip_GetEndMsg1(pnid);
	str end_msg2 = ProgTip_GetEndMsg2(pnid);
	str pre_sound = ProgTip_GetPreSound(pnid);
	str post_sound = ProgTip_GetPostSound(pnid);
	bool silent = ProgTip_GetSilent(pnid);
	
	// Notify_QueueFreeSpace can prioritize the timers first rather than the messages!
	int timer_slot = Notify_QueueFreeSpace();
	int id = Notify_QueueGet(TIP_NOTIFY_ID, timer_slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, timer_slot);
	
    ambientsound("patch/newmessage", 56);
	if(pre_sound != 0) ambientsound(pre_sound, 56);
	
	p_TipProcess[pslot] = True;
    p_TipQue[timer_slot] ++;
	
	int time_mins = time / 60;
	int last_time = time_mins;
	int count_slot = -1;
	int last_count_slot = count_slot;
	if(time > 0) do // Timer loop
    {
		ambientsound("beep", 56);
		Notify_ShowTime(msg, time, img, id, pos, 0);
		
		if(!silent){
			time_mins = time / 60;
			if(last_time != time_mins && time_mins > 0){ // Remember how many minutes left
				Notify_Message(msg, strparam(d:time_mins+1, s:" MINUTE(S) LEFT..."), img, 0);
				last_time = time_mins;
			}
			else 
			{	if(time == 10 || time == 15 || time == 30 || time == 45 || time == 60) 
					// Remember how many seconds left
					Notify_Message(msg, strparam(d:time, s:" SECOND(S) LEFT!"), img, 0);
				else if(time <= 5){
					// Check for a free space, and make a small little counter that updates in each second.
					if(count_slot != last_count_slot || count_slot == -1){
						Notify_Clear(last_count_slot);
						count_slot = Notify_QueueFreeSpace();
						p_TipQue[count_slot] ++;
					}
					ambientsound("TIME", 56);
					Notify_MessageSlot(msg, strparam(d:time, s:"!"), img, TIP_NOTIFY_COLORSET_BAD, count_slot);
					last_count_slot = count_slot;
				}
			}
		}
		
        time--;
        delay(35);
    }while(time > 0);
	
	p_TipQue[timer_slot] --;
	p_TipProcess[pslot] = False;
	
	Notify_Clear(last_count_slot);
	ambientsound("patch/newmessage", 56);
	if(post_sound != 0) ambientsound(post_sound, 56);
	Notify_Show(end_msg1, end_msg2, img, id, pos, TIP_NOTIFY_COLORSET_GOOD);
	
}

// Common player notifiers...
function void Notify_Player_Enter(void){
	// Notify the entering of player
	Notify_Player("Joined to the fray.", "PLAYER", TIP_NOTIFY_COLORSET_COMM);
}

function void Notify_Player_Death(void){
	// Notify the death of player
	Notify_Player("Has fallen!", "DEATH", TIP_NOTIFY_COLORSET_BAD);
}

function void Notify_Player_Leave(str name){
	// Notifiy the leaving of this player. 
	// (Since disconnect scripts losses the name on disconnects,
	// you need the name instead of the player number.)
	
	int slot = Notify_QueueFreeSpace();
	Notify_Clear2(slot); // Clear it just in case.
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, slot);
	Notify_QueueAlloc(slot);
	
	ambientsound("patch/newmessage", 56);
	Notify_Show(name, "Leaves from game.", "PLAYER",id, pos, TIP_NOTIFY_COLORSET_COMM);
}

function void Notify_Player(str what, int img, int set) {
	// Simpler version of notify_playerEx
	Notify_PlayerEX(0, "", what, img, set);
}

function void Notify_PlayerEX(int who, str what1, str what2, int img, int set) {
	// Notify something about the player.
	int slot = Notify_QueueFreeSpace();
	Notify_Clear2(slot); // Clear it just in case.
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, slot);
	Notify_QueueAlloc(slot);
	
	ambientsound("patch/newmessage", 56);
	Notify_Show(strparam(n:who, s:what1), what2, img, id, pos, set);
}

function void Notify_Message(str what1, str what2, int img, int set) {
	// Notify a quick message.
	int slot = Notify_QueueFreeSpace();
	Notify_Clear2(slot); // Clear it just in case.
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, slot);
	Notify_QueueAlloc(slot);
	
	ambientsound("patch/newmessage", 56);
	Notify_Show(what1, what2, img, id, pos, set);
}

function void Notify_MessagePriv(str what1, str what2, int img, int set) {
	// Notify a quick message.
	int slot = Notify_QueueFreeSpace();
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, slot);
	Notify_Clear2(slot); // Clear it
	
	ambientsound("patch/newmessage", 56);
	Notify_ShowEx(what1, what2, img, id, pos, set, false);
}

function void Notify_MessageSlot(str what1, str what2, int img, int set, int slot) {
	// Notify a quick message.
	Notify_Clear2(slot); // Clear it
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
	int pos = Notify_QueueGet(TIP_NOTIFY_POS, slot);
	Notify_QueueAlloc(slot);
	
	ambientsound("patch/newmessage", 56);
	Notify_Show(what1, what2, img, id, pos, set);
}

function void Notify_CommMarker(str what, str img, str snd){
	Notify_Message("New Objetive!", what, img, 0);
	ambientsound(snd, 125);
}

function void Notify_Reward(str what, str img){
	Notify_Message(what, "Ha been rewarded to your team!", img, TIP_NOTIFY_COLORSET_GOOD);
}

function void Notify_Research(str what, str img){
	Notify_Message(what, "Researched!", img, TIP_NOTIFY_COLORSET_GOOD);
}

function void Notify_Deploy(str what, str img){
	Notify_Message(strparam(s:"\ci", s:what, s:" \c-Deployed"), strparam(s:"Commander deplyed a(n) \ci",s:what), img, TIP_NOTIFY_COLORSET_SPAWN);
}

function void Notify_ShowTime(str msg1, int time, str img, int id,int pos, int set){
	// Notify the remaining time
	// time is in seconds!
	int mins = time / 60;
	int secs = time % 60;
	str time_disp = cond(mins > 0, strparam(d:mins, s:" min(s) and ", d:secs), strparam(d:secs));
	Notify_Show(msg1, strparam(s:time_disp, s:" sec(s) Left..."), img, id, pos, set);
}

function void Notify_ShowPercent(str msg1, int perc, str img, int id,int pos, int set){
	// Notify the progress
	Notify_ShowEx(msg1, strparam(d:perc, s:"%"), img, id, pos, set, true);
}

function void Notify_Show(str msg1, str msg2, str img, int id, int pos, int set){
	Notify_ShowEx(msg1, msg2, img, id, pos, set, true);
}

function void Notify_ShowEx(str msg1, str msg2, str img, int id, int pos, int set, bool bold){
	// Generalized notify message, just because why not?
	int color1;
	int color2;

	switch (set){
        case TIP_NOTIFY_COLORSET_COMM: // Common color set
            color1 = CR_CREAM;
			color2 = CR_WHITE;
            break;
        case TIP_NOTIFY_COLORSET_GOOD: // Good-event color set
            color1 = CR_CYAN;
            color2 = CR_BLUE;
            break;
        case TIP_NOTIFY_COLORSET_SPAWN: // Spawn color set
            color1 = CR_GREEN;
            color2 = CR_DARKGREEN;
            break;
        case TIP_NOTIFY_COLORSET_BAD: // Bad-event color set
            color1 = CR_RED;
            color2 = CR_BRICK;
            break;
    }

	setfont(img);
    sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
	if(bold)	hudmessagebold(s:"a"; 1, id, color1, 16.1, pos, 3.0);
	else		hudmessage(s:"a"; 1, id, color1, 16.1, pos, 3.0);
        
    setfont("CONFONT");
    if(bold)	hudmessagebold(s:msg1; 1, id + 1, color1, 64.1, pos, 3.0);
	else		hudmessage(s:msg1; 1, id + 1, color1, 64.1, pos, 3.0);
	SetHudClipRect(0, 0, 0, 0, 300);
	
    if(bold)	hudmessagebold(s:strparam(s:"\n", s:msg2); 1, id + 2, color2, 64.1, pos, 3.0);
	else		hudmessage(s:strparam(s:"\n", s:msg2); 1, id + 2, color2, 64.1, pos, 3.0);
	SetHudClipRect(0, 0, 0, 0, 0);
}

function void Notify_Clear(int slot){
	// Clear the notification from a slot.
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
    ClearHudMessage(id);
	ClearHudMessage(id + 1);
	ClearHudMessage(id + 2);
	p_TipQue[slot] --;
}

function void Notify_Clear2(int slot){
	// Clear the notification from a slot.
	int id = Notify_QueueGet(TIP_NOTIFY_ID, slot);
    ClearHudMessage(id);
	ClearHudMessage(id + 1);
	ClearHudMessage(id + 2);
}

function int Notify_QueueFreeSpace(void){
	// Finds a free space from the queue
	int free_space = 8; // Defaults to the last aviable space
	for (int i = 0; i < 9; i++){
		if(p_TipQue[i] == 0) { free_space = i; break; }
	}
	return free_space;
}

function void Notify_QueueAlloc(int free_space){
	// Allocates the message in that space, and run the cleaning up script.
	p_TipQue[free_space] ++;
	ACS_ExecuteAlways(150, 0, 3, free_space);
}

function int Notify_QueueGet(int what, int free_space){
	// A Generalized getter, for the message setup.
	int pos = 100.1;
	int id = 400;
	
	pos += 40.0 * free_space;
	id += 3 * free_space;
	
	if		(what == TIP_NOTIFY_POS) return pos;
	else if (what == TIP_NOTIFY_ID) return id;
	
	return 0;
}

// Classic door timer.
script 129 (int l_TextType, int l_StartTime)
{
    while(l_StartTime > 0){
        sethudsize(800, 600, 0);
        setfont("INFO");
        hudmessagebold(s:"a"; HUDMSG_FADEOUT, 322, CR_WHITE, 300.0, 320.0, 2.0);
        ambientsound("beep", 125);
        setfont("CONFONT");
        switch(l_TextType){
            case 0:
                hudmessagebold(d:l_StartTime, s:" second(s)"; HUDMSG_FADEOUT, 321, CR_WHITE, 400.0, 320.0, 2.0);    break;
            case 1:
                hudmessagebold(s:"Doors opening in...\n", d:l_StartTime, s:" second(s)"; HUDMSG_FADEOUT, 321, CR_WHITE, 400.0, 320.0, 2.0);    break;
        }
        delay(35);
        l_StartTime -= 1;
    }
}  

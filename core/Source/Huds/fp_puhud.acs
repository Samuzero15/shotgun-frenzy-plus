///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_puhud.acs
// Powerup HUD.

// For the information about the current active powerups.
#library "fp_puhud"

#include "zcommon.acs"
#include "acsutils.acs"

#libdefine PUPHUD_MAX 40
#libdefine PUPHUD_PROP_LABEL 0
#libdefine PUPHUD_PROP_ACTOR 1

int puphud_stack;
int puphud_amount;
int powerup_list[PUPHUD_MAX][2];

Script "SFPlus_PowerupList" Enter Clientside{
	if(ConsolePlayerNumber() == Playernumber()){
		PowHud_Add("x4 Damage", 		"PowerQuadDamage");
		PowHud_Add("x6 Damage", 		"PlayUp_PowUpUpgrade_6xDmg");
		PowHud_Add("Fast Fire", 		"Inv_Power_Infinity");
		PowHud_Add("x2 Credits", 		"Inv_Power_Wealth");
		PowHud_Add("Invurnerable", 		"PowerInvulnerable");
		PowHud_Add("Prometeo x2 DMG", 	"PlayUp_Prometeo_Power_2xDmg");
		PowHud_Add("Prometeo Shield", 	"PlayUp_Prometeo_Power_Invul");
		PowHud_Add("Spawn Shield", 		"PlayUp_Spawnshield_Power");
		PowHud_Add("Defense", 			"RuneDefense");
		PowHud_Add("Rampage", 			"RuneRampage");
		PowHud_Add("Health", 			"RuneHealth");
		PowHud_Add("Ammunition", 		"RuneAmmunition");
		PowHud_Add("Fortune", 			"RuneFortune");
		PowHud_Add("Soul", 				"RuneSoul");
		PowHud_Add("Resurrection", 		"RuneResurrection");
		PowHud_Add("Blast", 			"RuneBlast");
		PowHud_Add("Blast Cooldown", 	"BlastRune_CooldownTime");
		PowHud_Add("Temperance", 		"RuneTemperance");
		while(PlayerInGame(PlayerNumber())){
			for(int i = 0; i < puphud_amount; i++){
				PowHud_Show(i);
			}
			delay(1);
			PowHud_Clear();
		}
	}
}

function void PowHud_Add(str label, str actor){
	if(puphud_amount >= PUPHUD_MAX){
		log(s:"(fp_puhud.acs): Max number of powerup labels reached.");
		return;
	}
	powerup_list[puphud_amount][PUPHUD_PROP_LABEL] = label;
	powerup_list[puphud_amount][PUPHUD_PROP_ACTOR] = actor;
	puphud_amount++;
}

function str PowHud_Get(int which, int prop){
	if(which >= PUPHUD_MAX || which < 0){
		log(s:"(fp_puhud.acs): Label ", d:which, s:" not found.");
		return 0;
	}
	return powerup_list[which][prop];
}

function void PowHud_Clear(void){
	for (int i = puphud_stack; i >= 0; i--)
		ClearHudMessage(6100+i); 
	puphud_stack = 0;
}

function void PowHud_Show(int which) {
	str powtime = GetActorPowerupTics(0, PowHud_Get(which, PUPHUD_PROP_ACTOR));
	
	// Draw only if there is time for it.
	if(powtime != 0){
		str effect = PowHud_Get(which, PUPHUD_PROP_LABEL);
		int index = puphud_stack;
		int w = 800, h = 640;
		int wearoff = (powtime / 35 < 5);
		int flicker = ((powtime / 12) % 2 == 0);
		int x, y, space = index*16.0;
		str msg;
		// Set position
		if(getCvar("screenblocks") == 11) {
			x = w*(0.85) + 0.2; 
			y = (h*(0.95) - space) + 0.1;
			/*
			msg = Strparam(
				d:((35 +powtime )/ 35), 
				s:cond(wearoff, cond(flicker," \cf" ," \ci")," \cv"),
				s:effect);
				*/
		}else if (getCvar("screenblocks") < 11){
			x = w*(0.95) + 0.2; 
			y = (h*(0.68) - space) + 0.1;
			
		}
		int secs = (powtime)/ 35;
		if(secs > 86640 || secs < -86639) // More than one day (Infinite powerups)
		{
			msg = Strparam(
				s:"\cv", s:effect);
		}
		else{
			msg = Strparam(
				s:cond(wearoff, cond(flicker,"\cf" ,"\ci"),"\cp"),
				s:effect, s:" \c-",
				s:cond(secs < 10, strparam(d:secs, s:".", d:(powtime % 35)), strparam(d:secs)));
		}
		

		SetHudSize(w, h, 1);
		SetFont("STATBIGS");
		HudMessage(s:msg; HUDMSG_PLAIN, 6100+index, CR_WHITE, x, y, 3.0);
		puphud_stack++;
	}
	
}
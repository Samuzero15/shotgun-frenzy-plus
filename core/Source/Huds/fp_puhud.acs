///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

// fp_puhud.acs
// Powerup HUD.

// For the information about the current active powerups.
#library "fp_puhud"

#include "zcommon.acs"
#include "acsutils.acs"

#import "fl_StUpDir.acs"

#libdefine PUPHUD_MAX 40
#libdefine PUPHUD_PROP_LABEL 0
#libdefine PUPHUD_PROP_ACTOR 1

int puphud_stack;
int puphud_amount;
int powerup_list[PUPHUD_MAX][2];

script "SFPlus_PowerupList_Enter" ENTER{
	NamedExecuteClientScript("SFPlus_PowerupList", PlayerNumber());
}

script "SFPlus_PowerupList_Respawn" RESPAWN{
	NamedExecuteClientScript("SFPlus_PowerupList", PlayerNumber());
}

Script "SFPlus_PowerupList" (void) CLIENTSIDE{
	puphud_amount = 0;
	if(ConsolePlayerNumber() == Playernumber() && ConsolePlayerNumber() >= 0){
		PowHud_Add("MaxHP", 		"StimUp_StimulantPower");
		PowHud_Add("Speed", 		"StimUp_CaffeinePower");
		PowHud_Add("Regen", 		"StimUp_CicatrizatePower");
		PowHud_Add("Defense", 			"RuneDefense");
		PowHud_Add("Rampage", 			"RuneRampage");
		PowHud_Add("Ammunition", 		"RuneAmmunition");
		PowHud_Add("Blast", 			"RuneBlast");
		PowHud_Add("Soul", 				"RuneSoul");

		PowHud_Add("(C.P Warcry) Fast Fire.",	"CorePulse_WARCRY_RageUp");
		PowHud_Add("(C.P Warcry) 50% Dmg Up.",	"CorePulse_WARCRY_DamageUp");
		PowHud_Add("(C.P Heal) 50% Resist.","CorePulse_Heal_Resistance");
		PowHud_Add("(C.P Heal) Invul.",	"CorePulse_Heal_Invul");
		PowHud_Add("\cg-25% Def", 		"ChampPoison_CurseArmor");
		PowHud_Add("\cg-25% Atk", 		"ChampPoison_CurseDamage");
		PowHud_Add("x4 Damage", 		"PowerQuadDamage");
		PowHud_Add("x6 Damage", 		"PlayUp_PowUpUpgrade_6xDmg");
		PowHud_Add("Infinite Ammo", 	"Inv_Power_Infinity");
		PowHud_Add("Helltrigger", 		"Inv_Power_AmmoRegeneration");
		PowHud_Add("x2 Credits", 		"Inv_Power_Wealth");
		PowHud_Add("Invurnerable", 		"PowerInvulnerable");
		PowHud_Add("Prometeo x2 DMG", 	"PlayUp_Prometeo_Power_2xDmg");
		PowHud_Add("Prometeo Shield", 	"PlayUp_Prometeo_Power_Invul");
		PowHud_Add("Spawn Shield", 		"PlayUp_Spawnshield_Power");
		PowHud_Add("Rage", 				"RuneDoubleFiringSpeed");
		PowHud_Add("Strength", 			"RuneDoubleDamage");
		PowHud_Add("Resistance", 		"RuneHalfDamage");
		PowHud_Add("Reflection", 		"RuneReflection");
		PowHud_Add("Regeneration", 		"RuneRegeneration");
		PowHud_Add("Haste", 			"RuneSpeed25");
		PowHud_Add("Drain", 			"RuneDrain");
		PowHud_Add("Prosperity", 		"RuneProsperity");
		PowHud_Add("Spread", 			"RuneSpread");
		PowHud_Add("High Jump", 		"RuneHighJump");
		PowHud_Add("Temperance", 		"RuneTemperance");
		PowHud_Add("Health", 			"RuneHealth");
		PowHud_Add("Fortune", 			"RuneFortune");
		PowHud_Add("Resurrection", 		"RuneResurrection");
		
		while(PlayerHealth() > 0){
			puphud_stack = 0;
			for(int i = 0; i < puphud_amount; i++){
				PowHud_Show(i);
				PowHud_Update(i);
			}
			delay(1);
			//PowHud_Clear();
		}
	}
}

function void PowHud_Add(str label, str actor){
	if(puphud_amount >= PUPHUD_MAX){
		log(s:"(fp_puhud.acs): Max number of powerup labels reached.");
		return;
	}
	powerup_list[puphud_amount][PUPHUD_PROP_LABEL] = label;
	powerup_list[puphud_amount][PUPHUD_PROP_ACTOR] = actor;
	puphud_amount++;
}

function str PowHud_Get(int which, int prop){
	if(which >= PUPHUD_MAX || which < 0){
		log(s:"(fp_puhud.acs): Label ", d:which, s:" not found.");
		return 0;
	}
	return powerup_list[which][prop];
}

function void PowHud_Set(int which, int prop, int value){
	if(which >= PUPHUD_MAX || which < 0){
		log(s:"(fp_puhud.acs): Label ", d:which, s:" not found.");
		return;
	}
	powerup_list[which][prop] = value;
}

/*
function void PowHud_Clear(void){
	for (int i = puphud_stack; i >= 0; i--)
		ClearHudMessage(6100+i); 
	puphud_stack = 0;
}*/

function void PowHud_Update(int which) {
	str msg = PowHud_Get(which, PUPHUD_PROP_LABEL);
	int time;
	str cooldown;
	if(CheckInventory(PowHud_Get(which, PUPHUD_PROP_ACTOR))){
		str label = "";
		switch(which){
			case 0: 
			label = strparam(s:"+",d:(20*StimUp_CheckInv("StimUp_Stimulant")), s:" Max HP");
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;
			case 1:
			label = strparam(s:"+",d:(10*StimUp_CheckInv("StimUp_Caffeine")), s:"% Speed");
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;
			case 2: 
			label = strparam(d:(10-StimUp_CheckInv("StimUp_Cicatrizate")), s:" Tic Hp Regen");
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;

			case 3: 
			cooldown = PowHud_Timer(GetActorPowerupTics(0, "DefenseRune_ShieldInvul"));
			label = strparam(s:"Defense", s:cooldown);
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;

			case 4: 
			cooldown = PowHud_Timer(GetActorPowerupTics(0, "RampageRune_Damage"));
			label = strparam(s:"Rampage", s:cooldown);
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;

			case 5: 
			cooldown = PowHud_Timer(GetActorPowerupTics(0, "Ammunition_InfiniteAmmo"));
			label = strparam(s:"Ammunition", s:cooldown);
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;

			case 6: 
			cooldown = PowHud_Timer(GetActorPowerupTics(0, "BlastRune_CooldownTime"));
			label = strparam(s:"Blast", s:cooldown);
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;

			case 7: 
			label = strparam(s:"Soul (", d:CheckInventory("SoulRune_Kills") ,s:")");
			PowHud_Set(which, PUPHUD_PROP_LABEL, label);
			break;
			
		}
		
		//log(s:"(PowHud) Index: ",d:which, s:", Label: ", s:msg);
	}
}

function void PowHud_Show(int which) {
	str powtime = GetActorPowerupTics(0, PowHud_Get(which, PUPHUD_PROP_ACTOR));
	
	// Draw only if there is time for it.
	if(powtime != 0){
		str effect = PowHud_Get(which, PUPHUD_PROP_LABEL);
		int index = puphud_stack;
		int w = 800, h = 640;
		int wearoff = (powtime / 35 < 5);
		int flicker = ((powtime / 12) % 2 == 0);
		int x, y, space = index*16.0;
		str msg;
		// Set position
		if(getCvar("screenblocks") == 11) {
			x = w*(0.85) + 0.2; 
			y = (h*(0.95) - space) + 0.1;
			/*
			msg = Strparam(
				d:((35 +powtime )/ 35), 
				s:cond(wearoff, cond(flicker," \cf" ," \ci")," \cv"),
				s:effect);
				*/
		}else if (getCvar("screenblocks") < 11){
			x = w*(0.95) + 0.2; 
			y = (h*(0.68) - space) + 0.1;
			
		}
		int secs = (powtime)/ 35;
		int time_str = PowHud_Timer(powtime);
		if(secs > 86640 || secs < -86639) // More than one day (Infinite powerups, like runes)
		{
			msg = Strparam(
				s:"\cv", s:effect);
		}
		else{
			msg = Strparam(s:time_str, s:" \cv", s:cond(wearoff, cond(flicker,"\cf" ,"\ci"),"\cu"),s:effect);
		}
		

		SetHudSize(w, h, 1);
		SetFont("DBIGFONT");
		HudMessage(s:msg; HUDMSG_PLAIN, 6100+index, CR_WHITE, x, y, 0.03);
		puphud_stack++;
	}
	
}

function str PowHud_Timer(int time){
	str time_str;
	if(time == 0){
		time_str = "";
	}
	else{
		str secs = time/35;
		str milisecs = fixedMul(fixedDiv((time%35)<<16, 35.0),10.0)>>16;
		time_str = strparam(s:" \cu(\c-",s:cond(secs < 10, strparam(d:secs, s:".", d:milisecs, s:"s\cu)"), strparam(d:secs, s:"s\cu)")));
	}
	return time_str;
}